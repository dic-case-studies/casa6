#!/usr/bin/perl
use File::Path;

if ( exists $ENV{CASA_INSTALLATION_TYPE} && $ENV{CASA_INSTALLATION_TYPE} eq "rpm-installation" && exists $ENV{CASAPATH} ) {
    my @path = split(/\s+/,$ENV{CASAPATH});
    $prefix=$path[0];
} else {
    $prefix="@PREFIX@";
    $include="@INCLUDE@";
}

$lddpath="@LDDPATH@";
$lddpreload="@LDDPRELOAD@";
$libversion="@LIBVERSION@";
$version="@CASA_API_VERSION@";
$revision="@SVNREVISION@";
$srcurl="@CASASRCURL@";
$arch="@arch@";

$mplrc="";
$pythonhome="";
$pythonpath="";
$casapython="";
$tcllib="";
$qtplugin="";
$pgplot="";

#SPLIT#SPLIT#SPLIT#SPLIT#SPLIT#SPLIT#SPLIT#SPLIT#SPLIT#SPLIT#SPLIT#SPLIT#SPLIT#
#######  code after this point is shared by both developer builds and binary
#######  releases and should be written to support either using the variables
#######  above...
$HOME = $ENV{HOME};
$os = `uname -s`;
$exec_with_sh = 0;

sub usage {
    my $status = shift(@_);

    my $msg = <<'EOF';
Usage: casa-config [OPTION]

   --help               print this message
   --version            print CASA version information
   --prefix             print CASA install root
   --revision           print CASA source revision information
   --libversion         print CASA library version number
   --exec <command>     setup CASA environment and exec a cmd
   --sh-exec <command>  setup CASA environment and exec a cmd with /bin/sh

EOF
    print $msg;
    exit $status;
}

sub execute {
    my $cmd = shift(@_);

    ####
    #### setup matplotlib...
    ####
    if ( ! exists $ENV{MATPLOTLIBRC} && $mplrc ) {
        $ENV{MATPLOTLIBRC} = $mplrc;
    }

    ####
    ####    where fontList.cache...
    ####    mixing this with different versions of python causes problems...
    ####
    $ENV{MPLCONFIGDIR} = "$HOME/.casa/matplotlib";
    if ( ! -d $ENV{MPLCONFIGDIR} ) {
	mkpath($ENV{MPLCONFIGDIR});
    }
    if ( ! -d $ENV{MPLCONFIGDIR} ) {
        print "could not create matplotlib config directory: $ENV{MPLCONFIGDIR}\n";
        exit 1;
    }

    if ( $pythonhome ) {
        $ENV{PYTHONHOME} = $pythonhome;
    }
    if ( "$pythonpath" ) {
        my $old = (exists $ENV{PYTHONPATH} ? ":$ENV{PYTHONPATH}" : '');
        $ENV{PYTHONPATH} = "$pythonpath:$old";
    }
    if ( $casapython ) {
        $ENV{__CASAPY_PYTHONDIR} = $casapython;
    }

    if ( $tcltklib ) {
        $ENV{TCL_LIBRARY} = "$tcltklib/tcl";
        $ENV{TK_LIBRARY} = "$tcltklib/tk";
    }
    if ( $qtplugin ) {
        $ENV{QT_PLUGIN_PATH} = $qtplugin;
    }
    if ( $pgplot ) {
        $ENV{PGPLOT_FONT} = "$pgplot/grfont.dat";
        $ENV{PGPLOT_RGB} = "$pgplot/rgb.txt";
    }

    $ENV{CASAPATH} = "$prefix $arch";

    if ( $lddpath ) {
        if ( $^O eq 'linux' ) {
            $ENV{LD_LIBRARY_PATH} = $lddpath;
        } elsif ( $^O eq 'darwin' ) {
            $ENV{DYLD_LIBRARY_PATH} = $lddpath;
        }
    }

    if ( $lddpreload ) {
        ###
        ### newer versions of fedora have trouble with the older libtermcap
        ### that comes with the RHEL5 build casa binary distributions...
        ### interposing libtinfo resolves the issue...
        ###
        ### displaying task help, when remotely logged into a newer linux
        ### system from another linux system causes a segv without also
        ### including the ncurses that is linked against libtinfo...
        ###
        chomp( my $interpose=`find -H /lib64 -type f -name 'libtinfo.*' 2> /dev/null | head -1` );
        if ( $interpose ) {
            chomp( my $ncurses = `find -H /lib64 -type f -name 'libncurses.so.*' 2> /dev/null | head -1` );
            $interpose = "$interpose $ncurses ";
        }

        $ENV{LD_PRELOAD} = "$interpose$lddpreload";
    }

    if ( $exec_with_sh ) {
        my $c = shift(@$cmd);
        my @quoted = ( );
        foreach ( <@$cmd> ) {
            s|([)(*\s?])|\\$1|g;
            push( @quoted, $_ );
        }
        exec '/bin/sh', '-c', join( ' ', $c, @quoted );
    } else {
        exec { $$cmd[0] } @$cmd;
    }
    exit(0);
}

if ( scalar(@ARGV) <= 0 ) {
    usage 1;
}

while ( scalar(@ARGV) > 0 ) {
    $_ = shift(@ARGV);
    if ( m|^--help$| ) { usage 0 }
    elsif ( m|^--version$| ) { print "$version\n" }
    elsif ( m|^--prefix$| ) { print "$prefix\n" }
    elsif ( m|^--revision$| ) { print "$revision\n" }
    elsif ( m|^--libversion$| ) { print "$libversion\n" }
    elsif ( m|^--src$| ) { print "$srcurl\n" }
    elsif ( m|^--exec$| ) { 
        if ( scalar(@ARGV) < 1 ) { usage 1 }
        execute \@ARGV;
    } elsif ( m|^--sh-exec$| ) { 
        if ( scalar(@ARGV) < 1 ) { usage 1 }
        $exec_with_sh = 1;
        execute \@ARGV;
    }
}

exit 0;
