<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/tools/xml/casa.xsd">


 
        <tool name="synthesisutils" module="synthesisutils">
	<needs>synthesisimstore</needs>
        <shortdescription>tool for synthesis imaging</shortdescription>
       
<description>
synthesisutils is an tool that contains helper functions for synthesisimager
</description>

<code>
	<include>tools/synthesis/synthesisutils_forward.h</include>
<private>
	<include>tools/synthesis/synthesisutils_private.h</include>
</private>

</code>


<!-- ===================================== -->
 
   <method type="constructor" name="synthesisutils">
   <shortdescription>Construct an synthesisutils tool</shortdescription>
   
<description>
This is used to construct {\tt synthesisutils} tool. 

</description>
<input>

</input>
<returns type="synthesisutils"/>
<example>


</example>
</method>

<!-- ===================================== -->

   <method type="function" name="contdatapartition">
   <shortdescription>Partition data selection parameters for continuum imaging</shortdescription>

<description>
</description>
<input>
     <param type="record" name="selpars">
     <description>All selection parameters for one or more MSs</description>
     <value type="record"></value>
     </param>

     <param type="int" name="npart">
     <description>Number of partitions</description>
     <value>1</value>
     </param>

</input>
<returns type="record"/>
</method>

<!-- ===================================== -->

<method type="function" name="advisechansel">
   <shortdescription>Advise on spw and chan selection optimal for the image frequency range wanted</shortdescription>
   

<description>
 Basically tells you what channels of which spectral window need to be
 selected, in this ms,  for your image spectral parameters.
 The freqstep is used to
 calulate the extra padding needed for data selection at the begining
 and end of the range.  The freqframe parameter is the frame in which
 the frequency range is being given. It will be converted to the frame
 of the data with time to locate which channel match.

 You need to specify the field\_id for which this calculation is 
 being done. 
  
If the parameter {\tt getfreqrange=True} then the reverse is requested. You set {\tt spwselection} to be the range of data selection you want to use and you'll get the range of frequency covered in the frame you set. 

</description>
<input>


     <param type="double" direction="in" name="freqstart">
     <description>Begining of frequency range in Hz</description>
     <value>1.0e6</value>
     </param>

     <param type="double" direction="in" name="freqend">
     <description>End of frequency range in Hz</description>
     <value>1.1e6</value>
     </param>
     
     <param type="double" direction="in" name="freqstep">
       <description>spectral channel resolution of intended image in Hz</description>
       <value>100.0</value>
     </param>
     
     <param type="string" direction="in" name="freqframe">
       <description>frame in which frequency is being expressed in other parameters</description>
       <value>LSRK</value>
     </param>
     <param type="string" direction="in" name="msname">
       <description>name of an ms, if empty string it will use the ms's used in selectvis</description>
       <value></value>
     </param>
     <param type="int" direction="in" name="fieldid">
       <description>fieldid to use when msname is not empty otherwise ignored and field selected in selectvis is used</description>
       <value>0</value>
     </param>
     <param type="bool" name="getfreqrange">
     <description>if set then freqrange is returned in the frame requested for the data selected</description>
     <value>false</value>
     </param>
     <param type="string" name="spwselection">
       <description>if getfreqrange=True then this is needed to find the range of frequency in the frame requested</description>
       <value></value>
     </param>
     
</input>
<example>
In this example, we are interested in an image cube which span 20.0682GHz to 20.1982 in LSRK  which will have a channel resolution of 3.9MHz. The field we are interested is field 4 of each of the ms.


#######
im.selectvis(vis='test1.ms', field='4', spw='*')
im.selectvis(vis='test2.ms', field='4', spw='*')
selinfo=im.advisechansel(freqstart=2.00682e10, freqend=2.01982e10, freqstep=3.9e3, freqframe="LSRK")
####The output "selfinfo" will be a record which will look like thus
{'ms_0': {'nchan': array([109,  23], dtype=int32),
          'spw': array([4, 5], dtype=int32),
          'start': array([19,  0], dtype=int32)},
 'ms_1': {'nchan': array([109,  23], dtype=int32),
          'spw': array([4, 5], dtype=int32),
          'start': array([19,  0], dtype=int32)}}
###
Thus from the first ms a spw selection like  '4:19~127, 5:0~22'  is all that is needed. 
Similarly from the second ms.

###if you need this info without needing to change the state of the imager tool 
then you can it as follows

im.advisechansel(freqstart=2.00682e10, freqend=2.01982e10, freqstep=3.9e3, freqframe="LSRK", msname="test1.ms", fieldid=4)


####now if you want to see what frequency range is covered, in the frame 
####defined by freqframe, in spwselection you want to use
im.selectvis(vis='test3.ms', spw='0:20~210')
im.advisechansel(getfreqrange=True, freqframe="LSRK")
### the output will be something
 {'freqend': 346020345384.64178, 'freqstart': 345683852920.1723}

###and if you just want to use it as a helper function without touching the state 
###of imager

im.advisechansel(msname='test3.ms', getfreqrange=True, spwselection='0:20~210')


</example>
<returns type="record"/>
</method>


<!-- ===================================== -->

   <method type="function" name="cubedatapartition">
   <shortdescription>Partition data selection parameters for CUBE imaging</shortdescription>

<description>
  returns a dictionary with data spectral parttiion that maps  data  to  nparts
  of the input range frequency... usually to be used for doing data selection
  when imaging a cube from fstart to fend in npart subcubes

</description>
<input>
     <param type="record" name="selpars">
     <description>All selection parameters for one or more MSs</description>
     <value type="record"></value>
     </param>

     <param type="int" name="npart">
     <description>Number of partitions</description>
     <value>1</value>
     </param>

       <param type="any" name="fstart">
     <description>start frequency of cube image</description>
     <any type="variant" />
     <value>1GHz</value>
     </param>
      
       <param type="any" name="fend">
     <description>end frequency of cube image</description>
     <any type="variant" />
     <value>1.5GHz</value>
     </param>

       <param type="string" name="frame">
     <description>frame of fstart and fend</description>
     <value>LSRK</value>
     </param>
      

</input>
<example>
##make a synthesisutils tool
siu=casac.synthesisutils()
### define first ms parameters
msrec={"msname":"ngc5921.ms.contsub", "field":"0", "spw":"0"}
pars={"ms0":msrec}
##  can add ms1, ms2 etc for multiple ms  into dictionary pars

##now get the data selections for 20 subpart of a cube that 
## spans from 1.412787GHz to 1.413287GHz
siu.cubedatapartition(selprs=pars, npart=20, fstart="1.412787GHz", fend="1.413287GHz", frame="LSRK")

</example>
<returns type="record"/>
</method>

<!-- ===================================== -->
<!-- ===================================== -->

   <method type="function" name="cubeimagepartition">
   <shortdescription>Partition image cube parameters for CUBE deconvolution</shortdescription>

<description>
</description>
<input>
     <param type="record" name="impars">
     <description>All imaging parameters for one or more image fields</description>
     <value type="record"></value>
     </param>

     <param type="int" name="npart">
     <description>Number of partitions</description>
     <value>1</value>
     </param>

</input>
<returns type="record"/>
</method>

<!-- ===================================== -->
<!-- ===================================== -->
   <method type="function" name="cubedataimagepartition">
      <shortdescription>Partition data/image cube parameters for CUBE deconvolution</shortdescription>

<description>
</description>
<input>

     <param type="record" name="selpars">
     <description>All selection parameters for one or more MSs</description>
     <value type="record"></value>
     </param>

     <param type="record" name="incsys">
     <description>input coordinate system</description>
     <value type="record"></value>
     </param>

     <param type="int" name="npart">
     <description>Number of partitions</description>
     <value>1</value>
     </param>

     <param type="int" name="nchannel">
     <description>Number of channels</description>
     <value>1</value>
     </param>

 </input>
<returns type="record"/>
</method>

<!-- ===================================== -->
<!-- ===================================== -->

   <method type="function" name="checkselectionparams">
   <shortdescription>Check and Fix Selection Parameters for one MS</shortdescription>

<description>
</description>
<input>
     <param type="record" name="selpars">
     <description>All selection parameters for one MS</description>
     <value type="record"></value>
     </param>

</input>
<returns type="record"/>
</method>


<!-- ===================================== -->
<!-- ===================================== -->

   <method type="function" name="checkimageparams">
   <shortdescription>Check and Fix Imaging Parameters for one field</shortdescription>

<description>
</description>
<input>
     <param type="record" name="impars">
     <description>All imaging parameters for one image-field</description>
     <value type="record"></value>
     </param>

</input>
<returns type="record"/>
</method>

<!-- ===================================== -->
<!-- ===================================== -->

   <method type="function" name="checkgridparams">
   <shortdescription>Check and Fix Gridding/FTM Parameters for one field</shortdescription>

<description>
</description>
<input>
     <param type="record" name="gridpars">
     <description>All gridding/ftm parameters for one image-field</description>
     <value type="record"></value>
     </param>

</input>
<returns type="record"/>
</method>

<!-- ===================================== -->                                                                                                   
<!-- ===================================== -->                                                                                                   
                                                                                                                                                 
   <method type="function" name="updateimpars">                                                                                                  
   <shortdescription>check the consistency between the csys record and other impars and update/modify impars if necessary</shortdescription>     
                                                                                                                                                 
<description>                                                                                                                                    
</description>                                                                                                                                   
<input>                                                                                                                                          
     <param type="record" name="impars">                                                                                                         
     <description>All image parameters of one image-field</description>                                                                          
     <value type="record"></value>                                                                                                               
     </param>                                                                                                                                    
                                                                                                                                                 
</input>                                                                                                                                         
<returns type="record"/>                                                                                                                         
</method>                                                                                                                                        
                                                                                                                                                 
                                           
<!-- ===================================== -->
<!-- ===================================== -->

<!---
   <method type="function" name="makeimage">
   <shortdescription>Make an empty image</shortdescription>

<description>
</description>
<input>
     <param type="record" name="impars">
     <description>All image parameters for one image-field</description>
     <value type="record"></value>
     </param>

     <param type="string" name="msname">
     <description>Name of MS from which to get observatory information (optional) </description>
     <value></value>
     </param>

</input>
<returns type="bool"/>
</method>
-->
<!-- ===================================== -->
<!-- ===================================== -->

   <method type="function" name="getOptimumSize">
   <shortdescription>Get Optimum Image size</shortdescription>

<description>
</description>
<input>
     <param type="int" name="size">
     <description>Input size</description>
     <value>100</value>
     </param>

</input>
<returns type="int"/>
</method>
<!-- ===================================== -->

   <method type="function" name="done">
   <shortdescription>Close the tool</shortdescription>

<description>
</description>
<input>

</input>
<returns type="bool"/>
</method>

<!-- ===================================== -->


</tool>

</casaxml>
