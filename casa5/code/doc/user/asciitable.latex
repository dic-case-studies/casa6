%% Documentation on the Reading in and Editing ASCII Tables
\documentclass{article}
\usepackage{heqn,html,makeidx,epsf}
\pagestyle{headings}

\textheight     8.5truein
\textwidth      6truein
\topmargin      0.25truein
\oddsidemargin  0.25truein
\evensidemargin 0.25truein

%
% define hyperlink URLs:
%

\newcommand{\thisdocURL}{http://aips2.nrao.edu/aips++/docs/user/asciitable/asciitable.html}
\newcommand{\snythesisURL}{../../user/synthesis/sythesis.html}
\newcommand{\aipsviewURL}{../../user/aipsview/aipsview.html}
\newcommand{\gsURL}{../gettingstarted/gettingstarted.html}
\newcommand{\tableURL}{../../aips/implement/Tables.html}
\newcommand{\designURL}{../../notes/189.ps.gz}
\newcommand{\msdefinitionURL}{../../notes/191.ps.gz}
\newcommand{\briggsURL}{http://www.aoc.nrao.edu/ftp/dissertations/dbriggs/diss.html}
\newcommand{\glossaryURL}{/../docs/glossary/glossary.html}
\newcommand{\tableselectURL}{../../aips/implement/Tables.html\#Tables:select and sort}
\newcommand{\userrefmanualURL}{../docs/user/Refman/Refman.html}

%
% URLS to Help system
%
%\externallabels{../Refman}{../Refman/labels.pl}
%
% Add home page navigation button -- edit the URL!
%
%\htmladdtonavigation{\htmladdnormallink
%  {\htmladdimg{../../gif/home.gif}}{{../../html/aips++.html}}}

\makeindex

\begin{document}

%
%  Page formatting for Postscript output
%
\parindent0pt
\parskip2.5ex plus 0.5ex minus 0.5ex

\title{A Guide to Reading and Editing ASCII Tables in AIPS++}
\author{Doug Roberts\\
National Center for Supercomputing Applications\\
University of Illinois\\
405 N. Mathews Ave.\\
Urbana, IL 61801, USA\\
droberts@lai.ncsa.uiuc.edu}
\date{Text last updated: \today\\
{HTML version available at:}\\
\texttt{{\thisdocURL}}}

%
% Title page formatting for latex output.
%
\begin{latexonly}
\markright{A Guide to Reading and Editing ASCII Tables in AIPS++}
\maketitle
\end{latexonly}

%
% Page formatting for HTML output
%
\begin{rawhtml}
<TABLE BORDER=0 CELLPADDING=2 WIDTH="100%"> 
<TR VALIGN=TOP> 
<TD><FONT COLOR="maroon"><H1>A Guide to Reading and Editing in ASCII
Tables in AIPS++</H1></FONT><BR></TD>
<TD>Doug Roberts<BR>
National Center for Supercomputing Applications<BR>
University of Illinois<BR>
405 North Mathews Ave.<BR>
Urbana, IL 61801, USA<BR>
<A HREF="mailto:Doug Roberts <droberts@lai.ncsa.uiuc.edu>">droberts@lai.ncsa.uiuc.edu</A></TD>
</TD>
</TR> 
<TD>whole document as a <A HREF="../asciitable.ps.gz">PostScript
file.</A><BR></TD>
<TD>HTML updated: February 2, 1997</TD> 
</TR> 
</TABLE>
<HR> 
<P><FONT COLOR="red">N.B. This document uses HTML 3 Tables, and
in-line images to display mathematical expressions.  Turn <EM>Image
Loading</EM> <STRONG>ON</STRONG>, and set your font size in the range
12 to 14pt for optimal browsing.</FONT></P>
\end{rawhtml}

\pagenumbering{roman}
\tableofcontents
\pagenumbering{arabic}

\pagebreak

\section{Disclaimer}

\begin{quote}{\bf Warning: AIPS++ is under rapid development so please
be prepared for this document and the software to change at very short
notice.}
\end{quote}

\section{Purpose}

This document is a guide for people wishing to edit tables attached to
files in astronomical data reduction packages, specifically AIPS and
MIRIAD.  It is assumed that the reader is familiar with
\htmladdnormallink{Getting Started in AIPS++}{\gsURL}. If you run
across a word that you don't understand, try consulting the
\htmladdnormallink{AIPS++ Glossary}{\glossaryURL}. For a list of all
packages, functions, and objects in AIPS++, see the
\htmladdnormallink{AIPS++ User Reference Manual}{../../user/Refman/}.

\section{Overview}

All AIPS++ data is stored in tables.  AIPS++ provides a variety of
tools to inspect and manipulate to data stored as tables.  AIPS++
provides flexible mechanisms for reading in a variety of data types
into the AIPS++ table system.  Specifically, one can output data from
MIRIAD or AIPS as an ASCII table, which can then be read into AIPS++
and manipulated.  Once the tables are read into AIPS++, tools can be
used to manipulate tables in a general way, without assumption of the
underlying data contained.  This document briefly describes the AIPS++
table system and then provides a user view of how to output tables
from AIPS and MIRIAD into AIPS++ and carry out editing within AIPS++.
Users should be familiar with the use of the package used to initially
to process the data set, ({\em i.e.}, AIPS or MIRIAD).

\begin{itemize}

\item Introduction to AIPS++ table system.
\item Examples.

\begin{itemize}

\item Editing visibility data from AIPS.

\begin{enumerate}

\item Calibrate the data set in AIPS.
\item Write gain table out of AIPS as an ASCII file.
\item Read ASCII gain table into AIPS++.
\item Manipulate the gain table in AIPS++.

\end{enumerate}

\item Editing visibility data from MIRIAD.

\begin{enumerate}

\item Calibrate the data set in MIRIAD.
\item Write gains table out of MIRIAD as an ASCII file.
\item Translate the ASCII file that AIPS has created into one with the
proper format to be read by AIPS++.
\item Read ASCII gains table into AIPS++.
\item Manipulate gain table in AIPS++.

\end{enumerate}

\end{itemize}

\end{itemize}

\section{Introduction to AIPS++ Tables}

\htmladdnormallink{Tables}{\tableURL} are the fundamental storage
mechanism for AIPS++.  AIPS++ tables are extensions to traditional
rectangular, row/column arrangement of data values.  AIPS++ tables are
used in a similar way as FITS binary tables.

\subsection{General Table Editing}

AIPS++ provides mechanisms for the inspection and manipulation of
tables.  The general Glish interface to the AIPS++ table system is
provided in the {\tt table} module.  The {\tt table} module is invoked
from within Glish by typing:

\begin{verbatim}
- include "table.g"
\end{verbatim}

The {\tt table} module contains methods for analyzing AIPS++ data as a
general table.  These methods can be applied to any kind of AIPS++
table.  For example any AIPS++ table can be read into a Glish table
object (in this example, called {\tt t}).  The contents of the table
can then be viewed with a graphical browser, using the {\tt browse}
command:

\begin{verbatim}
- include "table.g"
- t:=table("3C286.MS")
- t.browse()
\end{verbatim}

Also, a summary of the table characteristics can be written to the
AIPS++ message logger, using the {\tt summary} command:

\begin{verbatim}
- t.summary()
\end{verbatim}

Any column can be read into a Glish variable using the {\tt getcol}
command.  For example to read the values of the {\tt SIGMA} column
into an array called {\tt sigma}:

\begin{verbatim}
- sigma:=t.getcol('SIGMA')
\end{verbatim}

Mathematical and logical manipulations can be carried out on the
contents of the table within Glish.  For example, one could multiply
the values of the {\tt SIGMA} column by 2 and store the column back in
the table:

\begin{verbatim}
- sigma:=sigma/2.0
- t.putcol('SIGMA', sigma)
\end{verbatim}

Other more complicated array arithmetic can be carried out on Glish
variables in an analogous manner.  For example, if you wanted to
replace all the weights in your table by (integration time)$^{-0.5}$,
you could do the following:

\begin{verbatim}
- itime:=t.getcol('INT_TIME')
- weight:=sqrt(1/itime)
- t.putcol('WEIGHT', weight)
\end{verbatim}

The array arithmetic is done for determining the {\tt weight} element
by element, one element for each row, and the result stored in the
{\tt WEIGHT} column.

\section{Examples}

\subsection{Editing Tables From AIPS\label{aipsExample}}

In the following example, a gain table associated with a visibility
data set is written out of AIPS and read it into AIPS++ for
inspection and manipulation.

\begin{enumerate}

\item Calibrate the data set in AIPS.
\item Write gain table out of AIPS as an ASCII file.
\item Read ASCII gain table into AIPS++.
\item Manipulate the gain table in AIPS++.

\end{enumerate}

Begin by calibrating the data in AIPS (using the AIPS task {\tt
CALIB}) and obtaining a calibration table (SN or CL).  There are two
tasks in AIPS to write out AIPS tables, {\tt PRTAB} and {\tt TBOUT}.
{\tt PRTAB} outputs a limited number of significant digits and should
{\em not} be used; {\tt TBOUT} allows for the output of double
precision numbers and should be used.  The {\tt DOCRT} verb, which
specifies the maximum width of the column in characters should be set
to something large, such as 10000.  Execute the {\tt TBOUT} task to
create the output ASCII table file and then copy the file into a
directory where you will run AIPS++.  The following is a typical input
to {\tt TBOUT}:

\begin{verbatim}
AIPS 1: TBOUT:  Task to Write AIPS tables to text files.
AIPS 1: Adverbs         Values            Comments
AIPS 1: ----------------------------------------------------------------
AIPS 1: USERID        0                    Image owner ID number
AIPS 1: INNAME     '10/11/96    '          Image name (name)
AIPS 1: INCLASS    'X BAND'                Image name (class)
AIPS 1: INSEQ         1                    Image name (seq. #)
AIPS 1: INDISK        4                    Disk drive #
AIPS 1: INEXT      'SN'                    Extension type
AIPS 1: INVERS        1                    Extension file version #
AIPS 1: OUTFILE    'DR21_SN.ASCII          External text file name.
AIPS 1:
AIPS 1:               '
AIPS 1: DOCRT         1                    Max width of output (char)
AIPS 1: BCOUNT        1                    Begin Table record to Write
AIPS 1: ECOUNT        0                    End Table record to Write
\end{verbatim}

After the {\tt TBOUT} has completed, start up AIPS++ and read the
ASCII table, using the {\tt tablefromascii} function of the table
module.  The {\tt tablefromascii} command takes two arguments: the
output AIPS++ table name and the filename of the input ASCII file.

\begin{verbatim}
% aips++
- include "table.g"
- tablefromascii("DR21_SN", "DR21_SN.ASCII")
\end{verbatim}

\label{aipsEdit}In order to edit the newly-created table, "DR21\_SN"
must be opened as a Glish table object, for example called {\tt
dr21\_sn} ({\em n.b.}, because we are going to edit the table, it is
opened read/write):

\begin{verbatim}
- dr21_sn:=table("DR21_SN", readonly=F)
\end{verbatim}

Assume that antenna 5 has significant fluctuations in its gain and you
want to replace the determined gains with a 5th order polynomial fit
to smooth out the variations.  The table module allows for data to be
read into and out of Glish variables.  The {\tt numerics} module
contains the functionality to carry out numerical operations, such as
polynomial fits ({\tt polyfitter.fit}) as well as evaluation the
resulting fits ({\tt polyfitter.eval}).  The following session shows
how to carry out the procedure described above.

\begin{verbatim}
- tablecommand("select from DR21_SN where ANTENNA == 5 giving DR21_SN_A5")
- dr21_sn_a5:=table("DR21_SN.A5")
- include "numerics.g"
- x:=dr21_sn_a5.getcol("TIME")
- yin:=dr21_sn_a5.getcol("REAL1")
- polyfitter.fit(coeff, coefferrs, chisq, errmsg, x, yin, order=5)
- polyfitter.eval(yout, errmsg, x, coeff)
- ok:=dr21_sn_a5.putcol("REAL1", yout)
- dr21_sn_a5.close()
\end{verbatim}

You can look at the gains as a function of time (both raw data and
polynomial fit) by using the {\tt browse} command.

\subsection{Editing Gains Tables From MIRIAD}

In a manner similar to that of AIPS, gains tables can be written out of
a MIRIAD data set as an ASCII file and read into AIPS++ for
processing.  It this time, the output ASCII table must be translated
into a format that can be read by AIPS++ using a supplied perl script.
The functionality to create the properly formatted ASCII file within
MIRIAD will soon be added.

\begin{enumerate}

\item Calibrate the data set in MIRIAD.
\item Write gains table out of MIRIAD as an ASCII file.
\item Translate the ASCII file that AIPS has created into one with the
proper format to be read by AIPS++.
\item Read ASCII gains table into AIPS++.
\item Manipulate gain table in AIPS++.

\end{enumerate}

As for the case of AIPS, in MIRIAD the data set must be initially
calibrated (using the MIRIAD {\tt selfcal} task) to create a gains
file, attached to the relevant data set.  Then the MIRIAD task {\tt
gplist} should be used to list the gains to an output ASCII file.
Because the ASCII text is directed to the standard output ({\em i.e.},
the terminal), the program will have to be executed from the command
line and the output redirected to a file.  MIRIAD users unfamiliar
with command line execution should consult the
\begin{latexonly}
MIRIAD User Guide
(http://bima.astro.umd.edu/bima/miriad/uguide/uguide\_toc.html)
\end{latexonly}
\begin{rawhtml}
<A
HREF="http://bima.astro.umd.edu/bima/miriad/uguide/uguide_toc.html">MIRIAD
User Guide</A>
\end{rawhtml}
for details.  A typical execution of {\tt gplist} would look like the
following.

\begin{verbatim}
% gplist vis=dr21.vis options=all > dr21_gains.ascii
\end{verbatim}

The ASCII output will then have to be translated into the format
required for the AIPS++ function {\tt tablefromascii}, using the perl
script {\tt transtab.pl}.  This file can be obtained by 
\begin{latexonly}
anonymous ftp from the miriad ftp server at ftp.astro.uiuc.edu, login
as anonymous, cd into pub/miriad, get transtab.pl.
\end{latexonly}
\begin{rawhtml}
<A HREF="ftp://ftp.astro.uiuc.edu/pub/miriad/transtab.pl">clicking
here.</A>.
\end{rawhtml}
You will need to change the permission to allow execution,
({\em i.e.}, {\tt chmod +x transtab.pl}).  Then execute the {\tt
transtab.pl} program with the filename as a single argument.

\begin{verbatim}
% transtab.pl dr21_gains.ascii
\end{verbatim}

An output translated file will be created with the same name as the
input file with the extension {\em .fixed} appended ({\em i.e.}, in
the above example the output name would be {\em
dr21\_gains.ascii.fixed}).  This {\em .fixed} file can be read into
AIPS++ using the {\tt tablefromascii} function of the table module in
the same manner as for an AIPS ASCII table.

\begin{verbatim}
% aips++
- include "table.g"
- tablefromascii("dr21_gains", "dr21_gains.ascii.fixed")
\end{verbatim}

Once the ASCII gains file has been read into an AIPS++ table, Glish
tools can be used to view and edit the table by first opening the
table as a Glish table object, in an identical manner to that of the
AIPS file, see \ref{aipsEdit}, specifying the proper AIPS++ table.
Note, because we are going to edit the table, it must be opened
read/write.

\begin{verbatim}
- dr21_gains:=table("dr21_gains", readonly=F)
\end{verbatim}

First, one can inspect the contents of the table, with the graphical
table browser:

\begin{verbatim}
- dr21_gains.browse()
\end{verbatim}

The same polynomial fitting that was done in the AIPS example could be
done here, but to illustrate the power of the AIPS++ table editing
system, this example will demonstrate how to manually find and replace
a discrepant value with a more reasonable one.  Using the browser
({\em i.e.}, the {\tt browse} function of the {\tt table} module) one
could make look at the values for the amplitude and phase gains as a
function of time.  

If the number of rows is so large that searching through the browser
for discrepant values is slow, a graphical representation can be
displayed; you can click on the column label and select {\tt Plot}
from the menu of options.  For instance, clicking on {\tt AMP\_GAIN}
column and selecting {\tt Plot} starts a plotting window with the
amplitude gain for each row displayed.  In this example, row 19 has an
amplitude of 12 and all other rows have amplitudes of 1.0 $\pm$ 0.1.
The discrepant entry is easily seen in the plot.  By selecting a
region around the high point, the plot automatically zooms to the
region size.  The row number can be determined.  Then within Glish,
the discrepant value in the cell can be replaced with a more
reasonable number.  For example, to replace the high value in this
example with the value of 1.0, one would use the {\tt putcell} table
function.  This function takes three arguments: the column name, the
row number and the new value for that cell:

\begin{verbatim}
- dr21_gains.putcell("AMP_GAIN", 19, 1.0)
\end{verbatim}

Using the combination of graphical browser and the ability to edit the
values of every cell, column, and row in the table, one has fine
control over the contents of the table.  Or as described in the AIPS
example \ref{aipsExample} arithmetic operations (such as polynomial
fitting) can be carried out over a large number of values at once.

\end{document}
