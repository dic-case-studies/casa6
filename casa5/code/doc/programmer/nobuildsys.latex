\documentclass{article}
\usepackage{hyperref}
\begin{document}
\title{Using CASA as a Third Party Library}
\author{Wes Young, NRAO}
\maketitle
\section{Introduction}
In general, the best way to build an application using CASA, is to include it in the
CASA build tree.  That said, it's not particularly hard to build an application that 
uses the CASA libraries outside of the CASA build system.
\section{Prerequisites}
\begin{itemize}
\item First, the CASA libs and include files must be installed.
\item Second, the data repository needs to be installed if using Measures.
\item Third, the build compiler must be the same as the one that built the CASA libs.
\end{itemize}
\section{Compiler Options}
The following compiler flags need to be set
\begin{itemize}
\item -DAIPS\_STDLIB
\item -DAIPS\_LITTLE\_ENDIAN or -DAIPS\_BIG\_ENDIAN
\item -DAIPS\_AUTO\_STL
\item -DAIPS\_NO\_LEA\_MALLOC
\item -DAIPS\_DARWIN or -DAIPS\_LINUX
\item -DMACOSXBUILT
\item -DAIPS\_NO\_TEMPLATE\_SRC
\item -dynamic -pipe
\item -fPIC
\item -Wall
\item -Wno-non-template-friend
\item -Woverloaded-virtual
\item -Wcast-align -Wno-comment
\item -I\$(AIPSROOT)/code/include -I.
\end{itemize}
Typically AIPSROOT can be set to /opt/casa for Mac OSX or /usr/lib/casapy for Linux.
The options are usually assigned in a makefile as follows:
\begin{verbatim}
AIPSROOT=/opt/casa
CPPSTD = -DAIPS_STDLIB  -DAIPS_LITTLE_ENDIAN -DAIPS_AUTO_STL -DAIPS_NO_LEA_MALLOC
CPPSTD += -DAIPS_DARWIN -DMACOSXBUILT -DAIPS_NO_TEMPLATE_SRC
C++STD = -dynamic -pipe -fPIC -Wall -Wno-non-template-friend -Woverloaded-virtual
C++STD += -Wcast-align -Wno-comment
CPPFLAGS = -O2 $(CPPSTD) $(C++STD) -I$(AIPSROOT)/code/include -I.
\end{verbatim}

\section{Linker Options}
There are no special linker options beyond specifying the location and which CASA
libraries.  For example to link an application with measures
specify the following in your makefile.
\begin{verbatim}
LIBDIR = -L$(AIPSROOT)/darwin/lib
LIBS = -lcasa -lscimath -lscimath_f -ltables -lmeasures
\end{verbatim}
On a linux machine, you should also add
\begin{verbatim}
LIBDIR += -Xlinker -rpath -Xlinker $(AIPSROOT)/linux/lib
\end{verbatim}

\section{Example makefile}
The following is a makefile to build a program using the CASA measures lib outside of
the CASA build environment.  Note it is for a Mac OSX Intel machine. To change it to
work with a Linux machine, adjust the AIPSROOT to /usr/lib/casapy and replace darwin
with linux in the LIBDIR line and add the -Xlinker line from above.
\begin{verbatim}
AIPSROOT = /opt/casa
CCC = /usr/bin/g++
LDFLAGS = -g
CPPSTD = -DAIPS_STDLIB  -DAIPS_LITTLE_ENDIAN -DAIPS_AUTO_STL
CPPSTD += -DAIPS_NO_LEA_MALLOC -DAIPS_DARWIN -DMACOSXBUILT -DAIPS_NO_TEMPLATE_SRC
C++STD = -dynamic -pipe -fPIC -Wall -Wno-non-template-friend -Woverloaded-virtual
C++STD += -Wcast-align -Wno-comment
CPPFLAGS = -O2 $(CPPSTD) $(C++STD) -I$(AIPSROOT)/code/include -I.
LIBDIR = -L$(AIPSROOT)/darwin/lib
LIBS = -lcasa -lscimath -lscimath_f -ltables -lmeasures

measex1 : measex1.o
        g++ -o measex1 $(LDFLAGS) measex1.o $(LIBDIR) $(LIBS)   

\end{verbatim}
\section{Simple Example}

The following program grabs the number of leap seconds on a given day.
\begin{verbatim}
#include <casa/aips.h>
#include <casa/OS/Time.h>
#include <casa/BasicSL/String.h>
#include <measures/Measures/MeasTable.h>

using namespace casa;

int main(int argc, char **argv)
{
    Time t0(2007, 3, 1);
    Double MJD0 = 2400000.5;
    Double tJD = t0.julianDay();
    Double tMJD = t0.modifiedJulianDay();
    Double leapSec = MeasTable::dUTC(tMJD);
    cout << "A default date of 2003/03/01 is used (JD " << tJD <<
        ", MJD " << tMJD << ")" << endl;
    cout << "Leap seconds on date is " << leapSec << endl;

    return 0;
}
\end{verbatim}

\section{Runtime Considerations}
CASAPATH will need to be set to make use of the Measures Tables, IERS, IGRTF, etc...
The CASAPATH need only point to the directory which contains the data repository. 
On linux CASAPATH would probably be
\begin{verbatim}
CASAPATH=/usr/lib/casapy
\end{verbatim}
on MacOSX
\begin{verbatim}
CASAPATH=/opt/casa
\end{verbatim}

\end{document}
