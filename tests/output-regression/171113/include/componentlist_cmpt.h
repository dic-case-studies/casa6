#ifndef _COMPONENTLIST_XML_COMPONENTLIST_CMPT_
#define _COMPONENTLIST_XML_COMPONENTLIST_CMPT_
/******************** generated by xml-casa (v2) from componentlist.xml *************
********************* b8b3e74736ff36451fb026d4d97bf7e2 *****************************/

#include <vector>
#include <string>
#include <complex>
#include <stdcasa/record.h>
#include <casaswig_types.h>
#include <casa/Exceptions/Error.h>
#include <componentlist_forward.h>


using namespace std;

namespace casac {

  class  componentlist  {
    public:

      componentlist();
      bool open(const string& _filename=string(""), bool _nomodify=bool(false), bool _log=bool(true));
      int asciitocomponentlist(const string& _filename=string(""), const string& _asciifile=string(""), const string& _refer=string("J2000"), const string& _format=string("ST"), const record& _direction=initialize_record(""""), const record& _spectrum=initialize_record(""""), const record& _flux=initialize_record(""""), bool _log=bool(true));
      bool concatenate(const variant& _list=variant( ), const std::vector<int>& _which=std::vector<int>({-1}), bool _log=bool(true));
      bool fromrecord(const record& _record=initialize_record(""""));
      record* torecord();
      bool remove(const std::vector<int>& _which=std::vector<int>({-1}), bool _log=bool(true));
      bool purge();
      bool recover(bool _log=bool(true));
      int length();
      std::vector<int> indices();
      bool sort(const string& _criteria=string("Flux"), bool _log=bool(true));
      bool isphysical(const std::vector<int>& _which=std::vector<int>({-1}));
      std::vector<double> sample(const variant& _direction=variant( ), const variant& _pixellatsize=variant( ), const variant& _pixellongsize=variant( ), const variant& _frequency=variant( ));
      bool rename(const string& _filename=string(""), bool _log=bool(true));
      bool simulate(int _howmany=int(1), bool _log=bool(true));
      bool addcomponent(const variant& _flux=variant( ), const string& _fluxunit=string("Jy"), const string& _polarization=string("Stokes"), const variant& _dir=variant( ), const string& _shape=string("point"), const variant& _majoraxis=variant( ), const variant& _minoraxis=variant( ), const variant& _positionangle=variant( ), const variant& _freq=variant( ), const string& _spectrumtype=string("constant"), double _index=double(1.0), const std::vector<double>& _optionalparms=std::vector<double>({0.0}), const string& _label=string(""));
      bool close(bool _log=bool(true));
      bool edit(int _which=int(0), bool _log=bool(true));
      bool done();
      bool select(const std::vector<int>& _which=std::vector<int>({}));
      bool deselect(const std::vector<int>& _which=std::vector<int>({}));
      std::vector<int> selected();
      string getlabel(int _which=int(0));
      bool setlabel(int _which=int(0), const string& _value=string(""), bool _log=bool(true));
      std::vector<double> getfluxvalue(int _which=int(0));
      string getfluxunit(int _which=int(0));
      string getfluxpol(int _which=int(0));
      std::vector<double> getfluxerror(int _which=int(0));
      bool setflux(int _which=int(0), const variant& _value=variant( ), const string& _unit=string("Jy"), const string& _polarization=string("Stokes"), const variant& _error=variant( ), bool _log=bool(true));
      bool convertfluxunit(int _which=int(0), const string& _unit=string("Jy"));
      bool convertfluxpol(int _which=int(0), const string& _polarization=string("Stokes"));
      record* getrefdir(int _which=int(0));
      string getrefdirra(int _which=int(0), const string& _unit=string("deg"), int _precision=int(6));
      string getrefdirdec(int _which=int(0), const string& _unit=string("deg"), int _precision=int(6));
      string getrefdirframe(int _which=int(0));
      bool setrefdir(int _which=int(1), const variant& _ra=variant( ), const variant& _dec=variant( ), bool _log=bool(true));
      bool setrefdirframe(int _which=int(0), const string& _frame=string(""), bool _log=bool(true));
      bool convertrefdir(int _which=int(0), const string& _frame=string(""));
      string shapetype(int _which=int(0));
      record* getshape(int _which=int(0));
      bool setshape(int _which=int(0), const string& _type=string("Point"), const variant& _majoraxis=variant( ), const variant& _minoraxis=variant( ), const variant& _positionangle=variant( ), const variant& _majoraxiserror=variant( ), const variant& _minoraxiserror=variant( ), const variant& _positionangleerror=variant( ), const std::vector<double>& _optionalparms=std::vector<double>({0.0}), bool _log=bool(true));
      bool convertshape(int _which=int(0), const string& _majoraxis=string("arcmin"), const string& _minoraxis=string("arcmin"), const string& _positionangle=string("deg"));
      string spectrumtype(int _which=int(0));
      record* getspectrum(int _which=int(0));
      bool setstokesspectrum(int _which=int(0), const string& _type=string("spectral index"), const std::vector<double>& _index=std::vector<double>({0.0}), const std::vector<double>& _tabularfreqs=std::vector<double>({1.0e11}), const std::vector<double>& _tabulari=std::vector<double>({1.0}), const std::vector<double>& _tabularq=std::vector<double>({0.0}), const std::vector<double>& _tabularu=std::vector<double>({0.0}), const std::vector<double>& _tabularv=std::vector<double>({0.0}), const variant& _reffreq=variant( ), const string& _frame=string("LSRK"));
      bool setspectrum(int _which=int(0), const string& _type=string("spectral index"), double _index=double(0.0), const std::vector<double>& _tabularfreqs=std::vector<double>({1.0e11}), const std::vector<double>& _tabularflux=std::vector<double>({1.0}), const string& _tabularframe=string("LSRK"));
      record* getfreq(int _which=int(0));
      double getfreqvalue(int _which=int(0));
      string getfrequnit(int _which=int(0));
      string getfreqframe(int _which=int(0));
      bool setfreq(int _which=int(0), double _value=double(0.0), const string& _unit=string("GHz"), bool _log=bool(true));
      bool setfreqframe(int _which=int(0), const string& _frame=string("LSRK"), bool _log=bool(true));
      bool convertfrequnit(int _which=int(0), const string& _unit=string("GHz"));
      record* getcomponent(int _which=int(0), bool _iknow=bool(false));
      bool add(const record& _thecomponent=initialize_record(""""), bool _iknow=bool(true));
      bool replace(int _which=int(0), const record& _list=initialize_record(""""), const std::vector<int>& _whichones=std::vector<int>({-1}));
      bool summarize(int _which=int(-1));
      bool iscomponentlist(const variant& _tool=variant( ));

        ~componentlist( );

    private:

#include <componentlist_private.h>


      // --- declarations of static parameter defaults ---
    public:

  };

}

#endif
