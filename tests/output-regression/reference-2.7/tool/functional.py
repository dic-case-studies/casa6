##################### generated by xml-casa (v2) from functional.xml ################
##################### 0f13b59a4d4f695c2b3330fbedc6740d ##############################
from __future__ import absolute_import 
from .__casac__ import functional as _functional
from .platform import str_encode as _str_encode
from .platform import str_decode as _str_decode
from .typecheck import validator as _pc
from .coercetype import coerce as _coerce
_wrap_functional = lambda swig_object: functional(swig_object=swig_object)

class functional:
    ### self
    def __init__(self, *args, **kwargs):
        """Create a {tt functional} tool.
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _functional()

    def f(self, x=float(0)):
        """Calculate the value of the functional.
        """
        schema = {'x': {'type': 'cVariant'}}
        doc = {'x': x}
        assert _pc.validate(doc,schema), str(_pc.errors)
        return self._swigobj.f(_pc.document['x'])

    def ndim(self):
        """Return the number of dimensions.
        """
        return self._swigobj.ndim()

    def done(self):
        """Free the functional's resources.
        """
        return self._swigobj.done()

    def gaussian1d(self, amplitude=float(1), center=float(0), fwhm=float(1)):
        """Create a 1-dimensional Gaussian with the specified amplitude, fwhm, and
        center.
        """
        schema = {'amplitude': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'center': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'fwhm': {'type': 'cFloat', 'coerce': _coerce.to_float}}
        doc = {'amplitude': amplitude, 'center': center, 'fwhm': fwhm}
        assert _pc.validate(doc,schema), str(_pc.errors)
        return _wrap_functional(swig_object=self._swigobj.gaussian1d(_pc.document['amplitude'], _pc.document['center'], _pc.document['fwhm']))

    def gaussian2d(self, amplitude=float(1), center=[ float(-1) ], fwhm=[ float(-1) ], pa=[ ]):
        """Create a 2-dimensional Gaussian with the specified amplitude, fwhms, and
        center. The created functional has method {em f}  to
        calculate the function value at a series of {em x, y} values, or the
        value.
        """
        schema = {'amplitude': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'center': {'type': 'cFloatVec', 'coerce': _coerce.to_floatvec}, 'fwhm': {'type': 'cFloatVec', 'coerce': _coerce.to_floatvec}, 'pa': {'type': 'cVariant'}}
        doc = {'amplitude': amplitude, 'center': center, 'fwhm': fwhm, 'pa': pa}
        assert _pc.validate(doc,schema), str(_pc.errors)
        return _wrap_functional(swig_object=self._swigobj.gaussian2d(_pc.document['amplitude'], _pc.document['center'], _pc.document['fwhm'], _pc.document['pa']))

    def polynomial(self, coefficients=[ float(0) ]):
        """Create a 1-dimensional polynomial function with the specified coefficents.
        """
        schema = {'coefficients': {'type': 'cFloatVec', 'coerce': _coerce.to_floatvec}}
        doc = {'coefficients': coefficients}
        assert _pc.validate(doc,schema), str(_pc.errors)
        return _wrap_functional(swig_object=self._swigobj.polynomial(_pc.document['coefficients']))

    def powerlogpoly(self, coefficients=[ float(0) ]):
        """Create a 1-dimensional power log polynomial function with the specified coefficents.
        """
        schema = {'coefficients': {'type': 'cFloatVec', 'coerce': _coerce.to_floatvec}}
        doc = {'coefficients': coefficients}
        assert _pc.validate(doc,schema), str(_pc.errors)
        return _wrap_functional(swig_object=self._swigobj.powerlogpoly(_pc.document['coefficients']))

