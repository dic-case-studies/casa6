<casaxml xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/tools/xml/casa.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://casa.nrao.edu/schema/psetTypes.html">



<tool module="utils" name="utils">

<code>
	<include>utils_forward.h</include>
<private>
	<include>utils_private.h</include>
</private>

</code>
<shortdescription>Utility component, verified, xml translator</shortdescription>

<description/>


<method name="utils" type="constructor">

  <shortdescription>Construct a utility tool</shortdescription>

  <description/>

  <input/>

  <returns type="utils"/>

  <example/>

</method>

<method name="getrc" type="function">
     <input>
        <param name="rcvar" type="string">
           <description>Returns the value of the rc variable given.
              If no value is give it returns the root directory of CASA.</description>
           <value/>
        </param>
     </input>
     <returns type="string">
	<description>The value of the aipsrc/casarc variable</description>
     </returns>
</method>
<method name="removetable" type="function">
     <input>
        <param name="tablenames" type="stringVec">
           <description>Removes tables safely</description>
           <value/>
        </param>
     </input>
     <returns type="bool"/>
</method>

<method name="tableinfo" type="function">
  <shortdescription>Get information about a particular table</shortdescription>
  <description>
    Currently this only returns the pid of the process locking the table (lockpid), if the lock
    is permanent (lockperm), and the status (lockstatus) -- 'not in use', 'open', 'read', 'write',
    or 'unknown'. However, the hope is that this will eventually return a complete description of
    the table.
  </description>
  <input>
    <param name="tablename" type="string">
      <description>path to table</description>
      <value/>
    </param>
  </input>
  <returns type="record"/>
  <example/>
</method>

<method name="lockedtables" type="function">
  <shortdescription>get the tables locked by this process</shortdescription>
  <description/>
  <input/>
  <returns type="stringVec"/>
  <example/>
</method>


<method name="hostinfo" type="function">

	<shortdescription>returns host information</shortdescription>

  <description/>

  <input/>

  <returns type="record"/>
  <example/>

</method>

<method name="c_exception" type="function">

	<shortdescription>Returns detailed information about last C-level exception</shortdescription>

  <description>Returns detailed information from the last CASA C++ exception (i.e., AipsError).  The
               exception message and the stack trace (mangled; use the shell's c++filt to demangle)
               from the last CASA C++ exception.  The information is from the last one generated
               and may not represent an exception from the last action; c\_exception\_clear can be
               used to remove stale information.  The information's exception might also
               have been caught in the C++ code and not have been translated into a Python-level
               exception.
  </description>

  <input/>

  <returns type="string">
            <description>Error message and stack trace</description>
  </returns>

  <example/>

</method>

<method name="c_exception_clear" type="function">

	<shortdescription>Clears information about last C-level exception</shortdescription>

  <description>Clears the CASA C++ exception information.  This allows the user to be sure that
               information retrieved using c\_exception is not from an exception in the
               distant past.
  </description>

  <input/>

  <returns/>

  <example/>

</method>

<method name="_crash_reporter_initialize" type="function">

	<shortdescription>Initializes the crash reporter.</shortdescription>

  <description>
    Initializes the crash reporter which will generate a crash report if casapy
    crashes.  For reporter purposes a crash is the reception of an signal by
    casapy which would normally result in the program being terminated.  This includes
    segfaults, aborts, etc., plus any unhandled C++ exceptions (C++ generates an
    abort signal for unhandled exceptions).  This method is intended for use by the
    casapy infrastructure and should not be called by other code or by users; however,
    the call will only install the crash reporter the first time it is called so any
    subsequent calls should be no-ops.  Returns true if initialization occurred and
    false if the crash reporter was stubbed out (i.e., symbol UseCrashReporter was
    not defined).
  </description>

  <input>
    <param name="crashDumpDirectory" type="string">
	    <description>Directory to write crash dumps into.</description>
    </param>
    <param name="crashDumpPosterApplication" type="string">
	    <description>Application to post crash dumps to http server.</description>
    </param>
    <param name="crashPostingUrl" type="string">
	    <description>URL to use when posting crash report.</description>
    </param>
    <param name="logFile" type="string">
	    <description>Full name of initial logfile</description>
    </param>

  </input>

  <returns type="string"/>

  <example/>

</method>

<method name="_trigger_segfault" type="function">

	<shortdescription>Crashes casa with segfault.</shortdescription>

  <description>
    This triggers a segfault for testing the crash reporter.  Obviously you
    shouldn't call this unless that's what you want.  It's in here for
    development/debugging purposes and ought to be removed before you see this.
  </description>

  <input>
    <param name="faultType" type="int">
	    <description>How to kill the program</description>
	    <value>0</value>
    </param>
  </input>


  <returns type="bool"/>

  <example/>

</method>


<method name="tryit" type="function">
<description>
test variant convesion
</description>
<input>
  <param name="input" type="record">
    <description>testing variant</description>
  </param>
</input>
<returns type="double"/>
</method>

<method name="maxint" type="function">
    <description>maximum number an C++ int can hold</description>
    <returns type="int"/>
</method>
<method name="minint" type="function">
    <description>minimum number an C++ int can hold</description>
    <returns type="int"/>
</method>
<method name="maxlong" type="function">
    <description>maximum number an C++ long can hold</description>
    <returns type="int"/>
</method>
<method name="minlong" type="function">
    <description>minimum number an C++ long can hold</description>
    <returns type="int"/>
</method>

<method name="initialize" type="function">
<shortdescription>initialize CASAtools</shortdescription>

<description>
returns true if initalization was performed; returns false if initialization was already done
</description>

<input>
  <param name="python_path" type="string">
	<description>path to python executable</description>
  </param>
</input>

<input>
  <param name="distro_data_path" type="string">
	<description>path to the data provided by the casadata pkg</description>
  </param>
</input>

<input>
  <param name="default_path" type="stringVec">
	<description>directories that should constitute the default data path</description>
  </param>
</input>

<returns type="bool"/>
</method>


<method name="rundata" type="function">
  <description>path to the measures data</description>
  <shortdescription>path to the measures data</shortdescription>
  <returns type="string"/>
</method>

<method name="setrundata" type="function">
<description>
Set path to the measures data. Must be called during initalization
before Measures module is initialized.
</description>
  <shortdescription>set path to the measures data</shortdescription>
  <input>
    <param name="path" type="string">
      <description>path to IERS data</description>
      <value/>
    </param>
  </input>
  <returns/>
</method>


<method name="defaultpath" type="function">
<shortdescription>returns the default data path</shortdescription>

<description>
Returns the default data path. This path is used unless the user has set the current path to something else using the setpath function.
</description>

<returns type="stringVec"/>
</method>

<method name="setpath" type="function">
<shortdescription>sets the data path to the specified list of directories</shortdescription>

<description>
Sets the data path to the specified list of directories. Returns true if all directories were added
returns false otherwise.
</description>

<input>
  <param name="dirs" type="stringVec">
	<description>directories that should constitute the data path</description>
	<value/>
  </param>
</input>

<returns type="bool"/>
</method>

<method name="getpath" type="function">
<shortdescription>retrieves the data path</shortdescription>

<description>
Returns the list of directories that are currently in the data path.
</description>

<returns type="stringVec"/>
</method>

<method name="clearpath" type="function">
<shortdescription>removes all directories from the data path</shortdescription>

<description>
Removes all directories from the data path.
</description>

<returns/>
</method>

<method name="resolve" type="function">
<shortdescription>resolve a complete path from a subdirectory using the data path</shortdescription>

<description>
If the provided path already represents a file or a directory, it is returned. If it does not,
this function tries to find a complete path by matching up this partial directory with the
elements of the data path.
</description>

<input>
  <param name="path" type="string">
	<description>path to be expanded</description>
	<value/>
  </param>
</input>

<returns type="string"/>
</method>





<method name="registry" type="function">
<shortdescription>retrieve registry information</shortdescription>

<description>
returns record containing the URI for the CASAtools registry which can be used by other unix processes to access the registry
</description>

<returns type="record"/>
</method>

<method name="services" type="function">
<shortdescription>retrieve registered services</shortdescription>

<description>
returns record containing the information about the services that have been registered with CASAtools
</description>

<returns type="record"/>
</method>

<method name="shutdown" type="function">
<shortdescription>shutdown signal from python</shortdescription>

<description>
python is shutting down cleanup anything that is outstanding
</description>

<returns/>
</method>





<method name="getpython" type="function">
<shortdescription>get path to python executable</shortdescription>
<returns type="string"/>
</method>



<method name="version" type="function">
<shortdescription>returns four element vector for the version</shortdescription>

<returns type="intVec"/>
<description>

Returns a four element vector representing the version (major, minor, patch and feature).

</description>
</method>

<method name="version_variant" type="function">
<shortdescription>returns the target instrument f.e. ALMA or VLA</shortdescription>
<returns type="string"/>
<description>

Returns the target instrument. This helps distinguish versions that otherwise may have the same version number

</description>
</method>

<method name="version_desc" type="function">
<shortdescription>returns the descriptive version string, e.g. DEV or REL</shortdescription>

<returns type="string"/>
<description>

The descriptive string describes a particular packaged version. During a development
cycle there are different sorts of packaged distributions. For example, a development
version (&quot;DEV&quot;) or a release version (&quot;REL&quot;).

</description>
</method>

<method name="version_info" type="function">
<shortdescription>Returns the complete version description as a string.</shortdescription>

<returns type="string"/>
<description>

Returns a description string that includes the version information and the descriptive string..

</description>
</method>

<method name="version_string" type="function">
<shortdescription>Returns the complete version description as a string but without the description (i.e. git hash) string.</shortdescription>

<returns type="string"/>
<description>

Returns a description string that includes the version information and the descriptive string..

</description>
</method>

<method name="compare_version" type="function">
<shortdescription>Returns the complete version description as a string.</shortdescription>

<input>
    <param name="comparitor" type="string">
	    <description>what sort of comparison to do, one of &gt;, &lt;, &lt;=, &gt;=, ==, = !=</description>
    </param>
    <param name="vec" type="intVec">
	    <description>vector to use to compare current version number against vec</description>
    </param>
</input>

<returns type="bool"/>
<description>

Returns a description string that includes the version information and the descriptive string..

</description>
</method>

<method name="toolversion" type="function">
<shortdescription>returns two element vector containing CASA 6 tool version number</shortdescription>

<returns type="intVec"/>
<description>

Returns a two element vector representing the CASAtools version (year, build). This is only
returned with CASA 6. With CASA 5, an zero element vector is returned.

</description>
</method>

<method name="toolversion_string" type="function">
<shortdescription>Returns the complete CASA 6 CASAtools version description as a string</shortdescription>

<returns type="string"/>
<description>

Returns a description string that shows the CASA 6 CASAtools version information as a descriptive string.
With CASA 5, a zero length string is returned.

</description>
</method>

</tool>

</casaxml>
