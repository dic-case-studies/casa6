
/***
 * Framework independent header file for table...
 *
 * Implement the table component here.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 ***/

#ifndef _table_cpnt__h__
#define _table_cpnt__H__

#include <vector>

#include <xmlcasa/record.h>

// put includes here

namespace casac {

/**
 * table component class 
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 **/
class table
{
  private:

	

  public:

    table();
    virtual ~table();

    bool flush();

    bool resync();

    bool close();

    bool copy(const std::string& newtablename, const bool deep, const bool valuecopy, const ::casac::record& dminfo, const std::string& endian = "aipsrc", const bool memorytable = false, const bool returnobject = false);

    bool copyrows(const std::string& outtable, const int startrowin = 1, const int startrowout = -1, const int nrow = -1);

    bool done();

    bool iswritable();

    std::string endianformat();

    bool lock(const bool write = true, const int nattempts = 0);

    bool unlock();

    bool datachanged();

    bool haslock(const bool write = true);

    ::casac::record* lockoptions();

    bool ismultiused(const bool checksubtables = false);

    bool browse();

    std::string name();

    bool toascii(const std::string& asciifile, const std::string& headerfile = "", const std::vector<std::string>& columns = std::vector<std::string> (1,""), const std::string& sep = "");

    ::casac::record* query(const std::string& query = "String", const std::string& name = "", const std::string& sortlist = "", const std::string& columns = "");

    WX::Utils::SmartPtr<WX::Utils::Value> calc(const std::string& expr);

    ::casac::record* selectrows(const std::vector<int>& rownrs, const std::string& name = "");

    bool putinfo(const ::casac::record& value);

    bool addreadmeline(const std::string& value);

    bool summary(const bool recurse = false);

    casac::StringVec colnames();

    casac::IntVec rownumbers(const ::casac::record& tab, const int nbytes);

    bool setmaxcachesize(const std::string& columnname, const int nbytes);

    bool isscalarcol(const std::string& columnname);

    bool isvarcol(const std::string& columnname);

    std::string coldatatype(const std::string& columnname);

    std::string colarraytype(const std::string& columnname);

    int ncols();

    int nrows();

    bool addrows(const int nrow = 1);

    bool removerows(const std::vector<int>& rownrs);

    bool addcols(const std::string& desc, const ::casac::record& dminfo);

    bool renamecol(const std::string& oldname, const std::string& newname);

    bool removecols(const std::vector<std::string>& columnames);

    bool iscelldefined(const std::string& columnname, const int rownr = 0);

    ::casac::record* getcell(const std::string& columnname, const int rownr = 1);

    ::casac::record* getcellslice(const std::string& columnname, const int rownr, const std::vector<int>& blc, const std::vector<int>& trc, const std::vector<int>& incr = std::vector<int> (1,1));

    ::casac::record* getcol(const std::string& columnname, const int startrow = 1, const int nrow = -1, const int rowincr = 1);

    ::casac::record* getvarcol(const std::string& columnname, const int startrow = 1, const int nrow = -1, const int rowincr = 1);

    ::casac::record* getcolslice(const std::string& columnname, const std::vector<int>& blc, const std::vector<int>& trc, const std::vector<int>& incr, const int startrow = 1, const int nrow = -1, const int rowincr = 1);

    bool putcell(const std::string& columnname, const std::vector<int>& rownr, const ::casac::record& thevalue);

    bool putcellslice(const std::string& columnname, const int rownr, const ::casac::record& value, const std::vector<int>& blc, const std::vector<int>& trc, const std::vector<int>& incr = std::vector<int> (1,1));

    bool putcol(const std::string& columnname, const ::casac::record& value, const int startrow = 1, const int nrow = -1, const int rowincr = 1);

    bool putvarcol(const std::string& columnname, const ::casac::record& value, const int startrow = 1, const int nrow = -1, const int rowincr = 1);

    bool putcolslice(const std::string& columnname, const ::casac::record& value, const std::vector<int>& blc, const std::vector<int>& trc, const std::vector<int>& incr = std::vector<int> (1,1), const int startrow = 1, const int nrow = -1, const int rowincr = 1);

    casac::StringVec getcolshapestring(const std::string& columnname, const int startrow = 1, const int nrow = -1, const int rowincr = 1);

    ::casac::record* getkeyword(const ::casac::record& keyword);

    ::casac::record* getkeywords();

    ::casac::record* getcolkeyword(const std::string& columnname, const ::casac::record& keyword);

    ::casac::record* getcolkeywords(const std::string& columnname);

    bool putkeyword(const ::casac::record& keyword, const ::casac::record& value, const bool makesubrecord = false);

    bool putkeywords(const ::casac::record& value);

    bool putcolkeyword(const std::string& columnname, const ::casac::record& keyword, const ::casac::record& value);

    bool putcolkeywords(const std::string& columnname, const ::casac::record& value);

    bool removekeyword(const ::casac::record& keyword);

    bool removecolkeyword(const std::string& columnname, const ::casac::record& keyword);

    ::casac::record* getdminfo();

    casac::StringVec keywordnames();

    casac::StringVec fieldnames(const std::string& keyword = "");

    casac::StringVec colkeywordnames(const std::string& columnname);

    casac::StringVec colfieldnames(const std::string& columnname, const std::string& keyword = "");

    ::casac::record* getdesc(const bool actual = true);

    ::casac::record* getcoldesc(const std::string& columnname);

    bool ok();

};

} // casac namespace
#endif

