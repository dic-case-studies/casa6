<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/tools/xml/casa.xsd">


<tool name="logsink" module="logsink">
<code>
<include>tools/casa/logsink_forward.h</include>
<private>
	<include>tools/casa/logsink_private.h</include>
</private>
</code>

<shortdescription>tool for logsink</shortdescription>

<description></description>

<method type="constructor" name="logsink">
  <shortdescription>Construct a logsink tool</shortdescription>
  <description></description>
  <input>
    <param type="string"  name="filename">
      <description>logfile name</description>
      <value>casa.log</value>
    </param>
	<param type="bool"  name="enable_telemetry">
      <description>Allow telemetry data to be written.</description>
      <value>false</value>
    </param>
	<param type="string"  name="telemetry_logfile">
      <description>Logfile for telemetry data.</description>
      <value>false</value>
    </param>
  </input>
  <example></example>
</method>

<method type="function" name="origin">
	<shortdescription>Set the origin of the message</shortdescription>
	<description>Sets the origin of messages to be displayed</description>
	<input>
		<param type="string" name="fromwhere" direction="in">
			<description> The origin of a log messages</description>
		</param>
	</input>
  <returns type="bool"/>
</method>

<method type="function" name="processorOrigin">
	<shortdescription>Set the CASA processor origin</shortdescription>
	<description>Sets the CASA processor origin which is shown at the end of each log origin</description>
	<input>
		<param type="string" name="fromwhere" direction="in">
			<description>Input CASA processor origin name</description>
		</param>
	</input>
  <returns type="bool"/>
</method>

<method type="function" name="filter">
	<shortdescription>Set the filter level</shortdescription>
	<description>Set the filter level of logging messages to be displayed.
	This will determine what log messages go into the log file. The logger itself
        can adjust what gets displayed so you could set INFO5 and then filter in the
        logger everything above INFO1.</description>
	<input>
		<param type="string" direction="in" name="level">
			<description> Level of messages to display to the console/log file</description>
			<value>ERROR</value>
			<value>WARN</value>
			<value>INFO</value>
			<value>INFO1</value>
			<value>INFO2</value>
			<value>INFO3</value>
			<value>INFO4</value>
			<value>INFO5</value>
			<value>DEBUG</value>
			<value>DEBUG1</value>
			<value>DEBUG2</value>
			<choice>INFO</choice>
		</param>
	</input>

  <returns type="bool"/>
</method>

<method type="function" name="filterMsg">
	<shortdescription>Add messages to the filter out list</shortdescription>
	<description>Add messages to the filter out list</description>
	<input>
     	<param type="stringArray" name="msgList">
     		<description>Array of strings identifying messages to filter out</description>
     		<value></value>
     	</param>
	</input>
  	<returns type="void"/>
</method>

<method type="function" name="clearFilterMsgList">
	<shortdescription>Clear list of messages to be filter out</shortdescription>
	<description>Clear list of messages to be filter out</description>
  	<returns type="void"/>
</method>

<method type="function" direction="in" name="post">
  <shortdescription>Post a message</shortdescription>
  <description>If the message passes the filter, write it (same as postLocally)</description>
  <input>
    <param type="string" direction="in" name="message">
    <description>Message to be posted</description>
    </param>
    <param type="string" direction="in" name="priority">
    <description>Priority of message to be posted</description>
    <value>INFO</value>
    </param>
    <param type="string" direction="in" name="origin">
    <description>Origin of message to be posted</description>
    <value></value>
    </param>
  </input>
  <returns type="bool"/>
</method>

  <method type="function" direction="in" name="poststat">
    <shortdescription>Post a message</shortdescription>
    <description>Write telemetry data</description>
    <input>
      <param type="string" direction="in" name="message">
      <description>Message to be posted</description>
      </param>
      <param type="string" direction="in" name="origin">
      <description>Origin of message to be posted</description>
      <value></value>
      </param>
    </input>

  <returns type="bool"/>
</method>
<method type="function" name="postLocally">

  <shortdescription>Post locally</shortdescription>

  <description>If the message passes the filter, write it</description>

  <input>
    <param type="string" direction="in" name="message">
    <description>Message to be posted</description>
    </param>
    <param type="string" direction="in" name="priority">
    <description>Priority of message to be posted</description>
    <value>INFO</value>
    </param>
    <param type="string" direction="in" name="origin">
    <description>Origin of message to be posted</description>
    <value></value>
    </param>
  </input>

  <returns type="bool"/>

  <example></example>

</method>

<method type="function" name="localId">
  <shortdescription>Get local ID</shortdescription>
  <description>Returns the id for this class</description>
  <input>
  </input>
  <returns type="string"/>
  <example></example>
</method>

<method type="function" name="version">
	<shortdescription>version of CASA</shortdescription>
	<description>Returns the version of CASA as well as sending it to the log</description>
  <input>
  </input>
  <returns type="string"/>
  <example>casalog.version()</example>
</method>

<method type="function" name="getstatslogfile">
	<shortdescription>String representation of statistics logfile path </shortdescription>
	<description>String representation of statistics logfile path</description>
  <input>
  </input>
  <returns type="string"/>
  <example>casalog.getstatslogfile()</example>
</method>

<method type="function" name="id">

  <shortdescription>Get ID</shortdescription>

  <description>Returns the ID of the LogSink in use</description>

  <input>

  </input>

  <returns type="string"/>

  <example></example>

</method>
<method type="function" name="setglobal">
	<shortdescription>Set this logger to be the global logger</shortdescription>
	<input>
		<param type="bool" name="isglobal">
			<description>Use as global logger</description>
			<value>true</value>
	        </param>
        </input>
	<returns type="bool"/>
</method>
<method type="function" name="setlogfile">
	<shortdescription>Set the name of file for logger output</shortdescription>
	<input>
		<param type="string" direction="in" name="filename">
			<description>filename for logger</description>
			<value>casapy.log</value>
	        </param>
        </input>
	<returns type="bool"/>
</method>
<method type="function" name="setstatslogfile">
	<shortdescription>Set the name of file for logger output</shortdescription>
	<input>
		<param type="string" direction="in" name="filename">
			<description>filename for logger</description>
			<value>casapy.log</value>
	        </param>
        </input>
	<returns type="bool"/>
</method>
<method type="function" name="showconsole">
	<shortdescription>Choose to send messages to the console/terminal</shortdescription>
	<input>
		<param type="bool" name="onconsole">
			<description>All messages to the console as well as log file</description>
			<value>false</value>
	        </param>
        </input>
	<returns type="bool"/>
</method>
<method type="function" name="logfile">
  <shortdescription>Returns the full path of the log file</shortdescription>
  <description>Returns the full path of the log file</description>
  <input/>
  <returns type="string"/>
  <example>logfile = casalog.logfile()</example>

</method>

<method type="function" name="ompNumThreadsTest">
  <shortdescription>Determines the number of OpenMP threads in the current parallel region using an OpenMP reduction pragma</shortdescription>
  <input/>
  <returns type="int"/>
  <example>omp_num_thread = casalog.ompNumThreadsTest()</example>
</method>

<method type="function" name="ompGetNumThreads">
  <shortdescription>Returns the number of OpenMP threads in the current parallel region</shortdescription>
  <returns type="int"/>
  <example>omp_num_thread = casalog.ompNumThreadsTest()</example>
</method>

<method type="function" name="ompSetNumThreads">
  <shortdescription>Specifies the number of OpenMP threads used by default in subsequent parallel regions</shortdescription>
  <input>
  	<param type="int" direction="in" name="numThreads">
  		<value>1</value>
  	</param>
  </input>
  <returns type="bool"/>
  <example>casalog.ompSetNumThreads(2)</example>
</method>

<method type="function" name="setMemoryTotal">
  <shortdescription>Sets the memory total value to be returned by HostInfo</shortdescription>
  <input>
  	<param type="int" direction="in" name="memory">
  		<value>0</value>
  	</param>
  </input>
  <returns type="int"/>
  <example>casalog.setMemoryTotal(4*1024)</example>
</method>

<method type="function" name="setMemoryFraction">
  <shortdescription>Sets the memory fraction value to be returned by HostInfo</shortdescription>
  <input>
  	<param type="int" direction="in" name="memfrac">
  		<value>0</value>
  	</param>
  </input>
  <returns type="int"/>
  <example>casalog.setMemoryFraction(50)</example>
</method>

<method type="function" name="setNumCPUs">
  <shortdescription>Sets the number of CPUs to be returned by HostInfo</shortdescription>
  <input>
  	<param type="int" direction="in" name="cores">
  		<value>0</value>
  	</param>
  </input>
  <returns type="int"/>
  <example>casalog.setNumCPUs(4)</example>
</method>

<method type="function" name="getMemoryTotal">
  <shortdescription>Returns the memory total value from HostInfo</shortdescription>
  <input>
  	<param type="bool" direction="in" name="use_aipsrc">
  		<value>true</value>
  	</param>
  </input>
  <returns type="int"/>
  <example>casalog.getMemoryTotal(true)</example>
</method>

<method type="function" name="getNumCPUs">
  <shortdescription>Returns the number of CPUs from HostInfo</shortdescription>
  <input>
  	<param type="bool" direction="in" name="use_aipsrc">
  		<value>true</value>
  	</param>
  </input>
  <returns type="int"/>
  <example>casalog.getNumCPUs(true)</example>
</method>

</tool>

</casaxml>
