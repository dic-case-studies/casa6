<casaxml xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/tools/xml/casa.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://casa.nrao.edu/schema/psetTypes.html">


<tool module="agentflagger" name="agentflagger">
<code>
	<include>agentflagger_forward.h</include>
<private>
	<include>agentflagger_private.h</include>
</private>
</code>

        <shortdescription>Tool for manual and automated flagging</shortdescription>
       
<description>
The *agentflagger* tool performs manual as well as automatic synthesis
flagging operations within casapy. The *agentflagger* tool can operate on
one measurement set at a time.

**Open the Measurement Set or Calibration Table and Attach it to the Tool**

The first thing to do is to open the MS or calibration table and attach it to the agentflagger tool.
Use the af.open method, which requires the MS name and optionally the time interval,
over which to buffer data before running the algorithm. The time interval is set by
default to 0.0, which means a 'scan' length. The 'ntime' parameter is important for
the modes tfcrop, rflag and extend. 

    ``af.open('uid_X002.ms')``

**Select the Data**

Once the MS is open, the next step is to select the data. This step will use the MS
selection tool to select the portion of the MS given by the parameters. There are two ways
of selecting the data:

1) Create a Python dictionary which internally will be transformed into a record containing the selection parameters::

    # Select the whole MS.
    af.selectdata()

    Select a portion of the MS using a dictionary.
    myrecord={}
    myrecord['scan']='1~3'
    myrecord['spw']='0:1~10'
    af.selectdata(myrecord)

2) Parse the parameter names directly to the function::

    af.selectdata(scan='1~3', spw='0:1~10')

**Parse the Parameters for the Flagging Mode(s)**

Each flagging mode is called an agent. The available agents are: manual, clip, quack,
shadow, elevation, tfcrop, rflag, extend, unflag and summary. Each one of these agents
may or may not take configuration parameters and data selection parameters. Once the desired
flagging modes are chosen, it is time to give the configuration parameters to the tool. Ommited
parameters will take default values as defined in each agent. There are
two ways of parsing the agent's parameters.

1) Using the general method af.parseagentparameters()::

    Construct a dictionary with the parameters for each agent. Each agent's
    parameters should go to a different 'key' of the dictionary. Example:

    # Create a shadow agent:
    myagents = {}
    myagents['mode'] = 'shadow'
    af.parseagentparameters(myagents)

    # Add a summary agent to the list.
    myagents = {}
    myagents['mode'] = 'summary
    myagents['spwchan'] = True
    af.parseagentparameters(myagents)

    # Add a manual agent to the same internal list of agents.
    myagents = {}
    myagents['mode'] = 'manual'
    myagents['scan'] = '1~3,18~20'
    af.parseagentparameters(myagents)

    # Add a clip agent to flag the zero-value data.
    myagents = {}
    myagents['mode'] = 'clip'
    myagents['clipzeros'] = True
    af.parseagentparameters(myagents)

    # Add another summary agent to the list.
    myagents = {}
    myagents['mode'] = 'summary'
    myagents['spwchan'] = True
    af.parseagentparameters(myagents)

2) The other way to parse agent's parameters is to use the convenience functions. The above example would become::

    # Create a shadow agent:
    af.parseshadowparameters()

    # Add a summary agent to the list.
    af.parsesummaryparameters(spwchan=True)

    # Add a manual agent to the same internal list of agents.
    af.parsemanualparameters(scan='1~3,18~20')

    # Add a clip agent to flag the zero-value data.
    af.parseclipparameters(clipzeros=True)

    # Add another summary agent to the list.
    af.parsesummaryparameters(spwchan=True)

**Initialize the Agents**

The above step create a list of the agents that the tool will use to process the data.
This step will check several parameters and apply constraints. It will set the iteration approach
to COMBINE_SCANS_MAP_ANTENNA_PAIRS_ONLY if the agent is either tfcrop or extend and combinescans
is set to True. Otherwise it will set it to COMPLETE_SCAN_MAP_ANTENNA_PAIRS_ONLY.

If the list contains agents that set ntime more than once, this method will get the maximum value
of ntime and use it for all agents.

If a tfcrop agent is present, this method will create one agent per each polarization available,
if correlation is set to ALL.

In the same way, if an agent tfcrop, rflag or clip is present, the asyncio mechanism will be switched
on.

    ``af.init()``

**Run the tool**

Run the tool to apply or unapply the flags. The run method takes two parameters, writeflags and sequential.
The parameter writeflags controls whether to write the flags or not to the MS. By default it is set to True.
The sequential parameter tells to apply/unapply the flags in parallel or not. By default it is set to True,
which means that the agents will run in sequential.

The run method gathers several reports, depending on wich agents are run. The display and summary agents
produce reports that can be retrieved from calling the run method. The reports are returned via a Python
dictionary.

    ``myreports = af.run(writeflags=True)``
  
The dictionary returned in 'myreports' will contain four reports from the two summary agents that were
added previously. The first report is the normal summary for each selection parameter. The second report
gives the antenna positions for plotting.

**Destroy the tool**

Do not forget to destroy and close the tool at the end.
  
    ``af.done()``

**Rflag specific actions**

Currently the agentflagger does not support the 'calculate' and
'apply' actions directly. These actions are distinguished only by
the flagdata task. When selecting mode='rflag' the agentflagger will
run as 'apply'. The 'calculate' action of the flagdata task can be
emulated by setting the tool parameter 'writeflags' to False as
follows::

    myagents = {}
    myagents['mode'] = 'rflag'
    myagents['writeflags'] = False
    ...
    af.parseagentparameters(myagents)

Or, in a more compact example, with the following parameters the
agentflagger will run as 'apply'. The default value of writeflags
(not given) is True:

    ``af.parseagentparameters({'mode':'rflag', 'extend flags': False})``

But here, by setting writeflags to False, the agentflagger will run
as 'calculate'. That is, it will not flag the MS, but it will
calculate and return the thresholds:

    ``af.parseagentparameters({'mode':'rflag', 'extend flags': False, writeflags=False})``

Note that the writeflags parameter needs to be passed in the set of
parameters that are parsed initially, before running the
agentflagger, for the agentflagger to be able to calculate the RFlag
thresholds and return a dictionary with the values calculated.

</description>


   <method name="agentflagger" type="constructor">
   <shortdescription>Construct a flag tool</shortdescription>
   
<description>
Create a *agentflagger* tool, and initialize some variables.
</description>
<input>

</input>
<returns type="unknown">agentflagger tool</returns>
<example>

af.agentflagger()      

</example>
</method>



   <method name="done" type="function">
   <shortdescription>Destroy the flag tool</shortdescription>
   
<returns type="bool"/>
<example>
af.done()

</example>
</method>



   <method name="open" type="function">
   <shortdescription>Open the MS or a calibration table and attach it to the tool.</shortdescription>

<input>

     <param name="msname" type="string">
     <description>Measurement set or calibration table to be processed. Default:  </description>
     <value/>
     </param>
     <param name="ntime" type="double">
     <description>Time interval. If not given, the default will be used. Default: </description>
     <value>0.0</value>
     </param>
</input>

<example>
af.open(msname,ntime)
</example>
<returns type="bool"/> 
</method>




 
   <method name="selectdata" type="function">
   <shortdescription>Select the data based on the given parameters.
For unspecified parameters, the full data range is assumed.
All data selection parameters follow the MS Selection syntax.
    </shortdescription>

<input>


     <param name="config" type="record"> 
     <description>The record (dictionary) config may be given or not. If it is not given, 
     and no specific parameter is given either, the whole MS will be selected. The record 
     may contain any data selection parameters supported by MS Selection such as:
     </description>     
     <value type="record"/>
     </param>

     <param name="field" type="string">
     <description>Field indices or source names : example : '2,3C48' </description>
     <value/>
     </param>
     
     <param name="spw" type="string">
     <description>Spectral Window Indices or names : example : '1,2' </description>
     <value/>
     </param>
    
     <param name="array" type="string">
     <description>Array Indices or names : example : 'VLAA' </description>
     <value/>
     </param>
    
     <param name="feed" type="string">
     <description>Feed index or name : example : '1,2' (not supported yet) </description>
     <value/>
     </param>
    
     <param name="scan" type="string">
     <description>Scan number : example : '1,2,3' </description>
     <value/>
     </param>   

     <param name="antenna" type="string">
     <description>Baseline number : example : '2,3,4,5' </description>
     <value/>
     </param>
    
     <param name="uvrange" type="string">
     <description>UV-distance range, with a unit : example : '2.0-3000.0 m'</description>
     <value/>
     </param>
    
     <param name="timerange" type="string">
     <description>Time range, as MJDs or date strings : example : 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value/>
     </param>

     <param name="correlation" type="string">
     <description>Correlations/polarizations : example : 'RR,LL,RL,LR,XX,YY,XY,YX,Sol1'</description>
     <value/>
     </param>

     <param name="intent" type="string">
     <description>Scan intent : example : '*CAL*, *BAND*' </description>
     <value/>
     </param>
     
     <param name="observation" type="string">
     <description>Observation Id : example : '2~4' </description>
     <value/>
     </param>


     
</input>
<example>
Select the whole MS
af.selectdata()

Select a portion of the MS
myrecord={}
myrecord['scan']='1~3'
myrecord['spw']='0:1~10'
af.selectdata(myrecord)

Another way to select a portion of the MS
af.selectdata(scan='3~5', spw='0')
</example>

<returns type="bool"/> 
</method>




   <method name="parseagentparameters" type="function">
   <shortdescription>Parse the parameters for the agent (flagging mode).</shortdescription>
   
<description>The specific data selection parameters for the agent (flagging mode)
are parsed. These parameters are the data selection and mode-specific parameters.
See the example below:
</description>

<input>

     <param name="aparams" type="record">
     <description>It takes a record (dictionary) with the specific parameters for the flagging mode. 
     The record may contain any data selection parameters supported by MS Selection, as well as 
     mode-specific parameters such as:
     
     (1) array,feed,scan,field,spw,intent,correlation,antenna,uvrange,observation
     (2) mode (which can be: manual,clip,quack,shadow,elevation,tfcrop,extendflags,unflag or summary)
     .   For flagging mode=clip, the parameters are: expression, datacolumn, clipminmax, etc.
     .   See the documentation of the task flagdata for all the available parameters for each mode.\n
     (3) apply: default is true (true for flagging and false for unflagging)
     
     Example:
     
        myrecord={}
        myrecord['mode']='clip'
        myrecord['scan']='1~3'
        myrecord['clipminmax']=[0.02,0.3]
        myrecord['apply']=True
        af.parseagentparameters(myrecord)
     
     </description>
     </param>
     
</input>
<example>
myrecord={}
myrecord['mode']='clip'
myrecord['scan']='1~3'
myrecord['clipminmax']=[0.02,0.3]
myrecord['apply']=True
af.parseagentparameters(myrecord)
</example>
<returns type="bool"/> 
</method>




   <method name="init" type="function">
   <shortdescription>Initialize the agents</shortdescription>
   
<description>This method will initialize the agents and create a list of agents
with their specific parameters. It takes no parameters.
</description>

<input>
</input>
<example>
af.init()
</example>
<returns type="bool"/> 
</method>



   <method name="run" type="function">
   <shortdescription>Execute a list of flagging agents</shortdescription>
   
<description>
Execute a list of flagging agents and write or not to the MS/cal table. The parameter
writeflags controls whether or not to write to the MS.
</description>
<input>
     <param name="writeflags" type="bool">
     <description>Write flags to MS (default: True)</description>
     <value>true</value>
     </param>

     <param name="sequential" type="bool">
     <description>Run the agents in the order they are inserted in the list or not. Default is True to run in the original order.</description>
     <value>true</value>
     </param>

</input>
<example>
af.run()
</example>
<returns type="record"/>
</method>




    <method name="getflagversionlist" type="function">
   <shortdescription>Print out a list of saved flag_versions.</shortdescription>
<description> 
Print out the list of flag versions in the MS, unless the parameter printflags=False. The list of names is returned.
</description>
<input>
     <param name="printflags" type="bool">
     <description>Print flagversions in logger?</description>
     <value>true</value>
     </param>
</input>
<returns type="stringVec"/>
</method>



   <method name="printflagselection" type="function">
   <shortdescription>Print out a list of current flag selections.
   </shortdescription>
   
<description>
Print out a list of current flag selections.
</description>
<input>
</input>
<returns type="bool"/>
</method>



   <method name="saveflagversion" type="function">
   <shortdescription>Save current flags with a version name.
            </shortdescription>
<description> 
</description>
<input>
     <param name="versionname" type="string">
     <description>Version name </description>
     <value/>
     </param>
     <param name="comment" type="string">
     <description>Comment for this flag table </description>
     <value/>
     </param>
     <param name="merge" type="string">
     <description>merge type </description>
     <value/>
     </param>
</input>
<returns type="bool"/>
</method>




   <method name="restoreflagversion" type="function">
   <shortdescription>Restore flags from a saved flag_version. 
			\n versionname : name of flag version to restore to main table
			\n merge : Type of operation to perform during restoration.
			\n        merge = replace  : replaces the main table flags.
			\n        merge = and   : logical AND with main table flags
			\n        merge = or    : logical OR with main table flags
			\n        Default : replace.
   </shortdescription>
<description> 
</description>
<input>
     <param name="versionname" type="stringVec">
     <description>Version name </description>
     <value/>
     </param>
     <param name="merge" type="string">
     <description>merge type </description>
     <value/>
     </param>
</input>
<returns type="bool"/>
</method>




    <method name="deleteflagversion" type="function">
   <shortdescription>Delete a saved flag_version.</shortdescription>
<description> 
</description>
<input>
     <param name="versionname" type="stringVec">
     <description>Version name </description>
     <value/>
     </param>
</input>
<returns type="bool"/>
</method>



   <method name="parsemanualparameters" type="function">
   <shortdescription>Parse data selection parameters and specific parameters
for the manual mode. Data selection follows the MS Selection syntax.
    </shortdescription>

<input>


     <param name="field" type="string">
     <description>Field indices or source names. Example: '2,3C48' </description>
     <value/>
     </param>
     
     <param name="spw" type="string">
     <description>Spectral Window Indices or names. Example: '1,2' </description>
     <value/>
     </param>
    
     <param name="array" type="string">
     <description>Array Indices or names. Example: 'VLAA' </description>
     <value/>
     </param>
    
     <param name="feed" type="string">
     <description>Feed index or name. Example: '1,2' (not supported yet) </description>
     <value/>
     </param>
    
     <param name="scan" type="string">
     <description>Scan number. Example: '1,2,3' </description>
     <value/>
     </param>   

     <param name="antenna" type="string">
     <description>Baseline number. Example: '2,3,4,5,132' </description>
     <value/>
     </param>
    
     <param name="uvrange" type="string">
     <description>UV-distance range, with a unit. Example: '2.0-3000.0 m'</description>
     <value/>
     </param>
    
     <param name="time" type="string">
     <description>Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value/>
     </param>

     <param name="correlation" type="string">
     <description>Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value/>
     </param>

     <param name="intent" type="string">
     <description>Scan intent. Example: '*CAL*, *BAND*' </description>
     <value/>
     </param>
     
     <param name="observation" type="string">
     <description>Observation Id. Example: '2~4' </description>
     <value/>
     </param>

     <param name="autocorr" type="bool">
     <description>Parameter to flag only auto-correlations. Default: </description>
     <value>false</value>
     </param>
     
     <param name="apply" type="bool">
     <description>Parameter to flag or unflag the data. Default: </description>
     <value>true</value>
     </param>


     
</input>
<example>
af.parsemanualparameters(autocorr=True)
</example>

<returns type="bool"/> 
</method>



   <method name="parseclipparameters" type="function">
   <shortdescription>Parse data selection parameters and specific parameters
for the clip mode. Data selection follows the MS Selection syntax.
    </shortdescription>

<input>


     <param name="field" type="string">
     <description>Field indices or source names. Example: '2,3C48' </description>
     <value/>
     </param>
     
     <param name="spw" type="string">
     <description>Spectral Window Indices or names. Example: '1,2' </description>
     <value/>
     </param>
    
     <param name="array" type="string">
     <description>Array Indices or names. Example: 'VLAA' </description>
     <value/>
     </param>
    
     <param name="feed" type="string">
     <description>Feed index or name. Example: '1,2' (not supported yet) </description>
     <value/>
     </param>
    
     <param name="scan" type="string">
     <description>Scan number. Example: '1,2,3' </description>
     <value/>
     </param>   

     <param name="antenna" type="string">
     <description>Baseline number. Example: '2,3,4,5' </description>
     <value/>
     </param>
    
     <param name="uvrange" type="string">
     <description>UV-distance range, with a unit. Example: '2.0-3000.0 m'</description>
     <value/>
     </param>
    
     <param name="time" type="string">
     <description>Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value/>
     </param>

     <param name="correlation" type="string">
     <description>Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value/>
     </param>

     <param name="intent" type="string">
     <description>Scan intent. Example: '*CAL*, *BAND*' </description>
     <value/>
     </param>
     
     <param name="observation" type="string">
     <description>Observation Id. Example: '2~4' </description>
     <value/>
     </param>
    
     <param name="datacolumn" type="string">
     <description>Data column to use for clipping. Supported columns for cal tables are
                  FPARAM,CPARAM,SNR. Example: 'DATA'. Default:
     </description>
     <value>DATA</value>
     </param>

     <param name="clipminmax" type="doubleVec">
     <description>Range to use for clipping. Example: [100.0,200.0] 
     </description>
     <value type="vector"/>
     </param>
     
     <param name="clipoutside" type="bool">
     <description>Clip points outside this range? [True/False]. Default:
     </description>
     <value>true</value>
     </param>
    
     <param name="channelavg" type="bool">
     <description>Average data over channels before clipping? [True/False]. Default:
     </description>
     <value>false</value>
     </param>
     
     <param name="chanbin" type="variant">
     <description>Width (bin) of input channels to average to form an output channel.</description>
     <type>int</type><type>intVec</type>            
     <value type="int">1</value>
     </param>

     <param name="timeavg" type="bool">
     <description>Average data over time ranges. [True/False]. Default:
     </description>
     <value>false</value>
     </param>

     <param name="timebin" type="string">
     <description>Bin width for time average. Example: '2s' </description>
     <value/>
     </param>
          
     <param name="clipzeros" type="bool">
     <description>Clip zero-value data. [True/False]. Default:
     </description>
     <value>false</value>
     </param>
     
     <param name="apply" type="bool">
     <description>Parameter to flag or unflag data. Default: </description>
     <value>true</value>
     </param>


     
</input>
<example>
The correlation parameter can be used with an operator for the clip mode.
The operator should be written only once and it will affect all the polarizations
given in the string. See the example below:

af.parseclipparameters(clipzeros=True, clipminmax=[0.,4.], correlation='ABS_XX,XY')

or for a calibration table:
af.parseclipparameters(clipzeros=True, clipminmax=[0.,4.], correlation='Sol1')

</example>

<returns type="bool"/> 
</method>



   <method name="parsequackparameters" type="function">
   <shortdescription>Parse data selection parameters and specific parameters
for the quack mode. Data selection follows the MS Selection syntax.
    </shortdescription>

<input>


     <param name="field" type="string">
     <description>Field indices or source names. Example: '2,3C48' </description>
     <value/>
     </param>
     
     <param name="spw" type="string">
     <description>Spectral Window Indices or names. Example: '1,2' </description>
     <value/>
     </param>
    
     <param name="array" type="string">
     <description>Array Indices or names. Example: 'VLAA' </description>
     <value/>
     </param>
    
     <param name="feed" type="string">
     <description>Feed index or name. Example: '1,2' (not supported yet) </description>
     <value/>
     </param>
    
     <param name="scan" type="string">
     <description>Scan number. Example: '1,2,3' </description>
     <value/>
     </param>   

     <param name="antenna" type="string">
     <description>Baseline number. Example: '2,3,4,5' </description>
     <value/>
     </param>
    
     <param name="uvrange" type="string">
     <description>UV-distance range, with a unit. Example: '2.0-3000.0 m'</description>
     <value/>
     </param>
    
     <param name="time" type="string">
     <description>Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value/>
     </param>

     <param name="correlation" type="string">
     <description>Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value/>
     </param>

     <param name="intent" type="string">
     <description>Scan intent. Example: '*CAL*, *BAND*' </description>
     <value/>
     </param>
     
     <param name="observation" type="string">
     <description>Observation Id. Example: '2~4' </description>
     <value/>
     </param>

     <param name="quackmode" type="string">
     <description>Quack mode. Default: </description>
     <value>beg</value>
     </param>

     <param name="quackinterval" type="double">
     <description>Quack length in seconds. Default: </description>
     <value>0.0</value>
     </param>

     <param name="quackincrement" type="bool">
     <description>Increment quack flagging in time taking into account flagged data or not. Default:</description>
     <value>false</value>
     </param>

     <param name="apply" type="bool">
     <description>Parameter to flag or unflag the data. Default: </description>
     <value>true</value>
     </param>


     
</input>
<example>
af.parsequackparameters(scan='1~3', quackmode='beg', quackinterval=1)
</example>

<returns type="bool"/> 
</method>



   <method name="parseelevationparameters" type="function">
   <shortdescription>Parse data selection parameters and specific parameters
for the elevation mode. Data selection follows the MS Selection syntax.
    </shortdescription>

<input>


     <param name="field" type="string">
     <description>Field indices or source names. Example: '2,3C48' </description>
     <value/>
     </param>
     
     <param name="spw" type="string">
     <description>Spectral Window Indices or names. Example: '1,2' </description>
     <value/>
     </param>
    
     <param name="array" type="string">
     <description>Array Indices or names. Example: 'VLAA' </description>
     <value/>
     </param>
    
     <param name="feed" type="string">
     <description>Feed index or name. Example: '1,2' (not supported yet) </description>
     <value/>
     </param>
    
     <param name="scan" type="string">
     <description>Scan number. Example: '1,2,3' </description>
     <value/>
     </param>   

     <param name="antenna" type="string">
     <description>Baseline number. Example: '2,3,4,5' </description>
     <value/>
     </param>
    
     <param name="uvrange" type="string">
     <description>UV-distance range, with a unit. Example: '2.0-3000.0 m'</description>
     <value/>
     </param>
    
     <param name="time" type="string">
     <description>Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value/>
     </param>

     <param name="correlation" type="string">
     <description>Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value/>
     </param>

     <param name="intent" type="string">
     <description>Scan intent. Example: '*CAL*, *BAND*' </description>
     <value/>
     </param>
     
     <param name="observation" type="string">
     <description>Observation Id. Example: '2~4' </description>
     <value/>
     </param>

     <param name="lowerlimit" type="double">
     <description>The limiting elevation in degrees. Data obtained at lower antenna elevations will get flagged. Default: 
     </description>
     <value>0.0</value>
     </param>

     <param name="upperlimit" type="double">
     <description>The limiting elevation in degrees. Data obtained at higher antenna elevations will get flagged. Default:
     </description>
     <value>90.0</value>
     </param>

     <param name="apply" type="bool">
     <description>Parameter to flag or unflag the data. Default: </description>
     <value>true</value>
     </param>


     
</input>
<example>
To unflag, set the apply parameter.
af.parseelevationparameters(upperlimit=50.,lowerlimit=10.0, apply=False)
</example>

<returns type="bool"/> 
</method>



   <method name="parsetfcropparameters" type="function">
   <shortdescription>Parse data selection parameters and specific parameters
for the time and frequency mode. Data selection follows the MS Selection syntax.
    </shortdescription>

<input>


     <param name="field" type="string">
     <description>Field indices or source names. Example: '2,3C48' </description>
     <value/>
     </param>
     
     <param name="spw" type="string">
     <description>Spectral Window Indices or names. Example: '1,2' </description>
     <value/>
     </param>
    
     <param name="array" type="string">
     <description>Array Indices or names. Example: 'VLAA' </description>
     <value/>
     </param>
    
     <param name="feed" type="string">
     <description>Feed index or name. Example: '1,2' (not supported yet) </description>
     <value/>
     </param>
    
     <param name="scan" type="string">
     <description>Scan number. Example: '1,2,3' </description>
     <value/>
     </param>   

     <param name="antenna" type="string">
     <description>Baseline number. Example: '2,3,4,5' </description>
     <value/>
     </param>
    
     <param name="uvrange" type="string">
     <description>UV-distance range, with a unit. Example: '2.0-3000.0 m'</description>
     <value/>
     </param>
    
     <param name="time" type="string">
     <description>Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value/>
     </param>

     <param name="correlation" type="string">
     <description>Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value/>
     </param>

     <param name="intent" type="string">
     <description>Scan intent. Example: '*CAL*, *BAND*' </description>
     <value/>
     </param>
     
     <param name="observation" type="string">
     <description>Observation Id. Example: '2~4' </description>
     <value/>
     </param>

            <param name="ntime" type="double">
                <description>Time-range to use for each chunk (in seconds or minutes). Default:</description>
                <value>0.0</value>
            </param>
            <param name="combinescans" type="bool">
                <description>Accumulate data across scans depending on the value of ntime. Default:</description>
                <value>false</value>
            </param>
    
           <param name="datacolumn" type="string">
                <description>Data column to use for clipping. Example: 'DATA'. Default:
                </description>
                <value>DATA</value>
            </param>
            <param name="timecutoff" type="double">
                <description>Flagging thresholds in units of deviation from the fit. Default:</description>
                <value>4.0</value>
            </param>
            <param name="freqcutoff" type="double">
                <description>Flagging thresholds in units of deviation from the fit. Default:</description>
                <value>3.0</value>
            </param>
            <param name="timefit" type="string">
                <description>Fitting function for the time direction (poly/line). Default: </description>
                <value>line</value>
            </param>
            <param name="freqfit" type="string">
                <description>Fitting function for the frequency direction (poly/line). Default: </description>
                <value>poly</value>
            </param>
            <param name="maxnpieces" type="int">
                <description>Number of pieces in the polynomial-fits (for \'freqfit\' or \'timefit\' = \'poly\'). Default: </description>
                <value>7</value>
            </param>
            <param name="flagdimension" type="string">
                <description>Dimensions along which to calculate fits (freq/time/freqtime/timefreq). Default: </description>
                <value>freqtime</value>
            </param>
            <param name="usewindowstats" type="string">
                <description>Calculate additional flags using sliding window statistics (none,sum,std,both). Default: </description>
                <value>none</value>
            </param>
            <param name="halfwin" type="int">
                <description>Half-width of sliding window to use with \'usewindowstats\' (1,2,3). Default: </description>
                <value>1</value>
            </param>
            <param name="extendflags" type="bool">
                <description>Extend the flags in time, frequency and correlations. Default:</description>
                <value>true</value>
            </param>

     <param name="apply" type="bool">
     <description>Parameter to flag or unflag the data. Default: </description>
     <value>true</value>
     </param>
     
     <param name="channelavg" type="bool">
     <description>Average data over channels before clipping? [True/False]. Default:
     </description>
     <value>false</value>
     </param>
     
     <param name="chanbin" type="variant">
     <description>Width (bin) of input channels to average to form an output channel.</description>
     <type>int</type><type>intVec</type>            
     <value type="int">1</value>
     </param>

     <param name="timeavg" type="bool">
     <description>Average data over time ranges. [True/False]. Default:
     </description>
     <value>false</value>
     </param>

     <param name="timebin" type="string">
     <description>Bin width for time average. Example: '2s' </description>
     <value/>
     </param>     


     
</input>
<example>
The correlation parameter can be used with an operator for the tfcrop mode.
The operator should be written only once and it will affect all the polarizations
given in the string. Note that if ntime='scan' and combinescans=True, all the scans will
be loaded at once, thus requesting a lot of memory depending on the available spws.
The parameter combinescans should be set to True only when ntime is specified as a 
time-interval (not 'scan'). By default, the flags will be extended in time, if
more than 50\% of the timeranges are flagged, 80\% of the channels are flagged and
it will extend to other polarizations too. This is similar to running the extend
mode after running tfcrop on the MS.

af.parsetfcropparameters(spw='9', ntime=10.0, combinescans=True, correlation='ABS_XX,XY', extendflags=True)
</example>

<returns type="bool"/> 
</method>




   <method name="parseantintparameters" type="function">
   <shortdescription>Parse data selection parameters and specific parameters
for the antint mode. Data selection follows the MS Selection syntax.
    </shortdescription>

<input>


     <param name="field" type="string">
     <description>Field indices or source names. Example: '2,3C48' </description>
     <value/>
     </param>
     
     <param name="spw" type="string">
     <description>Spectral Window Indices or names. Example: '1,2' </description>
     <value/>
     </param>
    
     <param name="array" type="string">
     <description>Array Indices or names. Example: 'VLAA' </description>
     <value/>
     </param>
    
     <param name="feed" type="string">
     <description>Feed index or name. Example: '1,2' (not supported yet) </description>
     <value/>
     </param>
    
     <param name="scan" type="string">
     <description>Scan number. Example: '1,2,3' </description>
     <value/>
     </param>   

     <param name="antenna" type="string">
     <description>Baseline number. Example: '2,3,4,5' </description>
     <value/>
     </param>
    
     <param name="uvrange" type="string">
     <description>UV-distance range, with a unit. Example: '2.0-3000.0 m'</description>
     <value/>
     </param>
    
     <param name="time" type="string">
     <description>Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value/>
     </param>

     <param name="correlation" type="string">
     <description>Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value/>
     </param>

     <param name="intent" type="string">
     <description>Scan intent. Example: '*CAL*, *BAND*' </description>
     <value/>
     </param>
     
     <param name="observation" type="string">
     <description>Observation Id. Example: '2~4' </description>
     <value/>
     </param>

     <param name="antint_ref_antenna" type="string">
     <description>Antenna for which the fractions of channels flagged will be checked.</description>
     <value/>
     </param>

     <param name="minchanfrac" type="double">
        <description>Minimum fraction of flagged channels required for a baseline to be deemed as flagged. Default: </description>
        <value>0.6</value>
    </param>

    <param name="verbose" type="bool">
        <description>Print timestamps of flagged integrations to the log. Default: </description>
        <value>false</value>
    </param>

    <param name="apply" type="bool">
       <description>Parameter to flag or unflag the data. Default: </description>
       <value>true</value>
   </param>


     
</input>
<example>
af.parseantintparameters(antint_ref_antenna='ea10', minchanfrac=0.45, verbose=True)
</example>

<returns type="bool"/> 
</method>




   <method name="parseextendparameters" type="function">
   <shortdescription>Parse data selection parameters and specific parameters
for the extend mode. Data selection follows the MS Selection syntax.
    </shortdescription>

<input>


     <param name="field" type="string">
     <description>Field indices or source names. Example: '2,3C48' </description>
     <value/>
     </param>
     
     <param name="spw" type="string">
     <description>Spectral Window Indices or names. Example: '1,2' </description>
     <value/>
     </param>
    
     <param name="array" type="string">
     <description>Array Indices or names. Example: 'VLAA' </description>
     <value/>
     </param>
    
     <param name="feed" type="string">
     <description>Feed index or name. Example: '1,2' (not supported yet) </description>
     <value/>
     </param>
    
     <param name="scan" type="string">
     <description>Scan number. Example: '1,2,3' </description>
     <value/>
     </param>   

     <param name="antenna" type="string">
     <description>Baseline number. Example: '2,3,4,5' </description>
     <value/>
     </param>
    
     <param name="uvrange" type="string">
     <description>UV-distance range, with a unit. Example: '2.0-3000.0 m'</description>
     <value/>
     </param>
    
     <param name="time" type="string">
     <description>Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value/>
     </param>

     <param name="correlation" type="string">
     <description>Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value/>
     </param>

     <param name="intent" type="string">
     <description>Scan intent. Example: '*CAL*, *BAND*' </description>
     <value/>
     </param>
     
     <param name="observation" type="string">
     <description>Observation Id. Example: '2~4' </description>
     <value/>
     </param>

    <param name="ntime" type="double">
        <description>Time-range to use for each chunk (in seconds or minutes). Default: </description>
        <value>0.0</value>
    </param>
    <param name="combinescans" type="bool">
        <description>Accumulate data across scans.. Default: </description>
        <value>false</value>
    </param>
    <param name="extendpols" type="bool">
        <description>If any correlation is flagged, flag all correlations. Default: </description>
        <value>true</value>
    </param>

   <param name="growtime" type="double">
        <description>Flag all \'ntime\' integrations if more than X\% of the timerange is flagged (0-100). Default: </description>
        <value>50.0</value>
    </param>
    <param name="growfreq" type="double">
        <description>Flag all selected channels if more than X\% of the frequency range is flagged(0-100). Default: </description>
        <value>50.0</value>
    </param>
    <param name="growaround" type="bool">
        <description>Flag data based on surrounding flags. Default: </description>
        <value>false</value>
    </param>
    <param name="flagneartime" type="bool">
        <description>Flag one timestep before and after a flagged one. Default: </description>
        <value>false</value>
    </param>
    <param name="flagnearfreq" type="bool">
        <description>Flag one channel before and after a flagged one. Default: </description>
        <value>false</value>
    </param>

     <param name="apply" type="bool">
     <description>Parameter to flag or unflag the data. Default: </description>
     <value>true</value>
     </param>


     
</input>
<example>
af.parseextendparameters(extendpols=True)
</example>

<returns type="bool"/> 
</method>




   <method name="parsesummaryparameters" type="function">
   <shortdescription>Parse data selection parameters and specific parameters
for the summary mode. Data selection follows the MS Selection syntax.
    </shortdescription>

<input>


     <param name="field" type="string">
     <description>Field indices or source names. Example: '2,3C48' </description>
     <value/>
     </param>
     
     <param name="spw" type="string">
     <description>Spectral Window Indices or names. Example: '1,2' </description>
     <value/>
     </param>
    
     <param name="array" type="string">
     <description>Array Indices or names. Example: 'VLAA' </description>
     <value/>
     </param>
    
     <param name="feed" type="string">
     <description>Feed index or name. Example: '1,2' (not supported yet) </description>
     <value/>
     </param>
    
     <param name="scan" type="string">
     <description>Scan number. Example: '1,2,3' </description>
     <value/>
     </param>   

     <param name="antenna" type="string">
     <description>Baseline number. Example: '2,3,4,5' </description>
     <value/>
     </param>
    
     <param name="uvrange" type="string">
     <description>UV-distance range, with a unit. Example: '2.0-3000.0 m'</description>
     <value/>
     </param>
    
     <param name="time" type="string">
     <description>Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value/>
     </param>

     <param name="correlation" type="string">
     <description>Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value/>
     </param>

     <param name="intent" type="string">
     <description>Scan intent. Example: '*CAL*, *BAND*' </description>
     <value/>
     </param>
     
     <param name="observation" type="string">
     <description>Observation Id. Example: '2~4' </description>
     <value/>
     </param>

     <param name="spwchan" type="bool">
     <description>List the number of flags per spw and per channel. Default: </description>
     <value>false</value>
     </param>

     <param name="spwcorr" type="bool">
     <description>List the number of flags per spw and per correlation. Default: </description>
     <value>false</value>
     </param>

     <param name="basecnt" type="bool">
     <description>List the number of flags per baseline. Default: </description>
     <value>false</value>
     </param>

     <param name="fieldcnt" type="bool">
     <description>List the number of flags per field. Default: </description>
     <value>false</value>
     </param>
     
     <param name="name" type="string">
     <description>Name of this summary report. Default: summary </description>
     <value/>
     </param>
     

     
</input>
<example>
af.parsesummaryparameters(spwchan=True, basecnt=True)
</example>

<returns type="bool"/> 
</method>

</tool>
</casaxml>
