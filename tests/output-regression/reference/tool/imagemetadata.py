##################### generated by xml-casa (v2) from imagemetadata.xml #############
##################### a6949a9b048f9c174974cdafb7d2b5c3 ##############################
from __future__ import absolute_import 
from .__casac__ import imagemetadata as _imagemetadata
from .platform import str_encode as _str_ec
from .platform import str_decode as _str_dc
from .platform import dict_encode as _dict_ec
from .platform import dict_decode as _dict_dc
from .platform import encode as _any_ec
from .platform import decode as _any_dc
from .typecheck import validator as _pc
from .coercetype import coerce as _coerce


class imagemetadata:
    ### self
    def __init__(self, *args, **kwargs):
        """
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _imagemetadata()

    def add(self, key='', value=[ ]):
        """Add a key-value pair if possible.
        
        """
        schema = {'key': {'type': 'cStr'}, 'value': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}}
        doc = {'key': key, 'value': value}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _add_result = self._swigobj.add(_str_ec(_pc.document['key']), _any_ec(_pc.document['value']))
        return _add_result

    def close(self):
        """This function closes the image metadata tool.  This means that it detaches the
        tool from its underlying metadata object. Methods cannot be run on it until it
        is opened with another or the same image.
        """
        _close_result = self._swigobj.close()
        return _close_result

    def done(self):
        """This function closes the image metadata tool.  This means that it detaches the
        tool from its underlying metadata object. Methods cannot be run on it until it
        is opened with another or the same image.
        
        
        """
        _done_result = self._swigobj.done()
        return _done_result

    def get(self, key=''):
        """Get the value associated with the specified, case-insensitive FITS keyword.
        
        """
        schema = {'key': {'type': 'cStr'}}
        doc = {'key': key}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _get_result = _any_dc(self._swigobj.get(_str_ec(_pc.document['key'])))
        return _get_result

    def list(self, verbose=True):
        """Get a listing of traditional FITS-like "header" items.
        
        """
        schema = {'verbose': {'type': 'cBool'}}
        doc = {'verbose': verbose}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _list_result = _dict_dc(self._swigobj.list(_pc.document['verbose']))
        return _list_result

    def open(self, infile):
        """This method creates access to the specified image's metadata.
        
        
        """
        schema = {'infile': {'type': 'cReqPath', 'coerce': _coerce.expand_path}}
        doc = {'infile': infile}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _open_result = self._swigobj.open(_str_ec(_pc.document['infile']))
        return _open_result

    def remove(self, key='', value=[ ]):
        """Remove or clear the value of a keyword if possible. If key="masks", a value specifying the mask
        to remove may be specified. If no value is specified, all masks are removed.
        
        """
        schema = {'key': {'type': 'cStr'}, 'value': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}}
        doc = {'key': key, 'value': value}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _remove_result = self._swigobj.remove(_str_ec(_pc.document['key']), _any_ec(_pc.document['value']))
        return _remove_result

    def set(self, key='', value=[ ]):
        """Set a key-value pair if possible.
        
        """
        schema = {'key': {'type': 'cStr'}, 'value': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}}
        doc = {'key': key, 'value': value}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _set_result = self._swigobj.set(_str_ec(_pc.document['key']), _any_ec(_pc.document['value']))
        return _set_result

