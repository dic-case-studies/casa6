#ifndef _AGENTFLAGGER_XML_AGENTFLAGGER_CMPT_
#define _AGENTFLAGGER_XML_AGENTFLAGGER_CMPT_
/******************** generated by xml-casa (v2) from agentflagger.xml **************
********************* 58b77d5435776f34b23683fe25051d28 *****************************/

#include <vector>
#include <string>
#include <complex>
#include <stdcasa/record.h>
#include <casaswig_types.h>
#include <casa/Exceptions/Error.h>
#include <agentflagger_forward.h>


using namespace std;

namespace casac {

  class  agentflagger  {
    public:

      agentflagger();
      bool done();
      bool open(const string& _msname=string(""), double _ntime=double(0.0));
      bool selectdata(const record& _config=initialize_record(""), const string& _field=string(""), const string& _spw=string(""), const string& _array=string(""), const string& _feed=string(""), const string& _scan=string(""), const string& _antenna=string(""), const string& _uvrange=string(""), const string& _timerange=string(""), const string& _correlation=string(""), const string& _intent=string(""), const string& _observation=string(""));
      bool parseagentparameters(const record& _aparams=initialize_record(""));
      bool init();
      record* run(bool _writeflags=bool(true), bool _sequential=bool(true));
      std::vector<std::string> getflagversionlist(bool _printflags=bool(true));
      bool printflagselection();
      bool saveflagversion(const string& _versionname=string(""), const string& _comment=string(""), const string& _merge=string(""));
      bool restoreflagversion(const std::vector<std::string>& _versionname=std::vector<std::string>({}), const string& _merge=string(""));
      bool deleteflagversion(const std::vector<std::string>& _versionname=std::vector<std::string>({}));
      bool parsemanualparameters(const string& _field=string(""), const string& _spw=string(""), const string& _array=string(""), const string& _feed=string(""), const string& _scan=string(""), const string& _antenna=string(""), const string& _uvrange=string(""), const string& _time=string(""), const string& _correlation=string(""), const string& _intent=string(""), const string& _observation=string(""), bool _autocorr=bool(false), bool _apply=bool(true));
      bool parseclipparameters(const string& _field=string(""), const string& _spw=string(""), const string& _array=string(""), const string& _feed=string(""), const string& _scan=string(""), const string& _antenna=string(""), const string& _uvrange=string(""), const string& _time=string(""), const string& _correlation=string(""), const string& _intent=string(""), const string& _observation=string(""), const string& _datacolumn=string("DATA"), const std::vector<double>& _clipminmax=std::vector<double>({}), bool _clipoutside=bool(true), bool _channelavg=bool(false), const variant& _chanbin=variant( ), bool _timeavg=bool(false), const string& _timebin=string(""), bool _clipzeros=bool(false), bool _apply=bool(true));
      bool parsequackparameters(const string& _field=string(""), const string& _spw=string(""), const string& _array=string(""), const string& _feed=string(""), const string& _scan=string(""), const string& _antenna=string(""), const string& _uvrange=string(""), const string& _time=string(""), const string& _correlation=string(""), const string& _intent=string(""), const string& _observation=string(""), const string& _quackmode=string("beg"), double _quackinterval=double(0.0), bool _quackincrement=bool(false), bool _apply=bool(true));
      bool parseelevationparameters(const string& _field=string(""), const string& _spw=string(""), const string& _array=string(""), const string& _feed=string(""), const string& _scan=string(""), const string& _antenna=string(""), const string& _uvrange=string(""), const string& _time=string(""), const string& _correlation=string(""), const string& _intent=string(""), const string& _observation=string(""), double _lowerlimit=double(0.0), double _upperlimit=double(90.0), bool _apply=bool(true));
      bool parsetfcropparameters(const string& _field=string(""), const string& _spw=string(""), const string& _array=string(""), const string& _feed=string(""), const string& _scan=string(""), const string& _antenna=string(""), const string& _uvrange=string(""), const string& _time=string(""), const string& _correlation=string(""), const string& _intent=string(""), const string& _observation=string(""), double _ntime=double(0.0), bool _combinescans=bool(false), const string& _datacolumn=string("DATA"), double _timecutoff=double(4.0), double _freqcutoff=double(3.0), const string& _timefit=string("line"), const string& _freqfit=string("poly"), long _maxnpieces=long(7), const string& _flagdimension=string("freqtime"), const string& _usewindowstats=string("none"), long _halfwin=long(1), bool _extendflags=bool(true), bool _apply=bool(true), bool _channelavg=bool(false), const variant& _chanbin=variant( ), bool _timeavg=bool(false), const string& _timebin=string(""));
      bool parseantintparameters(const string& _field=string(""), const string& _spw=string(""), const string& _array=string(""), const string& _feed=string(""), const string& _scan=string(""), const string& _antenna=string(""), const string& _uvrange=string(""), const string& _time=string(""), const string& _correlation=string(""), const string& _intent=string(""), const string& _observation=string(""), const string& _antint_ref_antenna=string(""), double _minchanfrac=double(0.6), bool _verbose=bool(false), bool _apply=bool(true));
      bool parseextendparameters(const string& _field=string(""), const string& _spw=string(""), const string& _array=string(""), const string& _feed=string(""), const string& _scan=string(""), const string& _antenna=string(""), const string& _uvrange=string(""), const string& _time=string(""), const string& _correlation=string(""), const string& _intent=string(""), const string& _observation=string(""), double _ntime=double(0.0), bool _combinescans=bool(false), bool _extendpols=bool(true), double _growtime=double(50.0), double _growfreq=double(50.0), bool _growaround=bool(false), bool _flagneartime=bool(false), bool _flagnearfreq=bool(false), bool _apply=bool(true));
      bool parsesummaryparameters(const string& _field=string(""), const string& _spw=string(""), const string& _array=string(""), const string& _feed=string(""), const string& _scan=string(""), const string& _antenna=string(""), const string& _uvrange=string(""), const string& _time=string(""), const string& _correlation=string(""), const string& _intent=string(""), const string& _observation=string(""), bool _spwchan=bool(false), bool _spwcorr=bool(false), bool _basecnt=bool(false), bool _fieldcnt=bool(false), const string& _name=string(""));

        ~agentflagger( );

    private:

#include <agentflagger_private.h>


      // --- declarations of static parameter defaults ---
    public:

  };

}

#endif
