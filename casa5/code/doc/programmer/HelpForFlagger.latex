\documentclass[12pt]{article}
\usepackage[dvips]{graphicx, color}
\usepackage{epsfig}
%\usepackage{psfig}
\usepackage{amsmath}

\setlength{\evensidemargin}{-0.7cm}
\setlength{\oddsidemargin}{-0.5cm}
\setlength{\textwidth}{15.8cm}
\setlength{\topmargin}{-2cm}
\setlength{\textheight}{23.5cm}
\parskip 1ex    % White space between paragraphs amount
\parindent 0pt

\begin{document}
\title{Casapy Flag tool and casa::Flagger}
\author{Urvashi Rau}
\date{23 Aug 2007}
\maketitle

\begin{abstract}
This programmers note describes 
\begin{enumerate}
\item List of flagging functions required by users (results of a user survey).
\item The flow of control in the flagger tool and {\tt casa::Flagger} classes (based on O.Smirnov's existing RedFlagger code).
\end{enumerate}
\end{abstract}

\tableofcontents

\newpage
\section{\bf Casapy Flag tool requirements}

In January 2007, several users were presented with a list of features that the {\tt casac::flag} tool would include, and were asked to comment on it.
They gave their suggestions
and this has been folded into the tool description.
This section summarizes the results of this exercise by listing function names and parameter lists
to be used in the casapy {\bf flag} tool. 

The last section of this document lists user-requests which could not be done 
in the initial version, but which should eventually be incorporated into the flagging tools and tasks, as and when the algorithms and the supporting code structure become well defined. 

Many thanks to J.McMullin L.Davis, D.Whysong, J.Lightfoot, N.Kanekar,
     W.Brisken, M.Rupen,F.Owen, E.Fomalont, T.J.Cornwell for comments and suggestions.

\subsection{Data selection}
The following function will be used to select
a subset of the MS, on which to perform subsequent flagging operations.

All data selection syntax will follow the ms-selection syntax and allows
lists of numbers or strings, ranges, multiple ranges, combinations of
lists and ranges separated by commas, and wild-carding.

{\bf
\begin{verbatim}
>> fg.setdata(antenna=[],field=[],spw=[],array=[],feed=[],scan=[],
              baseline=[],uvrange=[min,max],time=[],
              freqrange=[min,max],channel=[],correlation=[])
\end{verbatim}
}
This function will return a record, with some information about the subset
of the MS that has been selected. For example, "Number of rows selected; 
   number of visibilities, antennas, channels, pols; fraction of antennas, 
   times,chans that are in this selection".\\

\subsection{Manual flagging}
The following function will select specific data, for manual flagging.\\
{\bf
\begin{verbatim}
>> fg.setmanualflags(antenna=[],field=[],spw=[],array=[],feed=[],scan=[],
                     baseline=[],uvrange=[min,max],time=[],
                     freqrange=[min,max],channel=[],correlation=[],
                     unflag=T/F, rowFlag=T/F, autocorrelation=T/F)
\end{verbatim}
}
The flags will get applied to the data, after a call to the {\tt fg.run()} function.\\
Note that {\tt fg.setmanualflags()} can be called multiple times before
a call to {\tt fg.run()}. This will apply flags to all selections during a 
single pass through the data.

{\bf
\begin{verbatim}
Example : To flag chans 4,5 for antenna 2, and chans 16,17 for antenna 5.
          All corresponding baselines, correlations and times will be flagged.
>> fg.setmanualflags(antenna=[2],chanList=[4-6]);
>> fg.setmanualflags(antenna=['C03'],chanList=[16,17,40]);
>> fg.run();
\end{verbatim}
}

{\tt fg.printmanualflagselection()} prints out the current list of manual flag selections.\\
{\tt fg.clearmanualflagselection()} clears any previous manual flag selections. Note that
this only clears flag selection settings, and does not undo any flags that
have already been applied to the data.\\ To undo flags, one must
use {\tt fg.setmanualflags(...,unflag=True)},

Other simple semi-manual flags are 
Clip and Quack.
{\bf
\begin{verbatim}
fg.setclip(antenna=[],field=[],spw=[],array=[],feed=[],scan=[],
           baseline=[],uvrange=[min,max],time=[],
           freqrange=[min,max],channel=[],correlation=[],
           clipExpr='',clipRange=[min,max],ouside=T/F); 
fg.setquack(scaninterval,length);               .
\end{verbatim}
}
{\bf
\begin{verbatim}
>> fg.setclip(clipExpr='abs I',clipRange=[1e-06,1e+6],outside=T);
                                                     -> Flag data outside the range
>> fg.setquack(scaninterval='20min',length=5sec');   -> Flag beginning and end of scan.
\end{verbatim}
}

\subsection{Algorithms}
The algorithms currently implemented are identical to those in the old {\tt autoflag} tool. They 
include sliding-window median filters in time and frequency ({\tt time-median, freq-median}),
and the {\tt spectral-rejection}, and {\tt uv-binning} algorithms.\footnote{Current algorithm documentation : {\tt http://aips2.nrao.edu/docs/user/SynthesisRef/node3.html\#autoflag} {\tt http://casa.nrao.edu/docs/casaref/autoflag-Tool.html\#x252-2560002.1.1}}

The following functions gathers input parameters for different
autoflag algorithms. Each algorithm can have a different parameter list, and this
is to be supplied as a record of parameters.
{\bf
\begin{verbatim}
>> fg.getautoflagparams(algorithm='timemedian')    -> returns a list of current params.
>> fg.setautoflag(algorithm='timemedian',parameters=[column='',expr='',threshold='',...])
\end{verbatim}
}

Multiple algorithms can be set-up before a call
to {\tt fg.run(trial=T/F)}. This creates a list of {\tt active} algorithms, which
are applied in succession to each chunk of data as the program iterates through
the data.

If an algorithm is run in trial mode, then
flags are not written to disk. The output of the autoflag algorithm can
be monitored, and flags later committed to disk via an optional
{\tt fg.writeflagstodisk()} function.
One could interactively use this function as follows.
{\bf
\begin{verbatim}
>> inputpars = fg.getautoflagparams(algorithm='timemedian');
>> print inputpars   
        column = 'data'
        expr = 'abs I'
        thr = 0.5
        ...
>> inputpars.column = 'correcteddata'
>> print inputpars
        column = 'correcteddata'
        expr = 'abs I'
        thr = 0.5
        ...
>> fg.setautoflag(algorithm='timemedian', parameters = inputpars);
>> fg.run();
\end{verbatim}
}

The data expression used to compute the data on which the algorithm is to be applied, is
specified by the following parameters.\\
{\tt column :} data/correcteddata/residualdata/weights/invweights/weighteddata\\
{\tt expr :} abs/arg/real/imag/pow(2) ~~ RR/LL/RL/LR/XX/YY/XY/YX/I/Q/U/V \\

{\tt fg.printautoflagparams()} prints out the names of currently active autoflag
algorithms and their parameters.\\
{\tt fg.clearautoflagparams()} clears any autoflag parameter settings. It can take in
an algorithm name as a parameter, to remove only specific algorithms from the currently active list.

%%Other algorithms include the AIPS FLAGR.

\subsection{Flag summaries/statistics}

The following functions provide various views of the data. 
These functions can be called to monitor flags before calling any
flag/autoflag functions.

\subsubsection{Flag Statistics}
The following function will display the percentage of data flagged vs {\tt Antenna,
	Baseline, SpwIndex, Channel, Correlations,TimeRange, FieldId, UVRange}\\
These results can either be listed out on the
logger, or when applicable, sent to a plotter for graphical output. They can also be
returned in a suitable data record for automated parsing. For now, a list will be
printed out to the logger, and returned in a record.
The data selection parameters are identical to those in {\tt fg.setmanualflags()}.
{\bf
\begin{verbatim}
fg.showflagsummary(antenna=[],field=[],spw=[],array=[],feed=[],scan=[],
                   baseline=[],uvrange=[min,max],time=[],
                   freqrange=[min,max],channel=[],correlation=[])
\end{verbatim}
}

\subsubsection{Queries}
These functions will allow the user to identify parts of their data sets, with more or
less than some fraction of flags.
The following function will return lists of {\tt AntennaIndex, Baselines, SpwIndex and Channels,
	Correlations,FieldIndex} with more (or less) than a specified percentage
	of flagged data (percentage threshold (thr)  : [0-1]). They can also be 
	queried based on an absolute number of flags. These are 1-D queries.\\
{\bf
\begin{verbatim}
fg.queryflags(antenna=[],field=[],spw=[],array=[],feed=[],scan=[],
              baseline=[],uvrange=[min,max],time=[],
              freqrange=[min,max],channel=[],correlation=[],
              what="", thr= ,nflags=, morethan=T/F)
\end{verbatim}
}
The axes along which 1-D queries can be made will be {\tt what} = antenna, baseline,
spwindex, channel, correlations, fieldID.\\
{\tt thr} is the fraction of flagged data to be used as the threshold for listing.\\
{\tt nflags} is an absolute number of flags to be used as the threshold for listing.\\
{\tt morethan} chooses between searching for more than or less than the specified
number/fraction of flags.
{\bf
\begin{verbatim}
>> fg.queryflags(what = 'antenna',thr = 0.5, [morethan=True])
>> fg.queryflags(field=[2,3], what = 'channel',thr = 0.8)
...etc...
\end{verbatim}
}
Some 2-dimensional queries can be done, by calling multiple 1-D queries in succession. 
Other 2-D queries will be added later.

\subsection{Extending flags}
\begin{enumerate}
\item Extend existing flags along a specified axis.
For example, 'for a given timestamp and baseline, 
if any channel is flagged, the entire channel.'. 
The allowed axes along
which flags can be extended will be {\tt Antenna, Baseline, Channel, Correlation,Time}.
One can select an arbitrary subset of the data, and then extend its flags along
a specified axis. The default selection is the entire data.
{\bf
\begin{verbatim}
fg.extendflags(antenna=[],field=[],spw=[],array=[],feed=[],scan=[],
               baseline=[],uvrange=[min,max],time=[],
               freqrange=[min,max],channel=[],correlation=[],
               along='',width= , )
\end{verbatim}
}
The {\tt along} parameter can take on the following values - {\tt  channel, time, 
	hourangle} to be used along with the {\tt width} parameter.
	Units for specifying the width will be 
    decided later, and for now, will just be "number of data points".
    Other values for {\tt along} would be {\tt antenna1, antenna2, bothantennas, allbaselines}.

{\bf
\begin{verbatim}
>> fg.extendflags(along='channel',width=3) -> Flag 3 channels on either side of a
                                              flagged channel
>> fg.extendflags(along='antenna1')        -> Flag all corresponding visibilities 
                                              for antenna 1 of the flagged baseline.
                                              (for the corresponding time-stamp).  
>> fg.extendflags(along='bothantennas')    -> Flag all corresponding visibilities 
                                              for both antennas of the flagged baseline.
                                              (for the corresponding time-stamp).  
\end{verbatim}
}

\item The output from query functions can be sent into the manual
flagging functions, to extend flags to other dimensions. \\
Example 1 : Flag all channels that have more than 70\% of their data already flagged.
{\bf
\begin{verbatim}
>> fg.clearmanualflagselection();    -> Cleans up any old manual flag selections 
>> chans = fg.queryflags(what='channel', thr= 0.7) 
                                     -> returns a list of channel numbers
                                         corresponding to channels with more
                                         than 70% of the data being flagged.
>> fg.setmanualflags(channel=chans) -> Select these channels for manual flagging
>> fg.run();                         -> Apply the flags.
\end{verbatim}
}
Example 2 : For fieldID=1 (calibrator), find a list of "bad" channels with more 
than 60\% data flagged. Transfer these flags to fieldID=2 (source) to flag
all channels of the target source, that would have been calibrated by the "bad"
channels from the calibrator.
{\bf
\begin{verbatim}
>> fg.clearmanualflagselection();   
>> chans = fg.queryflags(field=['3C48'],what='channel',thr=0.6);
>> fg.setmanualflags(field=['cygA'],channel=chans);
>> fg.run();
\end{verbatim}
}

\end{enumerate}

%%  Extend flags from different tables...
%%  gain-calib table

\subsection{Other requested functions}
The following functions will be added in once the above functionality exists.
\begin{enumerate}
\item A flag command history can be compiled via a combination of 
{\tt fg.printmanualflagselection()} and {\tt fg.printautoflagparameters()}, with a parameter
to append to a history file, instead of printing to the screen/logger. This can be
done via python scripts at the task level. Read-back and flag-version
ability will be added in later.\\
\item  Read in manual-flagging parameters from a text file. This
could be done (at the task level) via python scripts that can read the text 
file, and call {\tt fg.setmanualflags()}. The formats can be compatible with the output
of {\tt fg.printmanualflagselection()} and the history file.
\item  Other algorithms that will be added in are 2-D 
	autoflag algorithms that include ones being explored for the ALMA pipeline 
		flagging capability - use simple statistics to do flagging on 2-D views 
		of the data. Views that will be supported are (baseline vs chan),
		   (baseline vs time), (time vs channel), etc..
 
\item Flag antennas for timeranges for which the antenna
	is shadowed by another.
\item Flag time-ranges based on an elevation limit for a
	specified source.
\item Allow flags to be extended for a uv-range around a
	flagged point,
\item Allow the ability to average data, and look for flags,
	but to extend the flags to the unaveraged data set. This is possible for
	visual flagging using {\tt msplot}. This will be added into the "flag" tool too.
\item Warn the user when more than 90\% of any axis, has been flagged.
This can be done via python scripts at the task level, where queries are run immediately after
every fg.run call.
\end{enumerate}


The following are functions to be added later, because either the exact algorithms to be
implemented are not clear yet, or the supporting code-structure does not yet exist.
\begin{enumerate}
\item Some AIPS flagging tasks ?
\item Write flags to an external text file in some simple text format.
		This should be optionally returned as a python record (for a pipeline).
\item Need flag-tables with history associated with the flag-tables, and not the MS.
\item Calibration-based flagging.
\item Flag based on Tsys, wideband autocorrelations, quantization corrections, 
	poor or good a priori calibration or antenna positions, WVR results, 
	decorrelations [at high freq. -- cf. ALMA's two data streams], etc. etc. 
\item Run autoflag algorithms on gain-solutions, and create antenna-based flags.
	Allow these flags to be applied (extended) to the main table. Algorithms can be
	allowed to run on MS subtables, and associated flags be applied to the main table.
\item Flag statistics. \\
2D plot of histograms of the data (with flags applied). \\
X-axis : time, binned in coarse increments.\\
Y-axis : the histogram bins (steps in amplitude).\\
The plot should be a gray-scale (stack up 1-D histograms), or a set of lines
for (mean, 1-sigma, 2sigma, etc..). The user should be able to adjust statistical
parameters, and see the effect on the low-resolution summary data.
\item Queries that return histograms.
\item Add in queries that list time-ranges and uv-ranges 
	with more than some percentage of data flagged
\item Algorithms that identify ranges/areas of moderately
	bad data, as opposed to isolated points. 2D autoflag algorithms that work on
different views of the data and flag based on simple statistics.
\item Autoflag algorithms that work on 3-dimensional views of the data. Awaiting details.
\item  Algorithm that will flag based on closure errors. Use the
gain table, compute closure quantities, and flag accordingly.
\item For wide-band data, flag across channels after taking into account
source spectral indices.
\item Allow the user to randomly flag X\% of the data.

\item Displays :\\
2-D views of the data can be created as specified, and clusters of flagged data will be visible.
These functions will interact with the viewer, where interactive flagging can be done.\\
Currently this is not possible, but we are exploring this.
{\bf
\begin{verbatim}
fg.displayflags(antenna=[],field=[],spw=[],array=[],feed=[],scan=[],
                baseline=[],uvrange=[min,max],time=[],
                freqrange=[min,max],channel=[],correlation=[],
                x="", y="", column="", expr="", showflags=T/F)
\end{verbatim}
}
{\bf
\begin{verbatim}
>> fg.displayflags(fieldName=['3c48'], x='antenna',y='channel', column='data', expr='abs I', showflags=True)
>> fg.displayflags(x='time', y='baseline', column='residualdata', expr='abs I', showflags=True)
...etc...
\end{verbatim}
}
As per ALMA pipeline requirements, there should be an option to write these 2D views to disk,
   to be looked at later, or loaded in the viewer.
\end{enumerate}

\section{C++ classes and control flow in {\tt casa::Flagger}}

This is a brief summary of the flow of control in the flagger tool, with details about how data selection is done at various levels, and how flags are read from the MS, manipulated and written back into the MS. Casapy revision 3089+ contains this code, and the flagger tool supports (tested) functionality for manual flagging, clip and quack, time-median and freq-median auto flagging, and flag summaries. This code is a re-incarnation of Oleg Smirnov's original RedFlagger code. The following is my understanding of the system, based on the partial re-implementation and testing of the above mentioned functions.

\subsection{Main Control Flow}
\begin{enumerate}
\item Flagger.cc : Main class that holds a list of "RFA" flagging classes (agents) and supervises the flagging by calling a sequence of agent::functions in Flagger::run(). 
\item RFAFlagCubeBase.cc : Base class for the different kinds of flagging classes.
                  Member functions : newChunk(), startData(), iterTime(), iterRow(), startDry(), endData(), endDry(),startFlag(),iterFlag(),endFlag(), etc... are to be implemented here, which will get called from Flagger::run().
               This is where flag stats are also accumulated.
\item RFCommon.h : Place where a lot of important "enums" are defined.
\item RFFlagCube.cc : Handles reading and writing flags from/to the MS. Has methods getMSFlags(), setMSFlags(), setRowFlag(), clearRowFlag(), setFlag() etc.
\end{enumerate}
The following is a simplified code-chunk that illustrates the main flow in Flagger::run()..
\begin{verbatim}
[ acc ] : list of flagging agents.
[ chunk ] : instance of RFChunkStats
[ set up sort columns in VisSet, and create "vi" from this VisSet. ]

  for( vi.originChunks(); vi.moreChunks(); vi.nextChunk(),nchunk++ ) 
  {
    chunk.newChunk();
    for( uInt i = 0; i<acc.nelements(); i++ ) acc[i]->newChunk();
    for( uInt i = 0; i<acc.nelements(); i++ ) acc[i]->startData();
    for( vi.origin(); vi.more(); vi++,itime++ )
    {
            chunk.newTime();
            for( uInt ival = 0; ival<acc.nelements(); ival++ ) 
                                         acc[ival]->iterTime(itime);
            
            for( Int ir=0; ir<vb.nRow() && ndata; ir++ ) 
              for( uInt ival = 0; ival<acc.nelements(); ival++ )
                                         acc[ival]->iterRow(ir);
    }
    for( uInt i = 0; i<acc.nelements(); i++ ) acc[i]->endData();
    for( uInt i = 0; i<acc.nelements(); i++ ) acc[i]->startFlag();
    for( vi.origin(); vi.more(); vi++,itime++ )
    {
            chunk.newTime();
            for( uInt i = 0; i<acc.nelements(); i++ ) 
                                         acc[i]->iterFlag(itime);
    }
    for( uInt i = 0; i<acc.nelements(); i++ ) acc[i]->endFlag();
    for( uInt i = 0; i<acc.nelements(); i++ ) acc[i]->endChunk();
  }
\end{verbatim}
    
\subsection{Functionality layout}

\begin{enumerate}
\item setdata : Flagger.cc : Uses MSSelection to perform row-selection to generate a subset of the MS, which is used to
create a VisSet. On this VisSet, VisibilityIterator::selectChannel() is used 
to select on channels.  This is how the data selection is done for autoflag.
\footnote{For "manual flagging", selectChannel() should not be done here. Currently this is controlled
in the flagdata task, where fg.setdata() is called.
If selectChannel() is called for manual flagging, the selected channel
        chunk starts with index=0 for the first selected channel. This can confuse any code
        that tries to map channel indices to channels (needs verification). }

\item selectdata : Flagger.cc : This is different from setdata. This uses MSSelection purely for parsing, and not to do any actual subMS selection. This is used to parse the input for manual flagging. The manual flagging params are then reformatted into an RFASelector type agent. The distinction between setdata and selectdata, and how they are used in flagger\_cmpt.cc, is important.

\item manual flagging : RFASelector.cc : The constructor for the RFASelector agent takes in all the selection
parameters for manual flagging, parses them, and generates lists of indices for field,spw,
baseline, etc. As the MS is iterated through, selection checks are done at multiple levels. RFASelector::newChunk() checks for field,spw,array, and discards chunks that
are not within the selection criteria.  For chunks that pass through, RFASelector::iterTime() is
called once per timestamp (all baselines, one time) and checks are done for time,feed,baseline,uvrange, etc.  If a row passes this selection criteria too, RFASelector::processRow() is called, in which the channel and correlation checks are done.  RFASelector::processRow() is where flags are set/unset. 
This calls RFFlagCube::setFlag(chan,ifr),  \\   RFFlagCube::setRowFlag(ifr,time)    and similar functions.

\item auto-flagging : RFADiffBase, RFAMedianClip, RFAUVBinner, RFASpectralRej, RFARowClipper : autoflag agent classes that implement RFAXXX::newChunk(), startData(), iterTime(), etc.\\
TimeMedianClip and FreqMedianClip generate models against which to flag, and then pass this into RFADiffBase that does a {\tt diff} with thresholds and calls RFFlagCube::setFlag(). RFAUVBinner and RFASpectralRej do it themselves.

\item flag summary : Flag statistics are accumulated in RFFlagCube::setMSFlags().
This is called from RFAXXX::iterFlag(). Therefore, output statistics are available only by the time RFAXXX::endFlag() is called.  RFAFlagExaminer::endFlag() does the printing out of flag statistics per chunk. 


\end{enumerate}

\subsection{Reading and Writing flags}
Flags are read from and written to Measurement Sets in RFFlagCube.cc.
RFFlagCube getFlag functions are done whenever vi++ happens. i.e. one timestamp to the next, to load in the current flags from visIter. Flags are modified during RFAXXX::iterTime(). setFlag functions are done only at the very end to write back into the visbuffer and are called from RFAXXX::iterFlag().
\begin{enumerate}
\item Flag Cube indexing : ( RFFlagCube.cc ). Flags for a particular ifr, time and chan are accessed through a Cube$<$uInt$>$ (ifr,time,chan).
The correlation indexing is done via a bitmask. A "flag" is a uInt, called RFFlagWord. Then, there's a correlation-mask, which is a bit-mask. The correlation mask, is used to choose which bits of the RFFlagWord is currently being operated upon. For example, a corrMask of "0000 0011" signals that RR and LL are being used. An RFFlagWord of "0000 0000" means that RR and LL are unflagged. "0000 0001" is only RR flagged. "0000 0011" is RR and LL flagged. etc.  This is for one "agent".\\
When there are multiple agents, each RR,LL bit-pair is shifted for each agent. So if there are 3 agents, with RR being flagged in all of them (for this ifr,time,chan) but not LL, and LL being flagged only for agent 2, then the flag-word is "0001 1101". And here, if you need to pull out for flags for only "agent 3", then use a corrMask of "0000 0011" and get out "01" which tells you that RR is flagged and LL is unflagged for agent 3. \footnote{ I have no idea why Oleg chose this way of handling correlation indexing, but this is how it is. The order of RR and LL in this example may be flipped (needs checking). }

\item RFFlagCube::getMSFlags()\\
Data flags are read from the MS and written into a Cube$<$RFFlagWord$>$, and Row flags into a Vector$<$Bool$>$ This is done while advancing from one timestep to another.

\item RFFlagCube::setFlag,setRowFlag,clearFlag,clearRowFlag.\\
 Flags are written into the Cube$<$RFFlagWord$>$. The correlation Mask is used to ensure that the correct bit is set/unset, depending on the correlation, and the agent id.

\item RFFlagCube::setMSFlags()\\
  Before a flag is set, it first checks to see that {\tt at least one agent} has flagged this point {\tt if(flagword)}. Before a flag is unset, it first checks that {\tt no agent} has flagged this point {\tt if(!flagword)}.  This is to handle cases where if one agent flags a point, but another unflags it, it should remain flagged. Unflagging occurs only if all agents leave the point unflagged.
Once Cube$<$Bool$>$ dataflags, and Vector$<$Bool$>$ rowflag, are filled in and are ready to be sent into the visBuffer, they are reconciled with each other, to ensure that the row flag is always the logical AND of the data flags for that row.  This needs to be handled differently during flagging and unflagging, and the order in which the code is here, is very important. The flags are then written into the visBuffer.  This function is also the place where statistics are accumulated into chunk.nfIfrChan, chunk.nrf.Ifr(), etc.

\end{enumerate}

\subsection{To be done}

\begin{enumerate}
\item As of revision 3089... the following are two main features that are not implemented.\\
(1) fg.query() : e.g Return a list of baselines with more than 80\% data flagged.\\
(2) fg.extend() : take flags from a selection and extend along an axis.\\

In case this is needed for the Beta release, here are a couple of suggestions. \\

For (1) : most of the code is already in place, and all the information is there ( accumulated  as part of flagsummary ) and stored in Matrices.  All that needs to be done is to match up indices and names, and selectively print out names.    This should take a few days (for someone figuring out the insides of the Flagger for the first time. It's also a good way to get someone familiar with the code, without having to change too much of it. (see : RFAFlagExaminer.cc) )\\

For (2) :  this is non-trivial in the current flagger code-setup.  What might be best - is for a separate task/class be written that does ONLY the following.\\
    ---  extend flags within the main table along various axes.\\
    ---  transfer flags between the main table and subtables (e.g. ANTENNA subtable)\\

Perhaps a NAUGer could come up with a python script that does what they want for flag extension.  There are a lot of rules that need to be decided, and having a working script (with rules and parameters defined) will make it easier for a programmer to sit and quickly convert it to C++.

\item Autoflag algorithms "sprej" and "uvbin" need to be tested well.

\end{enumerate}


\end{document}









