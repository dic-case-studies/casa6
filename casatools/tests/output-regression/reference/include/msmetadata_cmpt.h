#ifndef _MSMETADATA_XML_MSMETADATA_CMPT_
#define _MSMETADATA_XML_MSMETADATA_CMPT_
/******************** generated by xml-casa (v2) from msmetadata.xml ****************
********************* b1bf2cdf172de6633ca6e4219cc913ae *****************************/

#include <vector>
#include <string>
#include <complex>
#include <stdcasa/record.h>
#include <casaswig_types.h>
#include <casa/Exceptions/Error.h>
#include <msmetadata_forward.h>


using namespace std;

namespace casac {

  class  msmetadata  {
    public:

      msmetadata();
      std::vector<long> almaspws(bool _chavg=bool(false), bool _fdm=bool(false), bool _sqld=bool(false), bool _tdm=bool(false), bool _wvr=bool(false), bool _complement=bool(false));
      record* antennadiameter(const variant& _antenna=variant( ));
      std::vector<long> antennaids(const variant& _name=variant( ), const variant& _mindiameter=variant( ), const variant& _maxdiameter=variant( ), long _obsid=long(-1));
      std::vector<std::string> antennanames(const variant& _antennaids=variant( ));
      record* antennaoffset(const variant& _which=variant( ));
      record* antennaposition(const variant& _which=variant( ));
      std::vector<std::string> antennastations(const variant& _which=variant( ), long _obsid=long(-1));
      std::vector<long> antennasforscan(long _scan=long(-1), long _obsid=long(-1), long _arrayid=long(-1));
      variant* bandwidths(const variant& _spw=variant( ));
      long baseband(long _spw=long(0L));
      variant* baselines();
      std::vector<long> chanavgspws();
      std::vector<double> chaneffbws(long _spw=long(0L), const string& _unit=string(""), bool _asvel=bool(false));
      std::vector<double> chanfreqs(long _spw=long(0L), const string& _unit=string("Hz"));
      std::vector<double> chanres(long _spw=long(0L), const string& _unit=string(""), bool _asvel=bool(false));
      std::vector<double> chanwidths(long _spw=long(0L), const string& _unit=string("Hz"));
      bool close();
      variant* corrprodsforpol(long _pol=long(-1));
      std::vector<long> corrtypesforpol(long _pol=long(-1));
      std::vector<long> datadescids(long _spw=long(-1), long _pol=long(-1));
      bool done();
      record* effexposuretime();
      record* exposuretime(long _scan=long(0), long _spwid=long(0), long _polid=long(-1), long _obsid=long(0), long _arrayid=long(0));
      std::vector<long> fdmspws();
      std::vector<std::string> fieldnames();
      variant* fieldsforintent(const string& _intent=string(""), bool _asnames=bool(false));
      std::vector<long> fieldsforname(const string& _name=string(""));
      variant* fieldsforscan(long _scan=long(-1), bool _asnames=bool(false), long _obsid=long(-1), long _arrayid=long(-1));
      variant* fieldsforscans(const std::vector<long>& _scans=std::vector<long>({}), bool _asnames=bool(false), long _obsid=long(-1), long _arrayid=long(-1), bool _asmap=bool(false));
      variant* fieldsforsource(long _source=long(-1), bool _asnames=bool(false));
      record* fieldsforsources(bool _asnames=bool(false));
      variant* fieldsforspw(long _spw=long(-1), bool _asnames=bool(false));
      std::vector<long> fieldsfortimes(double _time=double(-1), double _tol=double(0));
      std::vector<std::string> intents();
      std::vector<std::string> intentsforfield(const variant& _field=variant( ));
      std::vector<std::string> intentsforscan(long _scan=long(-1), long _obsid=long(-1), long _arrayid=long(-1));
      std::vector<std::string> intentsforspw(long _spw=long(-1));
      double meanfreq(long _spw=long(0L), const string& _unit=string("Hz"));
      string name();
      std::vector<std::string> namesforfields(const variant& _fieldids=variant( ));
      std::vector<std::string> namesforspws(const variant& _spwids=variant( ));
      long nantennas();
      long narrays();
      long nbaselines(bool _ac=bool(false));
      long nchan(long _spw=long(0L));
      variant* ncorrforpol(long _polid=long(-1));
      long nfields();
      long nobservations();
      long nspw(bool _includewvr=bool(true));
      long nstates();
      long nscans();
      long nsources();
      double nrows(bool _autoc=bool(true), bool _flagged=bool(true));
      std::vector<std::string> observers();
      std::vector<std::string> observatorynames();
      record* observatoryposition(long _which=long(0));
      bool open(const string& _msfile=string(""), float _maxcache=float(50));
      record* phasecenter(long _fieldid=long(0), const record& _epoch=initialize_record(""));
      record* pointingdirection(long _rownum=long(0), bool _interpolate=bool(false), long _initialrow=long(0));
      variant* polidfordatadesc(long _ddid=long(-1));
      std::vector<std::string> projects();
      record* propermotions();
      record* refdir(const variant& _field=variant( ), const record& _epoch=initialize_record(""));
      record* reffreq(long _spw=long(-1));
      variant* restfreqs(long _sourceid=long(0), long _spw=long(0));
      std::vector<long> scannumbers(long _obsid=long(-1), long _arrayid=long(-1));
      std::vector<long> scansforfield(const variant& _field=variant( ), long _obsid=long(-1), long _arrayid=long(-1));
      record* scansforfields(long _obsid=long(0), long _arrayid=long(0));
      std::vector<long> scansforintent(const string& _intent=string(""), long _obsid=long(-1), long _arrayid=long(-1));
      std::vector<long> scansforspw(long _spw=long(-1), long _obsid=long(-1), long _arrayid=long(-1));
      record* scansforspws(long _obsid=long(0), long _arrayid=long(0));
      std::vector<long> scansforstate(long _state=long(-1), long _obsid=long(-1), long _arrayid=long(-1));
      std::vector<long> scansfortimes(double _time=double(-1), double _tol=double(0), long _obsid=long(-1), long _arrayid=long(-1));
      std::vector<std::string> schedule(long _obsid=long(-1));
      long sideband(long _spw=long(0L));
      record* sourcedirs();
      record* sourcetimes();
      long sourceidforfield(long _field=long(-1));
      std::vector<long> sourceidsfromsourcetable();
      std::vector<std::string> sourcenames();
      variant* spwsforbaseband(long _baseband=long(-1), const string& _sqldmode=string("include"));
      variant* spwfordatadesc(long _ddid=long(-1));
      std::vector<long> spwsforfield(const variant& _field=variant( ));
      record* spwsforfields();
      std::vector<long> spwsforintent(const string& _intent=string(""));
      record* spwsfornames(const variant& _spwids=variant( ));
      std::vector<long> spwsforscan(long _scan=long(-1), long _obsid=long(-1), long _arrayid=long(-1));
      record* spwsforscans(long _obsid=long(0), long _arrayid=long(0));
      std::vector<long> statesforscan(long _scan=long(-1), long _obsid=long(-1), long _arrayid=long(-1));
      record* statesforscans(long _obsid=long(0), long _arrayid=long(0));
      record* summary();
      std::vector<long> tdmspws();
      record* timerangeforobs(long _obsid=long(-1));
      std::vector<double> timesforfield(long _field=long(-1));
      std::vector<double> timesforintent(const string& _intent=string(""));
      variant* timesforscan(long _scan=long(-1), long _obsid=long(-1), long _arrayid=long(-1), bool _perspw=bool(false));
      std::vector<double> timesforscans(const variant& _scans=variant( ), long _obsid=long(-1), long _arrayid=long(-1));
      variant* timesforspws(const variant& _spw=variant( ));
      variant* transitions(long _sourceid=long(0), long _spw=long(0));
      std::vector<long> wvrspws(bool _complement=bool(false));

        ~msmetadata( );

    private:

#include <msmetadata_private.h>


      // --- declarations of static parameter defaults ---
    public:

  };

}

#endif
