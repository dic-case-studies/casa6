#ifndef _CALANALYSIS_XML_CALANALYSIS_CMPT_
#define _CALANALYSIS_XML_CALANALYSIS_CMPT_
/******************** generated by xml-casa (v2) from calanalysis.xml ***************
********************* 6027fdcee2daf9c77e67911b3056537d *****************************/

#include <vector>
#include <string>
#include <complex>
#include <stdcasa/record.h>
#include <casaswig_types.h>
#include <casa/Exceptions/Error.h>
#include <calanalysis_forward.h>


using namespace std;

namespace casac {

  class  calanalysis  {
    public:

      calanalysis();
      bool open(const string& _caltable=string(""));
      bool close();
      string calname();
      string msname();
      string viscal();
      string partype();
      string polbasis();
      int numfield();
      std::vector<std::string> field(bool _name=bool(true));
      int numantenna();
      int numantenna1();
      int numantenna2();
      std::vector<std::string> antenna(bool _name=bool(true));
      std::vector<std::string> antenna1(bool _name=bool(true));
      std::vector<std::string> antenna2(bool _name=bool(true));
      int numfeed();
      std::vector<std::string> feed();
      int numtime();
      std::vector<double> time();
      int numspw();
      std::vector<std::string> spw(bool _name=bool(true));
      std::vector<int> numchannel();
      record* freq();
      record* get(const variant& _field=variant( ), const variant& _antenna=variant( ), const variant& _timerange=variant( ), const variant& _spw=variant( ), const variant& _feed=variant( ), const string& _axis=string("TIME"), const string& _ap=string("AMPLITUDE"), bool _norm=bool(false), bool _unwrap=bool(false), double _jumpmax=double(0.0));
      record* fit(const variant& _field=variant( ), const variant& _antenna=variant( ), const variant& _timerange=variant( ), const variant& _spw=variant( ), const variant& _feed=variant( ), const string& _axis=string("TIME"), const string& _ap=string("AMPLITUDE"), bool _norm=bool(false), bool _unwrap=bool(false), double _jumpmax=double(0.0), const string& _order=string("AVERAGE"), const string& _type=string("LSQ"), bool _weight=bool(false));

        ~calanalysis( );

    private:

#include <calanalysis_private.h>


      // --- declarations of static parameter defaults ---
    public:

  };

}

#endif
