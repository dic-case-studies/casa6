<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
      file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task type="function" name="viewer" category="visualization" async="never">
    <shortdescription>View an image or visibility data set</shortdescription>
    <description>
        The viewer will display images in raster, contour, vector or
        marker form.  Images can be blinked, and movies are available
        for spectral-line image cubes.  For measurement sets, many
        display and editing options are available.

        The viewer can be run outside of casapy by typing &lt;casaviewer&gt;.

        Executing viewer &lt;viewer&gt; will bring up a display panel
        window, which can be resized.  If no data file was specified,
        a Load Data window will also appear. Click on the desired data
        file and choose the display type; the rendered data should appear
        on the display panel.

        A Data Display Options window will also appear.  It has drop-down
        subsections for related options, most of which are self-explanatory.
          
        The state of the viewer -- loaded data and related display
        options -- can be saved in a 'restore' file for later use.
        You can provide the restore filename on the command line or
        select it from the Load Data window.

        See the cookbook for more details on using the viewer.
        
    </description>
    <input>
        <param type="string" name="infile" mustexist="true" allowblank='true'>
            <description> (Optional)  Name of file to visualize.</description>
            <value></value>
        </param>

        <param type="string" name="displaytype">
            <description> (Optional)  Type of visual rendering (raster, contour, vector or marker).  lel  if an lel expression is given for infile  (advanced).</description>
            <value>raster</value>
        </param>

        <param type="int" name="channel">
            <description> (Optional)  access a specific channel in the image cube</description>
            <value>0</value>
        </param>

        <param type="int" name="zoom">
            <description> (Optional)  zoom in/out by increments</description>
            <value>1</value>
        </param>

        <param type="string" name="outfile">
            <description> (Optional)  name of the output file to generate</description>
            <value></value>
        </param>

        <param type="double" name="outscale">
            <description> (Optional)  amount to scale output bitmap formats (non-PS, non-PDF)</description>
            <value>1.0</value>
        </param>

        <param type="int" name="outdpi">
            <description> (Optional)  output DPI for PS/PDF</description>
            <value>300</value>
        </param>

        <param type="string" name="outformat">
            <description> (Optional)  format of the output e.g. jpg or pdf (this is overridden by the output files extension</description>
            <value>jpg</value>
        </param>

        <param type="bool" name="outlandscape">
            <description> (Optional)  should the output mode be landscape (PS or PDF)</description>
            <value>False</value>
        </param>

        <param type="bool" name="gui">
            <description> (Optional)  Display the panel in a GUI.</description>
            <value>True</value>
        </param>

                <constraints>
                </constraints>
    </input>
    <returns type="void"/>

    <example>

        examples of usage:

        viewer
        viewer "myimage.im"
        viewer "mymeasurementset.ms"
        viewer "myrestorefile.rstr"
        
        viewer "myimage.im", "contour"

        viewer "'myimage1.im' - 2 * 'myimage2.im'", "lel"
        
        
        Keyword arguments:
        infile -- Name of file to visualize
                default: ''
                example: infile='ngc5921.image'
                If no infile is specified the Load Data window
                will appear for selecting data.
        displaytype -- (optional): method of rendering data
                visually (raster, contour, vector or marker).  
                You can also set this parameter to 'lel' and
                provide an lel expression for infile (advanced).
                default: 'raster'
                example: displaytype='contour'

        Note: the filetype parameter is optional; typing of
        data files is now inferred:
                example:  viewer infile='my.im'
                obsolete: viewer infile='my.im', filetype='raster'
        the filetype is still used to load contours, etc.

    </example>
</task>
</casaxml>
