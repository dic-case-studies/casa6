<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
			     file:///opt/casa/code/xmlcasa/xml/casa.xsd">

  <task type="function" name="plotuv" category="visualization,information" visibility="deprecated">
    <shortdescription>Plot the baseline distribution</shortdescription>
    <description>
      Plots the selected baselines of vis one field at a time, in kilowavelengths.
    </description>
    <input>
      <param type="string" name="vis" mustexist="true">
	<description>Name of input visibility file (MS)</description>
	<value></value>
      </param>
      <param type="any" name="field">
	<description>Select field using ID(s) or name(s)</description>
	<any type="variant" limittypes="string stringArray int intArray"/>
	<value type="string"></value>
      </param>
      <param type="any" name="antenna">
	<description>Select data based on antenna/baseline</description>
	<any type="variant" limittypes="string stringArray int intArray"/>
	<value type="string"></value>
      </param>
      <param type="any" name="spw">
	<description>Select spectral window/channels</description>
	<any type="variant" limittypes="string stringArray int intArray"/>
	<value type="string"></value>
      </param>
      <param type="any" name="observation">
	<description>Select by observation ID(s)</description>
	<any type="variant" limittypes="string int"/>
	<value type="string"></value>
      </param>
      <param type="any" name="array">
	<description>Select (sub)array(s) by array ID number</description>
	<any type="variant" limittypes="string int"/>
	<value type="string"></value>
      </param>
      <param type="int" name="maxnpts">
	<description>Maximum number of points per plot.</description>
	<value>100000</value>
      </param>
      <param type="stringArray" name="colors">
	<description>a list of matplotlib color codes</description>
	<value type="stringArray">
	  <value type="string">r</value>
	  <value type="string">y</value>
	  <value type="string">g</value>
	  <value type="string">b</value>
	</value>
      </param>
      <param type="string" name="symb">
	<description>A matplotlib plot symbol code</description>
	<value>,</value>
      </param>
      <param type="int" name="ncycles">
	<description>How many times to cycle through colors per plot.</description>
	<value>1</value>
      </param>
      <param type="string" name="figfile">
	<description>Save the plotted figure(s) using this name</description>
	<value></value>
      </param>
    </input>
    <returns type="bool"/>
    <example>
    Plots the uv coverage of vis in klambda.  ncycles of colors will be
    allocated to representative wavelengths.

    Keyword arguments:
      vis -- Name of input visibility file
             default: none; example: vis='ngc5921.ms'

      --- Data Selection (see help par.selectdata for more detailed
          information)

       field -- Select field using field id(s) or field name(s).
                 [run listobs to obtain the list IDs or names]
              default: ''=all fields.  If field is a non-negative
              integer, it is assumed to be a field index.
              Otherwise, it is assumed to be a field name
              field='0~2'; field ids 0,1,2
              field='0,4,5~7'; field ids 0,4,5,6,7
              field='3C286,3C295'; fields named 3C286 and 3C295
              field = '3,4C*'; field id 3, all names starting with 4C
        antenna -- Select data based on antenna/baseline
                default: '' (all)
                Non-negative integers are assumed to be antenna indices, and
                anything else is taken as an antenna name.

                Examples:
                antenna='5&amp;6': baseline between antenna index 5 and index 6.
                antenna='VA05&amp;VA06': baseline between VLA antenna 5 and 6.
                antenna='5&amp;6;7&amp;8': baselines 5-6 and 7-8
                antenna='5': all baselines with antenna 5
                antenna='5,6,10': all baselines including antennas 5, 6, or 10
                antenna='5,6,10&amp;': all baselines with *only* antennas 5, 6, or
                                       10.  (cross-correlations only.  Use &amp;&amp;
                                       to include autocorrelations, and &amp;&amp;&amp;
                                       to get only autocorrelations.)
                antenna='!ea03,ea12,ea17': all baselines except those that
                                           include EVLA antennas ea03, ea12, or
                                           ea17.
       spw -- Select spectral windows.  Channel selection is ignored for now.
              default: ''=all spectral windows
              spw='0~2,4'; spectral windows 0,1,2,4
              spw='&lt;2';  spectral windows less than 2 (i.e. 0,1)
              spw='0'; spw 0
              spw='0,10,3'; spws 0, 10, and 3
       observation -- Select by observation ID(s). default: '' = all
       array -- (Sub)array number range. default: ''=all

      maxnpts -- Save memory and/or screen space by plotting a maximum of maxnpts
                 (or all of them if maxnpts &lt; 1).  There is a very sharp
                 slowdown if the plotter starts swapping.
                 default: 100000
      colors -- a list of matplotlib color codes, used in order of decreasing
                visibility wavelength.
                default: ['r', 'y', 'g', 'b']  (red, yellow, green, blue)
      symb -- One of matplotlib's codes for plot symbols: .:,o^v&lt;&gt;s+xDd234hH|_
              default: ',':  The smallest points I could find.
      ncycles -- The number of times colors will be cycled through per plot.
                 default: 1
      figfile -- If not '', save the plots using names based on figfile.
                 Example: if figfile is 'test.png', and field is '1,2,4', the plots
		          will be saved to test_fld1.png, test_fld2.png,
			  and test_fld4.png.
                 default: '' (Do not save)
    </example>
  </task>
</casaxml>
