<casaxml xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://casa.nrao.edu/schema/psetTypes.html">

<task visibility="experimental" category="calibration" name="accor" type="function">
<shortdescription>Normalize visibilities based on auto-correlations</shortdescription>
<description>
Determines the amplitude corrections neede due to errors in sampler
thresholds using measurements of auto-correlation spectra. This
correction is typically requiered for data correlated with the DiFX
correlator (such as VLBA data).  Other correlators (such as the SFXC
correlator used to correlate EVN data at JIVE) already apply this
correction at the correlator.  In this case, running this task is not
necessary.
</description>
<input>
        <param mustexist="true" name="vis" type="path">
<shortdescription>Name of input visibility file</shortdescription>
<description>Name of input visibility file
                     default: none
                        
                        example: vis='ngc5921.ms'
</description>
                <value/>
        </param>

        <param name="caltable" type="string">
<shortdescription>Name of output gain calibration table</shortdescription>
<description>Name of output gain calibration table
                     default: none
                        
                        example: caltable='ngc5921.gcal'
</description>
                <value/>
        </param>

        <param name="field" type="string">
<shortdescription>Select field using field id(s) or field name(s)</shortdescription>
<description>Select field using field id(s) or field name(s)
                     default: '' --&gt; all fields
                     
                     Use 'go listobs' to obtain the list id's or
                     names. If field string is a non-negative integer,
                     it is assumed a field index,  otherwise, it is
                     assumed a field name.

                        Examples:
                        field='0~2'; field ids 0,1,2
                        field='0,4,5~7'; field ids 0,4,5,6,7
                        field='3C286,3C295'; field named 3C286 and
                        3C295
                        field = '3,4C*'; field id 3, all names
                        starting with 4C

                     Note: do not forget to include the flux density
                     calibrator if you have one!
</description>
                <value/>
        </param>

        <param name="spw" type="string">
<shortdescription>Select spectral window/channels</shortdescription>
<description>Select spectral window/channels

                        Examples:
                        spw='0~2,4'; spectral windows 0,1,2,4 (all
                        channels)
                        spw='&lt;2';  spectral windows less than 2
                        (i.e. 0,1)
                        spw='0:5~61'; spw 0, channels 5 to 61,
                        INCLUSIVE
                        spw='*:5~61'; all spw with channels 5 to 61
                        spw='0,10,3:3~45'; spw 0,10 all channels, spw
                        3, channels 3 to 45.
                        spw='0~2:2~6'; spw 0,1,2 with channels 2
                        through 6 in each.
                        spw='0:0~10;15~60'; spectral window 0 with
                        channels 0-10,15-60. (NOTE ';' to separate
                        channel selections)
                        spw='0:0~10^2,1:20~30^5'; spw 0, channels
                        0,2,4,6,8,10, spw 1, channels 20,25,30 
                        type 'help par.selection' for more examples.
</description>
                <value/>
        </param>

        <param name="intent" type="string">
<shortdescription>Select observing intent</shortdescription>
<description>Select observing intent
                     default: '' (no selection by intent)

                        Example: intent='*BANDPASS*'  (selects data
                        labelled with BANDPASS intent)
</description>
                <value/>
        </param>

        <param name="selectdata" type="bool">
<shortdescription>Other data selection parameters</shortdescription>
<description>Other data selection parameters
                     default: True (Must set selectdata=True to select
                     other selection parameters.)
</description>
                <value>True</value>
        </param>

        <param subparam="true" name="timerange" type="string">
<shortdescription>Select data based on time range</shortdescription>
<description>Select data based on time range
                     Subparameter of selectdata=True
                     default = '' (all)

                        Examples:
                        timerange =
                        'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
                        (Note: if YYYY/MM/DD is missing date defaults
                        to first day in data set.)
                        timerange='09:14:0~09:54:0' picks 40 min on
                        first day 
                        timerange= '25:00:00~27:30:00' picks 1 hr to 3
                        hr 30min on NEXT day
                        timerange='09:44:00' pick data within one
                        integration of time
                        timerange='&gt;10:24:00' data after this time
</description>
                <value/>
        </param>

        <param subparam="true" name="antenna" type="string">
<shortdescription>Select data based on antenna/baseline</shortdescription>
<description>Select data based on antenna/baseline
                     Subparameter of selectdata=True
                     default: '' (all)

                         Examples: 
                         antenna='5&amp;6'; baseline between antenna
                         index 5 and index 6.
                         antenna='VA05&amp;VA06'; baseline between VLA
                         antenna 5 and 6.
                         antenna='5&amp;6;7&amp;8'; baselines with
                         indices 5-6 and 7-8
                         antenna='5'; all baselines with antenna index
                         5
                         antenna='05'; all baselines with antenna
                         number 05 (VLA old name)
                         antenna='5,6,10'; all baselines with antennas
                         5,6,10 index numbers

                     Note: just for antenna selection, an integer (or
                     integer list) is converted to a string and
                     matched against the antenna 'name' first. Only if
                     that fails, the integer is matched with the
                     antenna ID. The latter is the case for most
                     observatories, where the antenna name is not
                     strictly an integer.
 </description>
                <value/>
        </param>

        <param subparam="true" name="scan" type="string">
<shortdescription>Scan number range</shortdescription>
<description>Scan number range
                     Subparameter of selectdata=True
                     default: '' = all

                     Check 'go listobs' to insure the scan numbers are
                     in order.
</description>
                <value/>
        </param>

        <param subparam="true" name="observation" type="any">
<shortdescription>Select by observation ID(s)</shortdescription>
<description>Select by observation ID(s)
                     Subparameter of selectdata=True
                     default: '' = all

                         Example: observation='0~2,4'
</description>
                <type>string</type><type>int</type>
                <value type="string"/>
        </param>

        <param subparam="true" name="msselect" type="string">
<shortdescription>Optional complex data selection (ignore for now)</shortdescription>
<description>Optional complex data selection (ignore for now)
</description>
                <value/>
        </param>

        <param name="solint" type="any">
<shortdescription>Solution interval: egs. \'inf\', \'60s\' (see help)</shortdescription>
<description>Solution interval (units optional)
                     default: 'inf' (~infinite, up to boundaries
                     controlled by combine)
                     Options: 'inf' (~infinite), 'int' (per
                     integration), any float or integer value with or
                     without units

                        Examples: solint='1min'; solint='60s';
                        solint=60 --&gt; 1 minute
                        solint='0s'; solint=0; solint='int' --&gt; per
                        integration
                        solint-'-1s'; solint='inf' --&gt; ~infinite, up
                        to boundaries -interacts with combine
</description>
                <any type="variant"/>
                <value type="string">inf</value>
        </param>

        <param name="combine" type="string">
<shortdescription>Data axes which to combine for solve (obs, scan, spw, and/or field)</shortdescription>
<description>Data axes which to combine for solve
                     default: '' (solutions will break at obs, scan,
                     field, and spw)
                     Options: '','obs','scan','spw',field', or any
                     comma-separated combination in a single string

                     For gaintype='K', if combine includes 'spw',
                     multi-band delays will be determined; otherwise,
                     (per-spw) single-band delays will be determined.

                        Example: combine='scan,spw' (extend solutions
                        over scan boundaries)
</description>
                <value/>
        </param>

        <param name="corrdepflags" type="bool">
<shortdescription>Respect correlation-dependent flags</shortdescription>
<description> If False (default), if any correlation is flagged, treat all correlations in
              the visibility vector as flagged when solving (per channel, per baseline).
              If True, use unflagged correlations in a visibility vector, even if one or more
              other correlations are flagged.
              
                     Default: False (treat correlation vectors with one or more correlations flagged as entirely flagged)
  
                     Traditionally, CASA has observed a strict interpretation of 
                     correlation-dependent flags: if one or more correlations 
                     (for any baseline and channel) is flagged, then all available 
                     correlations for the same baseline and channel are 
                     treated as flagged.  However, it is desirable in some 
                     circumstances to relax this stricture, e.g., to preserve use
                     of data from antennas with only one good polarization (e.g., one polarization
                     is bad or entirely absent).  Solutions for the bad or missing polarization 
                     will be rendered as flagged.

</description>
                <value>False</value>
        </param>

        <param name="append" type="bool">
<shortdescription>Append solutions to the (existing) table</shortdescription>
<description>Append solutions to the (existing) table
                     default: False (overwrite existing table or make
                     new table)

                     Appended solutions must be derived from the same
                     MS as the existing caltable, and solution spws
                     must have the same meta-info (according to spw
                     selection and solint) or be non-overlapping.
</description>
                <value>False</value>
        </param>

        <param name="docallib" type="bool">
<shortdescription>Use callib or traditional cal apply parameters</shortdescription>
<description>Control means of specifying the caltables
                     default: False --&gt; Use gaintable, gainfield,
                     interp, spwmap, calwt. 

                     If True, specify a file containing cal library in
                     callib
</description>
                <value>False</value>
        </param>

        <param subparam="true" name="callib" type="string">
<shortdescription>Cal Library filename</shortdescription>
<description>Cal Library filename
                     Subparameter of callib=True

                     If docallib=True, specify a file containing cal
                     library directives
</description>
                <value type="string"/>
        </param>

        <param subparam="true" name="gaintable" type="stringVec">
<shortdescription>Gain calibration table(s) to apply on the fly</shortdescription>
<description>Gain calibration table(s) to apply on the fly
                     Subparameter of callib=False
                     default: '' (none)

                        Examples: gaintable='ngc5921.gcal'
                        gaintable=['ngc5921.ampcal','ngc5921.phcal']
</description>
                <value/>
        </param>

        <param subparam="true" name="gainfield" type="stringVec">
<shortdescription>Select a subset of calibrators from gaintable(s)</shortdescription>
<description>Select a subset of calibrators from gaintable(s)
                     Subparameter of callib=False
                     default:'' --&gt; all sources in table
                     
                     gaintable='nearest' --&gt; nearest (on sky)
                     available field in table. Otherwise, same syntax
                     as field

                        Examples: 
                        gainfield='0~2,5' means use fields 0,1,2,5
                        from gaintable
                        gainfield=['0~3','4~6'] means use field 0
                        through 3 from first gain file, field 4
                        through 6 for second.
</description>
                <value/>
        </param>

        <param subparam="true" name="interp" type="stringVec">
<shortdescription>Interpolation parameters for each gaintable, as a list</shortdescription>
<description>Interpolation parmameters (in time[,freq]) for each gaintable, as a list of strings.
                     Default: '' --&gt; 'linear,linear' for all gaintable(s)
                     Options: Time: 'nearest', 'linear'
                              Freq: 'nearest', 'linear', 'cubic',
                              'spline'
                   Specify a list of strings, aligned with the list of caltable specified
                   in gaintable, that contain the required interpolation parameters
                   for each caltable.
                   * When frequency interpolation is relevant (B, Df,
                     Xf), separate time-dependent and freq-dependent
                     interp types with a comma (freq_after_ the
                     comma). 
                   * Specifications for frequency are ignored when the
                     calibration table has no channel-dependence. 
                   * Time-dependent interp options ending in 'PD'
                     enable a &quot;phase delay&quot; correction per spw for
                     non-channel-dependent calibration types.
                   * For multi-obsId datasets, 'perobs' can be
                     appended to the time-dependent interpolation
                     specification to enforce obsId boundaries when
                     interpolating in time. 
                   * Freq-dependent interp options can have 'flag' appended
                     to enforce channel-dependent flagging, and/or 'rel' 
                     appended to invoke relative frequency interpolation

                        Examples: 
                        interp='nearest' (in time, freq-dep will be
                        linear, if relevant)
                        interp='linear,cubic'  (linear in time, cubic
                        in freq)
                        interp='linearperobs,splineflag' (linear in
                        time per obsId, spline in freq with
                        channelized flagging)
                        interp='nearest,linearflagrel' (nearest in
                        time, linear in freq with with channelized 
                        flagging and relative-frequency interpolation)
                        interp=',spline'  (spline in freq; linear in
                        time by default)
                        interp=['nearest,spline','linear']  (for
                        multiple gaintables)
</description>
        <value/>
        </param>

        <param subparam="true" name="spwmap" type="intVec">
<shortdescription>Spectral windows combinations to form for gaintables(s)</shortdescription>
<description>Spectral windows combinations to form for gaintables(s)
                     Subparameter of callib=False
                     default: [] (apply solutions from each spw to
                     that spw only)

                        Examples:
                        spwmap=[0,0,1,1] means apply the caltable
                        solutions from spw = 0 to the spw 0,1 and spw
                        1 to spw 2,3.
                        spwmap=[[0,0,1,1],[0,1,0,1]]
</description>
                <type>any</type>
                <value/>
        </param>

   <constraints>
        <when param="selectdata">
                <equals value="True" type="bool">
                        <default param="timerange"><value type="string"/></default>
                        <default param="antenna"><value type="string"/></default>
                        <default param="scan"><value type="string"/></default>
                        <default param="observation"><value type="string"/></default>
                        <default param="msselect"><value type="string"/></default>
                </equals>
                <equals value="False" type="bool"/>
        </when>
        <when param="docallib">
                <equals value="False" type="bool">
                        <default param="gaintable"><value type="stringVec"/></default>
                        <default param="gainfield"><value type="stringVec"/></default>
                        <default param="interp"><value type="stringVec"/></default>
                        <default param="spwmap"><value type="intVec"/></default>
                </equals>
                <equals value="True" type="bool">
                        <default param="callib"><value type="string"/></default>
                </equals>
        </when>
   </constraints>
</input>
<example>
For more information, see the task pages of accor in CASA Docs:

https://casa.nrao.edu/casadocs/
</example> 

<returns>void</returns></task>
</casaxml>
