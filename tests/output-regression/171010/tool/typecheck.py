##################### generated by xml-casa (v2) ####################################
from __future__ import absolute_import
from CASAtools.__cerberus__ import Validator
import numpy
import os


class CasaValidator(Validator):

    def _validate_type_cInt(self,value):
        if isinstance(value,int):
            return True

    def _validate_type_cFloat(self,value):
        if isinstance(value,float):
            return True

    def _validate_type_cStr(self,value):
        if isinstance(value,str):
            return True

    def _validate_type_cPath(self,value):
        if isinstance(value,str) and os.path.exists(value):
            return True

    def _validate_type_cBool(self,value):
        if isinstance(value,bool):
            return True

    def _validate_type_cIntVec(self,value):
        if isinstance(value,list) and all([isinstance(e,int) for e in value]):
            return True

    def _validate_type_cFloatVec(self,value):
        if isinstance(value,list) and all([isinstance(e,float) for e in value]):
            return True

    def _validate_type_cStrVec(self,value):
        if isinstance(value,list) and all([isinstance(e,str) for e in value]):
            return True

    def _validate_type_cBoolVec(self,value):
        if isinstance(value,list) and all([isinstance(e,bool) for e in value]):
            return True

    def _validate_type_cDict(self,value):
        if isinstance(value,dict):
            return True

    def _validate_type_cVariant(self,value):
        if isinstance(value,str) or \
           isinstance(value,int) or \
           isinstance(value,bool) or \
           isinstance(value,dict) or \
           isinstance(value,list) or \
           isinstance(value,float) or \
           isinstance(value,numpy.ndarray):
            return True

    def _validate_type_ccoordsysTool(self,value):
        if isinstance(value,CASAtools.coordsys.coordsys):
            return True

    def _validate_type_cimageTool(self,value):
        if isinstance(value,CASAtools.image.image):
            return True

    def _validate_type_csynthesisimstoreTool(self,value):
        if isinstance(value,CASAtools.synthesisimstore.synthesisimstore):
            return True

validator = CasaValidator( )

