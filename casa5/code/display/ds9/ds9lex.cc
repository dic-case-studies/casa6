#line 2 "/Users/drs/develop/casa/code/build/display/ds9lex.cc"

#line 4 "/Users/drs/develop/casa/code/build/display/ds9lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* The c++ scanner is a mess. The display/ds9/ds9FlexLexer.h header file relies on the
 * following macro. This is required in order to pass the c++-multiple-scanners
 * test in the regression suite. We get reports that it breaks inheritance.
 * We will address this in a future release of flex, or omit the C++ scanner
 * altogether.
 */
#define yyFlexLexer ds9lex_FlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	int yy_bs_lineno; /**< The line count. */
	int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *ds9lex_alloc (yy_size_t  );
void *ds9lex_realloc (void *,yy_size_t  );
void ds9lex_free (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <display/ds9/ds9FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info {
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[489] = {
	0,
	0,    0,    2,    2,  143,  141,  137,  140,  141,  141,
	141,  141,  141,  112,  136,  136,  136,  136,  136,  136,
	136,  136,  136,  136,  136,  136,  136,   52,  136,  136,
	136,  136,  136,  136,  136,  136,  136,  109,  110,  141,
	141,    2,    1,  137,  138,    0,  133,    0,  134,    0,
	112,  114,  125,  123,  113,  112,    0,  136,  115,  136,
	136,  121,  119,  117,  136,  136,  136,  136,  136,  136,
	136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
	136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
	136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

	53,  136,   55,  136,  136,  136,  136,  136,  136,  136,
	136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
	136,  136,  139,    0,  135,    2,  114,  113,  115,    0,
	0,  121,  119,  117,  126,  124,  116,    0,  122,  120,
	118,  115,    0,  136,    0,  113,  136,  136,  136,  136,
	136,  136,  136,  136,   11,  136,  136,  136,  136,  136,
	136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
	136,   33,  136,  136,  136,  136,   37,   38,  136,  136,
	136,  136,  136,  136,  136,  136,  136,   47,  136,  136,
	54,  136,  136,   58,  136,  136,  136,  136,  136,  136,

	136,  136,   69,  136,  136,  136,  136,  136,  136,  136,
	136,   80,  136,  111,    0,  113,    0,    0,  114,    0,
	136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
	136,  136,  136,  136,  136,  136,  136,  136,   22,  136,
	136,  136,  136,  136,  136,   29,  136,  136,  136,  136,
	136,   39,  136,  136,  136,   43,  136,  136,  136,  136,
	49,   51,  136,  136,  136,  136,  136,  136,  136,  136,
	136,  136,  136,  136,   70,   73,   74,  136,  136,  136,
	136,  136,  107,   81,   82,   83,   84,   85,   86,   87,
	88,   89,   90,   91,   92,   93,   94,   95,   96,   97,

	98,   99,  100,  101,  102,  103,  104,  105,  106,  136,
	0,    0,    0,  127,    0,  136,    0,  136,  136,  136,
	136,  136,    7,    8,  136,   10,  136,  136,  136,  136,
	17,  136,  136,  136,   21,  136,   24,  136,  136,  136,
	136,  136,  136,  136,   34,   35,   36,  136,  136,  136,
	136,   46,  136,   48,  136,   56,  136,  136,   60,  136,
	136,  136,  136,  136,   66,  136,  136,  136,  136,  136,
	136,  136,  136,  136,  108,    0,    0,  128,  127,    0,
	0,  131,    0,    0,  129,  136,  136,    5,    6,  136,
	136,   13,  136,   15,  136,  136,   20,  136,  136,   26,

	136,  136,  136,  136,   32,  136,   41,  136,   44,  136,
	50,  136,   59,  136,  136,  136,   64,   65,   67,   68,
	136,  136,  136,  136,   77,   75,  136,  131,  129,  132,
	130,  136,    4,  136,  136,  136,  136,   18,  136,  136,
	25,  136,   28,  136,   30,  136,  136,   45,  136,   61,
	136,  136,  136,  136,  136,  136,   76,  136,  136,  136,
	14,   16,  136,   23,   27,   31,   40,   42,   57,  136,
	63,  136,  136,  136,   79,    3,  136,   12,   19,  136,
	71,  136,  136,    9,   62,   72,   78,    0
} ;

static yyconst flex_int32_t yy_ec[256] = {
	0,
	1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
	1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    2,    1,    5,    1,    1,    1,    1,    6,    1,
	1,    1,    7,    1,    7,    8,    1,    9,   10,   11,
	12,   13,   14,   15,   15,   15,   16,   17,    1,    1,
	1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
	24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
	34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
	1,   44,    1,    1,    1,    1,   45,   46,   47,   48,

	49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
	59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
	69,   70,   71,    1,   72,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1
} ;

static yyconst flex_int32_t yy_meta[73] = {
	0,
	1,    1,    2,    1,    3,    3,    1,    4,    4,    4,
	4,    4,    4,    4,    4,    4,    3,    3,    3,    3,
	3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
	3,    3,    3,    3,    3,    4,    3,    3,    3,    3,
	3,    3,    3,    1,    3,    3,    3,    3,    3,    3,
	3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
	3,    3,    4,    3,    3,    3,    3,    3,    3,    3,
	1,    1
} ;

static yyconst flex_int16_t yy_base[497] = {
	0,
	0,    0,  132,  129,  129, 4070,  126, 4070,  120,  117,
	115,   65,   73,   85,  109,  167,  218,  143,  276,  332,
	173,  189,  387,  119,  203,  249,  151,  226,  256,  428,
	147,  283,  322,  486,  216,  351,  404,  293,  357,   61,
	44,    0, 4070,  111, 4070,  107, 4070,  103, 4070,  455,
	541,  599, 4070, 4070,  657,  715,  486,  312,  773,  504,
	513,  361,  391,  397,  414,  431,  618,  528,  435,  567,
	575,  669,  590,  622,  741,  690,  683,  786,  845,  748,
	796,  580,  800,  806,  813,  828,  838,  471,  872,  887,
	880,  894,  902,  909,  915,  696,  919,  936,  941,  946,

	951,  965,  969,  975,  985, 1002,  992, 1008, 1024, 1029,
	1047, 1051, 1057, 1074, 1067, 1087, 1092, 1105, 1113, 1126,
	1130, 1151, 4070,   36, 4070,    0, 1206, 1260, 1170, 1181,
	1189, 4070, 4070, 4070, 4070, 4070, 4070, 1233, 4070, 4070,
	4070, 4070, 1287,   74, 1197, 1314, 1322, 1334, 1218, 1338,
	1348, 1159, 1342, 1352, 1245, 1356, 1377, 1383, 1403, 1407,
	1411, 1417, 1421, 1439, 1431, 1272, 1446, 1453, 1470, 1480,
	1486, 1494, 1501, 1514, 1508, 1521, 1528, 1541, 1546, 1561,
	1567, 1582, 1586, 1592, 1606, 1610, 1620, 1627, 1637, 1647,
	1655, 1662, 1668, 1672, 1676, 1682, 1686, 1700, 1718, 1724,

	1739, 1745, 1760, 1764, 1770, 1777, 1785, 1792, 1798, 1812,
	1816, 1871, 1851, 1829, 1933, 1851, 1941, 1963, 1971, 1991,
	2000, 2009, 2021, 2025, 2029, 2035, 2043, 1953, 2053, 2058,
	2080, 2086, 2094, 2109, 2063, 2113, 2131, 2138, 2151, 2145,
	2165, 2158, 2180, 2185, 2198, 1834, 2203, 2213, 2218, 2233,
	2243, 2251, 2265, 2269, 2284, 2288, 2292, 2298, 2311, 2316,
	2324, 2329, 2345, 2351, 2365, 2375, 2379, 2383, 2393, 2401,
	2408, 2414, 2428, 2438, 2445, 2418, 2451, 2464, 2481, 2486,
	2494, 2508, 2500, 2513, 2523, 2527, 2537, 2541, 2551, 2557,
	2561, 2565, 2571, 2575, 2579, 2585, 2589, 2593, 2599, 2603,

	2607, 2613, 2617, 2621, 2627, 2631, 2635, 2641, 2645, 2649,
	2667, 2676, 2684, 2694, 2702, 2711, 2719, 2767, 2734, 2747,
	2755, 2782, 2655, 2787, 2792, 2800, 2814, 2818, 2833, 2838,
	2851, 2856, 2864, 2877, 2869, 2885, 2891, 2898, 2904, 2908,
	2923, 2927, 2931, 2944, 2951, 2965, 2969, 2979, 2992, 2987,
	2997, 3012, 3017, 3022, 3027, 3044, 3049, 3062, 3066, 3070,
	3080, 3076, 3086, 3099, 3104, 3109, 3114, 3137, 3142, 3147,
	3170, 3174, 3180, 3152, 3197,  138,  150, 3215, 3223, 3234,
	3242, 3201, 3250, 3278, 3263, 3290, 3267, 3294, 3304, 3312,
	3317, 3330, 3334, 3340, 3350, 3357, 3367, 3371, 3384, 3388,

	3392, 3398, 3406, 3420, 3433, 3447, 3455, 3460, 3470, 3474,
	3478, 3484, 3498, 3502, 3508, 3522, 3526, 3530, 3536, 3544,
	3549, 3557, 3562, 3570, 3575, 3590, 3596, 4070, 4070, 4070,
	4070, 3603, 3618, 3623, 3628, 3636, 3641, 3660, 3664, 3668,
	3687, 3691, 3701, 3705, 3725, 3729, 3733, 3739, 3752, 3756,
	3760, 3779, 3766, 3783, 3797, 3801, 3819, 3824, 3829, 3834,
	3847, 3861, 3867, 3871, 3885, 3889, 3893, 3903, 3907, 3913,
	3917, 3921, 3927, 3931, 3941, 3945, 3961, 3968, 3975, 3981,
	3988, 3994, 3998, 4002, 4016, 4020, 4024, 4070, 4047, 4051,
	4055, 4057, 4061, 4065,  101,   99

} ;

static yyconst flex_int16_t yy_def[497] = {
	0,
	488,    1,  489,  489,  488,  488,  488,  488,  488,  490,
	491,  488,  488,  492,  492,  492,   16,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,   20,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  488,
	493,  494,  488,  488,  488,  490,  488,  491,  488,  488,
	488,  488,  488,  488,  488,  492,  488,  492,  492,   59,
	59,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  488,  493,  488,  494,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,   59,  488,   59,   59,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  488,  492,  492,  488,  488,  488,  488,  488,  488,
	59,   59,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	488,  488,  488,  488,  488,   59,  488,   59,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  495,  496,  488,  488,  488,
	488,  492,  488,  488,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  488,  488,  488,
	488,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
	492,  492,  492,  492,  492,  492,  492,    0,  488,  488,
	488,  488,  488,  488,  488,  488

} ;

static yyconst flex_int16_t yy_nxt[4143] = {
	0,
	6,    7,    8,    9,   10,   11,   12,   13,   14,   14,
	14,   14,   14,   14,   14,   14,    6,   15,   16,   17,
	18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
	28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
	38,   39,   31,   40,   15,   16,   17,   18,   19,   20,
	21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
	31,   32,   33,   34,   35,   36,   37,   38,   39,   31,
	41,    6,   50,   51,   51,   51,   51,   51,   51,   51,
	51,   52,   52,   52,   52,   52,   52,   52,   52,   53,
	54,  123,   55,   56,   56,   56,   56,   56,   56,   56,

	56,   57,  377,  221,  376,   59,   60,  125,   49,   61,
	62,   47,   44,  488,  488,  125,  488,   63,  123,   64,
	49,   47,   45,  488,  488,  488,  488,   44,  488,   97,
	221,   43,   59,   60,   43,  488,   61,   62,   65,   66,
	488,  488,  488,   67,   63,  381,   64,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  384,  488,  488,
	78,  488,  488,  488,   79,   65,   66,  488,   80,  488,
	67,  488,  488,  428,  488,  488,   68,  488,  488,  488,
	488,  488,  100,  488,   69,  429,  488,   78,   70,  488,
	90,   79,  488,  488,  488,   80,  488,  488,   71,   72,

	428,   91,  488,  488,  488,  488,  488,  488,  488,  100,
	488,   69,  429,  488,   92,   70,  488,   90,  488,  488,
	488,  488,  488,  488,   98,   71,   72,   58,   91,  488,
	488,  488,  488,  488,  488,   73,  488,  488,  488,   58,
	488,   92,  488,   74,  488,  488,  117,  488,  118,   75,
	76,   98,   77,  488,  488,  488,  488,  101,  488,  488,
	488,  488,   73,  488,  488,  488,   58,  488,  488,  488,
	74,  488,  488,  117,   99,  118,   75,   76,  102,   77,
	488,  488,  488,  488,  101,  488,  103,  488,  488,  488,
	488,  488,  488,  488,  488,   81,   82,  488,  488,  488,

	488,   99,  488,  488,   83,  102,   84,  488,   85,  488,
	488,  488,  488,  103,  109,  488,  488,  488,  488,  488,
	110,  488,   81,   82,  488,  488,  488,  488,  488,  488,
	488,   83,  488,   84,  488,   85,  488,  488,  488,  488,
	488,  109,  488,  111,  488,  488,  488,  110,  488,   86,
	488,  488,  488,  112,  488,  488,  488,   87,  488,   88,
	488,  488,  488,   89,  488,  488,  488,  488,  488,  488,
	111,  488,  119,  488,  488,  488,   86,  488,  122,  488,
	112,  488,  488,  488,   87,  488,   88,  488,  488,  488,
	89,  488,  488,  488,  488,  488,  488,  488,  488,  119,

	488,  488,  488,  488,  488,  122,   93,  488,  488,  488,
	94,  488,  488,  488,  488,  488,   95,   96,  488,  488,
	488,  488,  488,  120,  488,  488,  488,  488,  488,  121,
	488,  488,  488,   93,  488,  488,  488,   94,  488,  488,
	488,  488,  488,   95,   96,  104,  148,  488,  488,  488,
	120,  488,  105,  106,  153,   58,  121,  488,  488,  107,
	488,  149,  108,  127,  127,  127,  127,  127,  127,  127,
	127,  488,  104,  148,  488,  488,  488,  488,  488,  105,
	106,  153,   58,  177,  178,  488,  107,  488,  149,  108,
	488,  488,  488,  488,  143,  143,  143,  143,  143,  143,

	143,  143,  488,  113,  488,  488,  488,  114,  488,  488,
	145,  115,  146,  146,  146,  146,  146,  146,  146,  146,
	116,  147,  147,  147,  147,  147,  147,  147,  147,  488,
	113,  488,  488,  488,  114,  488,  488,  488,  115,  488,
	488,  488,  488,  152,  488,  488,  488,  116,  128,   51,
	51,   51,   51,   51,   51,   51,   51,   57,  488,  488,
	488,  129,  130,  488,  488,  131,  132,  488,  488,  488,
	488,  488,  488,  133,  488,  134,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  129,  130,
	154,  488,  131,  132,  488,  488,  488,  488,  488,  488,

	133,  488,  134,  135,  136,  170,  488,   52,   52,   52,
	52,   52,   52,   52,   52,  155,  488,  154,  157,  137,
	138,  488,  488,  488,  139,  488,  488,  488,  488,  488,
	488,  140,  170,  141,  488,  488,  488,  150,  488,  488,
	488,  488,  155,  488,  488,  157,  137,  138,  488,  488,
	488,  139,  151,  488,  488,  488,  158,  488,  140,  488,
	141,   53,   54,  488,  150,   52,   52,   52,   52,   52,
	52,   52,   52,  488,  488,  488,  488,  142,  130,  151,
	488,  488,  132,  158,  488,  488,  156,  488,  488,  133,
	488,  134,  488,  488,  488,  488,  488,  488,  488,  488,

	488,  488,  488,  488,  142,  130,  488,  161,  488,  132,
	488,  488,  488,  156,  162,  186,  133,  488,  134,   53,
	54,  488,   55,   56,   56,   56,   56,   56,   56,   56,
	56,   57,  488,  488,  161,   59,   60,  488,  488,   61,
	62,  162,  186,  488,  488,  488,  488,   63,  488,   64,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,   59,   60,  488,  168,   61,   62,  488,  159,
	160,  488,  488,  488,   63,  488,   64,  488,  488,  488,
	488,  144,  144,  144,  144,  144,  144,  144,  144,  488,
	488,  488,  168,  488,  488,  488,  159,  160,  488,  488,

	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  163,  488,  488,  169,  488,  172,  488,  171,  488,
	173,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  163,  488,
	488,  169,  488,  172,  488,  171,  174,  173,  488,  175,
	488,  488,  488,  164,  488,  488,  488,  488,  165,  488,
	488,  488,  488,  166,  488,  488,  488,  488,  176,  488,
	488,  167,  488,  174,  488,  488,  175,  488,  488,  488,
	164,  488,  488,  488,  488,  165,  488,  488,  488,  488,

	166,  488,  179,  488,  488,  176,  488,  488,  167,  488,
	488,  181,  488,  488,  488,  180,  488,  182,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  187,  488,  179,
	488,  488,  185,  488,  488,  488,  183,  488,  181,  184,
	488,  488,  180,  488,  182,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  185,
	488,  488,  488,  183,  488,  488,  184,  488,  488,  488,
	488,  189,  488,  488,  488,  488,  488,  188,  488,  488,
	488,  488,  488,  488,  190,  488,  488,  191,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  189,  488,

	488,  488,  488,  488,  188,  192,  488,  488,  488,  488,
	488,  190,  488,  488,  191,  488,  488,  196,  488,  488,
	197,  488,  488,  194,  488,  488,  193,  488,  488,  488,
	488,  488,  192,  488,  488,  488,  488,  488,  488,  198,
	488,  488,  195,  488,  196,  488,  488,  197,  488,  488,
	194,  488,  488,  193,  488,  488,  488,  200,  488,  488,
	199,  488,  488,  488,  488,  488,  198,  488,  488,  195,
	488,  488,  488,  488,  488,  201,  488,  488,  488,  488,
	203,  488,  488,  488,  200,  488,  488,  199,  202,  488,
	488,  488,  488,  488,  488,  205,  488,  488,  488,  488,

	488,  488,  201,  488,  488,  488,  488,  203,  488,  488,
	488,  488,  488,  488,  204,  202,  207,  488,  488,  488,
	488,  488,  205,  488,  206,  209,  488,  208,  488,  488,
	488,  488,  210,  488,  488,  488,  488,  488,  488,  488,
	488,  204,  488,  207,  488,  488,  488,  211,  488,  488,
	213,  206,  209,  488,  208,  488,  488,  488,  488,  210,
	488,  212,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  228,  488,  211,  488,  488,  213,  215,  215,
	215,  215,  215,  215,  215,  215,  214,  145,  212,  216,
	216,  216,  216,  216,  216,  216,  216,  217,  217,  217,

	217,  217,  217,  217,  217,  216,  216,  216,  216,  216,
	216,  216,  216,  214,  127,  127,  127,  127,  127,  127,
	127,  127,  488,  488,  488,  488,  137,  138,  488,  488,
	488,  139,  488,  488,  488,  488,  488,  488,  140,  218,
	141,  219,  219,  219,  219,  219,  219,  219,  219,  488,
	488,  488,  488,  137,  138,  224,  488,  488,  139,  488,
	488,  488,  488,  488,  231,  140,  488,  141,  127,  127,
	127,  127,  127,  127,  127,  127,  488,  488,  488,  488,
	142,  130,  224,  488,  488,  132,  488,  488,  488,  488,
	488,  231,  133,  242,  134,  143,  143,  143,  143,  143,

	143,  143,  143,  220,  488,  488,  488,  142,  130,  488,
	488,  488,  132,  488,  488,  488,  488,  488,  488,  133,
	242,  134,  146,  146,  146,  146,  146,  146,  146,  146,
	147,  147,  147,  147,  147,  147,  147,  147,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  222,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  223,  488,  488,  488,  488,  225,  488,  229,
	488,  488,  488,  226,  488,  488,  488,  230,  222,  227,
	488,  488,  488,  488,  488,  488,  232,  488,  488,  223,
	488,  488,  488,  488,  225,  488,  229,  488,  488,  488,

	226,  488,  234,  488,  230,  233,  227,  488,  488,  488,
	488,  488,  488,  232,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  234,
	488,  488,  233,  488,  235,  488,  488,  488,  488,  236,
	488,  237,  488,  488,  488,  239,  488,  488,  488,  488,
	488,  488,  238,  488,  488,  488,  488,  488,  488,  488,
	488,  235,  488,  488,  488,  241,  236,  243,  237,  488,
	488,  488,  239,  488,  488,  488,  240,  488,  488,  238,
	488,  488,  244,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  241,  488,  243,  245,  488,  488,  488,  488,

	488,  488,  488,  240,  488,  488,  488,  488,  488,  244,
	488,  247,  488,  488,  488,  488,  246,  488,  488,  488,
	488,  488,  245,  488,  488,  488,  488,  488,  488,  488,
	488,  248,  488,  488,  488,  488,  250,  488,  247,  488,
	488,  488,  251,  246,  488,  488,  488,  488,  488,  249,
	488,  488,  488,  488,  488,  488,  488,  488,  248,  488,
	488,  488,  488,  250,  488,  488,  488,  488,  488,  251,
	488,  488,  488,  488,  488,  488,  249,  488,  253,  488,
	488,  488,  252,  488,  488,  254,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

	488,  488,  488,  488,  488,  253,  255,  488,  488,  252,
	488,  488,  254,  488,  488,  488,  488,  488,  488,  488,
	488,  256,  488,  257,  488,  488,  488,  488,  260,  258,
	488,  488,  488,  255,  488,  488,  488,  488,  259,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  256,  488,
	257,  488,  488,  488,  488,  488,  258,  488,  261,  488,
	488,  488,  488,  488,  488,  259,  488,  488,  262,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  263,  488,  488,  261,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  262,  488,  265,  488,  488,

	488,  488,  488,  264,  488,  488,  488,  488,  488,  263,
	488,  488,  266,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  265,  488,  268,  267,  488,  488,
	264,  488,  269,  488,  488,  270,  271,  488,  488,  266,
	488,  488,  488,  488,  488,  272,  488,  488,  488,  488,
	488,  488,  488,  268,  267,  488,  488,  488,  488,  269,
	273,  488,  270,  271,  488,  488,  488,  488,  488,  488,
	488,  488,  272,  488,  488,  488,  488,  488,  488,  274,
	488,  488,  488,  488,  488,  488,  488,  273,  488,  488,
	488,  276,  488,  488,  488,  488,  488,  488,  277,  488,

	275,  488,  488,  488,  488,  488,  274,  488,  488,  488,
	278,  488,  488,  279,  488,  280,  488,  488,  276,  488,
	488,  488,  488,  488,  488,  277,  488,  275,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  278,  488,  488,
	279,  488,  280,  488,  488,  488,  488,  488,  281,  488,
	488,  282,  488,  488,  488,  488,  488,  488,  488,  216,
	216,  216,  216,  216,  216,  216,  216,  488,  488,  488,
	488,  488,  488,  488,  488,  281,  488,  488,  282,  283,
	58,   58,   58,   58,   58,   58,   58,  310,  284,  285,
	286,  287,  288,  289,  290,  291,  292,  293,  294,  295,

	296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
	306,  307,  308,  309,  310,  284,  285,  286,  287,  288,
	289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
	299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
	309,  215,  215,  215,  215,  215,  215,  215,  215,  217,
	217,  217,  217,  217,  217,  217,  217,  488,  488,  488,
	488,  324,  311,  488,  488,  488,  488,  488,  488,  488,
	312,  219,  219,  219,  219,  219,  219,  219,  219,  219,
	219,  219,  219,  219,  219,  219,  219,  488,  488,  311,
	488,  488,  488,  488,  488,  488,  488,  312,  313,  314,

	314,  314,  314,  314,  314,  314,  314,  315,  316,  316,
	316,  316,  316,  316,  316,  316,  317,  318,  318,  318,
	318,  318,  318,  318,  318,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  319,  488,  488,  488,
	488,  488,  488,  320,  321,  488,  322,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  319,  488,  488,  325,  488,  488,  488,
	320,  321,  323,  322,  488,  488,  488,  488,  326,  488,
	488,  488,  488,  488,  488,  488,  488,  331,  488,  488,

	488,  488,  488,  325,  488,  327,  328,  488,  488,  323,
	488,  488,  329,  488,  488,  326,  488,  488,  488,  488,
	488,  488,  488,  488,  331,  488,  488,  488,  488,  488,
	332,  488,  327,  328,  488,  488,  488,  330,  488,  329,
	488,  488,  488,  488,  333,  488,  488,  488,  488,  488,
	488,  334,  488,  488,  488,  488,  488,  332,  488,  488,
	488,  488,  488,  488,  330,  488,  488,  488,  337,  488,
	488,  333,  488,  335,  488,  488,  488,  488,  334,  336,
	488,  488,  488,  488,  488,  488,  338,  488,  488,  488,
	488,  488,  488,  488,  339,  337,  488,  488,  488,  340,

	335,  488,  488,  488,  488,  488,  336,  488,  488,  488,
	488,  488,  488,  338,  488,  488,  341,  488,  488,  488,
	488,  339,  488,  488,  488,  488,  340,  488,  488,  488,
	342,  488,  488,  344,  488,  343,  488,  488,  488,  345,
	488,  488,  488,  341,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  346,  488,  488,  488,  342,  488,  488,
	344,  488,  343,  347,  488,  488,  345,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	346,  488,  488,  488,  348,  488,  349,  488,  488,  488,
	347,  488,  488,  488,  488,  488,  488,  488,  488,  488,

	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  348,  350,  349,  488,  488,  488,  488,  488,  352,
	488,  488,  488,  488,  354,  488,  351,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  350,
	488,  355,  488,  488,  488,  488,  352,  488,  353,  488,
	488,  488,  488,  351,  488,  488,  488,  488,  488,  488,
	488,  488,  356,  488,  488,  488,  488,  488,  355,  488,
	488,  488,  488,  488,  488,  353,  357,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  356,
	488,  488,  488,  358,  488,  488,  488,  488,  488,  488,

	488,  488,  360,  357,  361,  488,  488,  488,  488,  488,
	488,  359,  488,  488,  362,  488,  488,  488,  488,  488,
	358,  488,  488,  488,  488,  488,  488,  488,  488,  360,
	488,  361,  488,  488,  488,  488,  488,  363,  359,  364,
	488,  362,  488,  488,  488,  488,  488,  366,  365,  488,
	488,  488,  488,  488,  488,  488,  488,  367,  488,  488,
	488,  488,  368,  488,  363,  488,  364,  488,  488,  488,
	488,  488,  488,  488,  366,  365,  488,  488,  488,  369,
	488,  488,  488,  488,  367,  488,  488,  370,  488,  368,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

	488,  488,  488,  488,  488,  488,  369,  488,  488,  371,
	488,  488,  488,  488,  370,  488,  488,  488,  488,  488,
	488,  488,  372,  488,  488,  373,  488,  488,  488,  488,
	488,  488,  488,  374,  488,  488,  371,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  372,
	488,  488,  373,  488,  488,  488,  488,  488,  488,  488,
	374,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  375,  315,  376,  376,  376,  376,  376,
	376,  376,  376,  317,  377,  377,  377,  377,  377,  377,
	377,  377,  378,  378,  378,  378,  378,  378,  378,  378,

	375,  379,  314,  314,  314,  314,  314,  314,  314,  314,
	380,  380,  380,  380,  380,  380,  380,  380,  381,  316,
	316,  316,  316,  316,  316,  316,  316,  383,  383,  383,
	383,  383,  383,  383,  383,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  382,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  386,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  382,  384,  318,  318,  318,  318,  318,
	318,  318,  318,  386,  387,  388,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

	488,  389,  385,  488,  488,  488,  488,  488,  488,  488,
	488,  387,  388,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  390,  488,  389,  385,
	488,  488,  488,  488,  488,  392,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  391,  488,
	393,  488,  488,  390,  488,  488,  488,  488,  488,  394,
	488,  488,  392,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  391,  488,  393,  488,  488,
	488,  488,  488,  488,  488,  488,  394,  488,  488,  488,
	488,  395,  488,  488,  397,  488,  488,  488,  488,  396,

	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	398,  488,  488,  488,  488,  488,  488,  488,  395,  399,
	488,  397,  488,  488,  488,  400,  396,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  398,  488,  488,
	488,  488,  488,  488,  401,  488,  399,  488,  488,  488,
	488,  488,  400,  402,  488,  488,  488,  488,  488,  488,
	488,  405,  488,  403,  488,  488,  404,  488,  488,  488,
	488,  401,  488,  488,  488,  488,  488,  488,  488,  488,
	402,  488,  488,  488,  488,  488,  488,  488,  405,  488,
	403,  488,  488,  404,  488,  488,  488,  488,  488,  488,

	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  408,  488,  488,  406,  488,  488,  409,  488,
	407,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  410,  488,  408,
	488,  488,  406,  488,  488,  409,  488,  407,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  411,  488,  488,  410,  488,  488,  488,  412,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  411,  488,
	488,  488,  488,  488,  488,  412,  488,  413,  488,  415,

	488,  414,  488,  488,  488,  488,  488,  417,  488,  488,
	416,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  413,  488,  415,  488,  414,  488,
	488,  488,  488,  488,  417,  420,  488,  416,  488,  418,
	488,  488,  488,  488,  488,  419,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  420,  488,  488,  488,  418,  421,  488,  488,
	488,  423,  419,  422,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  427,  488,  488,  488,  488,  488,  488,
	488,  424,  488,  488,  421,  425,  488,  488,  423,  488,

	422,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	427,  488,  488,  488,  426,  488,  488,  488,  424,  488,
	488,  488,  425,  378,  378,  378,  378,  378,  378,  378,
	378,  378,  378,  378,  378,  378,  378,  378,  378,  488,
	488,  426,  380,  380,  380,  380,  380,  380,  380,  380,
	380,  380,  380,  380,  380,  380,  380,  380,  383,  383,
	383,  383,  383,  383,  383,  383,  488,  488,  488,  430,
	488,  488,  488,  488,  488,  488,  488,  428,  488,  488,
	488,  488,  488,  488,  488,  431,  383,  383,  383,  383,
	383,  383,  383,  383,  488,  488,  430,  488,  488,  488,

	488,  488,  433,  488,  428,  488,  488,  488,  488,  488,
	488,  488,  431,  429,  488,  432,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  433,
	488,  488,  488,  488,  488,  488,  435,  488,  488,  488,
	429,  488,  432,  434,  488,  488,  488,  488,  488,  488,
	488,  437,  488,  436,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  435,  488,  488,  488,  488,  488,  488,
	434,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	436,  488,  439,  488,  488,  438,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

	488,  488,  488,  488,  488,  488,  440,  488,  488,  439,
	488,  488,  438,  488,  488,  488,  488,  488,  443,  441,
	488,  488,  488,  442,  488,  488,  488,  488,  488,  488,
	488,  444,  488,  440,  488,  488,  488,  488,  488,  488,
	488,  445,  488,  488,  488,  443,  441,  488,  488,  488,
	442,  488,  488,  488,  488,  488,  488,  488,  444,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  445,  488,
	488,  488,  446,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  448,  447,  488,  488,  446,

	488,  449,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  448,  447,  488,  488,  488,  488,  449,  488,
	488,  488,  450,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  451,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  452,  450,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  451,  453,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  452,  488,  488,  488,  456,
	455,  488,  488,  454,  488,  488,  488,  488,  488,  453,

	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  456,  455,  488,  488,
	454,  488,  488,  488,  458,  488,  457,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  458,  488,  457,  488,  488,  460,  488,  488,  488,
	459,  462,  488,  461,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  460,  488,  488,  488,  459,  462,  488,
	461,  488,  488,  488,  488,  488,  488,  488,  488,  488,

	463,  488,  488,  488,  464,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  466,  465,  488,  463,  488,  488,
	488,  464,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  467,  488,
	488,  466,  465,  488,  468,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  467,  488,  488,  488,  488,
	469,  468,  488,  488,  488,  470,  488,  488,  488,  488,
	488,  488,  488,  488,  472,  488,  488,  488,  488,  488,

	473,  488,  488,  488,  488,  488,  488,  469,  488,  488,
	488,  488,  470,  488,  488,  488,  488,  488,  488,  488,
	471,  472,  474,  488,  488,  488,  488,  473,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  475,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  471,  488,  474,
	488,  488,  488,  488,  488,  478,  488,  488,  476,  477,
	488,  488,  488,  488,  475,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  478,  488,  488,  476,  477,  488,  479,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  479,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  481,  488,  480,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  482,  488,  488,  488,  483,  488,  481,
	488,  480,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  484,  488,  488,  488,  488,  488,  488,  488,  488,
	482,  488,  488,  488,  483,  488,  488,  488,  488,  488,

	488,  488,  488,  488,  488,  488,  488,  488,  484,  488,
	488,  485,  488,  488,  488,  486,  488,  488,  488,  487,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  485,  488,
	488,  488,  486,  488,  488,  488,  487,   42,   42,   42,
	42,   46,  488,   46,   46,   48,  488,   48,   48,   58,
	58,  124,  488,  124,  124,  126,  488,  126,  126,    5,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488
} ;

static yyconst flex_int16_t yy_chk[4143] = {
	0,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,   12,   12,   12,   12,   12,   12,   12,   12,
	12,   13,   13,   13,   13,   13,   13,   13,   13,   14,
	14,   40,   14,   14,   14,   14,   14,   14,   14,   14,

	14,   14,  496,  144,  495,   14,   14,  124,   48,   14,
	14,   46,   44,   15,   15,   41,   15,   14,   40,   14,
	11,   10,    9,   24,   24,   15,   24,    7,    5,   24,
	144,    4,   14,   14,    3,   24,   14,   14,   15,   15,
	0,    0,    0,   15,   14,  376,   14,   18,   18,    0,
	18,   31,   31,    0,   31,   27,   27,  377,   27,   18,
	18,    0,    0,   31,   18,   15,   15,   27,   18,    0,
	15,   16,   16,  376,   16,    0,   16,   21,   21,    0,
	21,    0,   27,   16,   16,  377,    0,   18,   16,   21,
	21,   18,    0,   22,   22,   18,   22,    0,   16,   16,

	376,   21,    0,    0,    0,   22,    0,   25,   25,   27,
	25,   16,  377,    0,   22,   16,    0,   21,    0,   25,
	35,   35,    0,   35,   25,   16,   16,   17,   21,    0,
	28,   28,   35,   28,    0,   17,    0,    0,    0,   17,
	0,   22,   28,   17,    0,    0,   35,    0,   35,   17,
	17,   25,   17,   26,   26,    0,   26,   28,    0,    0,
	29,   29,   17,   29,    0,   26,   17,    0,    0,    0,
	17,    0,   29,   35,   26,   35,   17,   17,   29,   17,
	19,   19,    0,   19,   28,    0,   29,   32,   32,    0,
	32,    0,   19,    0,    0,   19,   19,   38,   38,   32,

	38,   26,    0,    0,   19,   29,   19,    0,   19,   38,
	0,    0,    0,   29,   32,    0,   58,   58,    0,   58,
	32,    0,   19,   19,    0,    0,   33,   33,   58,   33,
	0,   19,    0,   19,    0,   19,   20,   20,   33,   20,
	0,   32,    0,   33,    0,    0,    0,   32,   20,   20,
	0,    0,    0,   33,    0,   36,   36,   20,   36,   20,
	0,   39,   39,   20,   39,   62,   62,   36,   62,    0,
	33,    0,   36,   39,    0,    0,   20,   62,   39,    0,
	33,    0,    0,    0,   20,    0,   20,    0,    0,    0,
	20,   23,   23,    0,   23,   63,   63,    0,   63,   36,

	0,   64,   64,   23,   64,   39,   23,   63,   37,   37,
	23,   37,    0,   64,    0,    0,   23,   23,   65,   65,
	37,   65,    0,   37,    0,    0,    0,    0,    0,   37,
	65,    0,    0,   23,    0,   66,   66,   23,   66,   69,
	69,    0,   69,   23,   23,   30,   65,   66,    0,    0,
	37,   69,   30,   30,   69,   30,   37,    0,    0,   30,
	0,   66,   30,   50,   50,   50,   50,   50,   50,   50,
	50,    0,   30,   65,    0,   88,   88,    0,   88,   30,
	30,   69,   30,   88,   88,    0,   30,   88,   66,   30,
	34,   34,    0,   34,   57,   57,   57,   57,   57,   57,

	57,   57,   34,   34,    0,    0,    0,   34,    0,    0,
	60,   34,   60,   60,   60,   60,   60,   60,   60,   60,
	34,   61,   61,   61,   61,   61,   61,   61,   61,    0,
	34,    0,   68,   68,   34,   68,    0,    0,   34,    0,
	0,    0,    0,   68,   68,    0,    0,   34,   51,   51,
	51,   51,   51,   51,   51,   51,   51,   51,    0,    0,
	0,   51,   51,    0,    0,   51,   51,    0,    0,    0,
	0,   70,   70,   51,   70,   51,    0,    0,    0,   71,
	71,    0,   71,   70,   82,   82,    0,   82,   51,   51,
	70,   71,   51,   51,   73,   73,   82,   73,    0,    0,

	51,    0,   51,   52,   52,   82,   73,   52,   52,   52,
	52,   52,   52,   52,   52,   71,    0,   70,   73,   52,
	52,    0,   67,   67,   52,   67,   74,   74,    0,   74,
	0,   52,   82,   52,   67,    0,    0,   67,   74,    0,
	0,    0,   71,    0,    0,   73,   52,   52,    0,    0,
	0,   52,   67,    0,    0,    0,   74,    0,   52,    0,
	52,   55,   55,    0,   67,   55,   55,   55,   55,   55,
	55,   55,   55,   72,   72,    0,   72,   55,   55,   67,
	0,    0,   55,   74,    0,   72,   72,   77,   77,   55,
	77,   55,    0,    0,   76,   76,    0,   76,    0,   77,

	96,   96,    0,   96,   55,   55,   76,   76,    0,   55,
	0,    0,   96,   72,   77,   96,   55,    0,   55,   56,
	56,    0,   56,   56,   56,   56,   56,   56,   56,   56,
	56,   56,    0,    0,   76,   56,   56,    0,    0,   56,
	56,   77,   96,    0,    0,   75,   75,   56,   75,   56,
	0,    0,   80,   80,    0,   80,    0,   75,    0,    0,
	0,    0,   56,   56,   80,   80,   56,   56,    0,   75,
	75,    0,    0,    0,   56,    0,   56,   59,   59,    0,
	59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
	78,   78,   80,   78,    0,    0,   75,   75,    0,    0,

	81,   81,   78,   81,   83,   83,    0,   83,    0,    0,
	84,   84,   81,   84,    0,    0,   83,   85,   85,    0,
	85,   78,   84,    0,   81,    0,   84,    0,   83,   85,
	85,    0,   86,   86,    0,   86,    0,    0,    0,    0,
	0,    0,   87,   87,   86,   87,    0,    0,   78,   79,
	79,   81,   79,   84,   87,   83,   86,   85,    0,   87,
	0,   79,    0,   79,    0,    0,    0,    0,   79,    0,
	0,    0,    0,   79,    0,    0,   89,   89,   87,   89,
	0,   79,    0,   86,   91,   91,   87,   91,   89,    0,
	79,   90,   90,    0,   90,   79,   91,    0,   92,   92,

	79,   92,   89,   90,    0,   87,   93,   93,   79,   93,
	92,   91,    0,   94,   94,   90,   94,   92,   93,   95,
	95,    0,   95,   97,   97,   94,   97,   97,    0,   89,
	0,   95,   95,    0,    0,   97,   93,    0,   91,   94,
	98,   98,   90,   98,   92,   99,   99,    0,   99,    0,
	100,  100,   98,  100,    0,  101,  101,   99,  101,   95,
	0,    0,  100,   93,    0,    0,   94,  101,    0,  102,
	102,   99,  102,  103,  103,    0,  103,   98,    0,  104,
	104,  102,  104,    0,  100,  103,    0,  102,    0,  105,
	105,  104,  105,    0,    0,    0,  107,  107,   99,  107,

	0,  105,    0,    0,   98,  104,  106,  106,  107,  106,
	0,  100,  108,  108,  102,  108,    0,  107,  106,    0,
	107,    0,    0,  106,  108,    0,  105,    0,  109,  109,
	0,  109,  104,  110,  110,    0,  110,    0,    0,  108,
	109,    0,  106,    0,  107,  110,    0,  107,    0,    0,
	106,  111,  111,  105,  111,  112,  112,  110,  112,    0,
	109,  113,  113,  111,  113,    0,  108,  112,    0,  106,
	0,  115,  115,  113,  115,  111,    0,    0,  114,  114,
	113,  114,    0,  115,  110,    0,    0,  109,  112,    0,
	114,  116,  116,    0,  116,  115,  117,  117,    0,  117,

	0,    0,  111,  116,    0,    0,    0,  113,  117,  118,
	118,    0,  118,    0,  114,  112,  117,  119,  119,    0,
	119,  118,  115,    0,  116,  118,    0,  117,    0,  119,
	120,  120,  119,  120,  121,  121,    0,  121,    0,    0,
	0,  114,  120,  117,    0,    0,  121,  119,    0,    0,
	121,  116,  118,    0,  117,  122,  122,    0,  122,  119,
	0,  120,    0,  152,  152,    0,  152,  122,    0,    0,
	0,    0,  152,    0,  119,  152,    0,  121,  129,  129,
	129,  129,  129,  129,  129,  129,  122,  130,  120,  130,
	130,  130,  130,  130,  130,  130,  130,  131,  131,  131,

	131,  131,  131,  131,  131,  145,  145,  145,  145,  145,
	145,  145,  145,  122,  127,  127,  127,  127,  127,  127,
	127,  127,  149,  149,    0,  149,  127,  127,    0,    0,
	0,  127,    0,    0,  149,    0,    0,    0,  127,  138,
	127,  138,  138,  138,  138,  138,  138,  138,  138,  155,
	155,    0,  155,  127,  127,  149,    0,    0,  127,    0,
	0,  155,    0,    0,  155,  127,    0,  127,  128,  128,
	128,  128,  128,  128,  128,  128,  166,  166,    0,  166,
	128,  128,  149,    0,    0,  128,    0,    0,  166,    0,
	0,  155,  128,  166,  128,  143,  143,  143,  143,  143,

	143,  143,  143,  143,    0,    0,    0,  128,  128,    0,
	0,    0,  128,    0,    0,    0,    0,    0,    0,  128,
	166,  128,  146,  146,  146,  146,  146,  146,  146,  146,
	147,  147,  147,  147,  147,  147,  147,  147,  148,  148,
	0,  148,  150,  150,    0,  150,  153,  153,    0,  153,
	148,  147,  151,  151,  150,  151,  154,  154,  153,  154,
	156,  156,  148,  156,  151,    0,    0,  150,  154,  153,
	0,    0,  156,  150,    0,    0,    0,  154,  147,  151,
	0,  157,  157,    0,  157,    0,  156,  158,  158,  148,
	158,    0,    0,  157,  150,    0,  153,    0,    0,  158,

	150,    0,  158,    0,  154,  157,  151,  159,  159,    0,
	159,  160,  160,  156,  160,  161,  161,    0,  161,  159,
	0,  162,  162,  160,  162,  163,  163,  161,  163,  158,
	0,    0,  157,  162,  159,  165,  165,  163,  165,  160,
	0,  161,    0,  164,  164,  163,  164,  165,    0,    0,
	167,  167,  162,  167,    0,  164,    0,  168,  168,    0,
	168,  159,  167,    0,    0,  165,  160,  167,  161,  168,
	0,    0,  163,    0,  169,  169,  164,  169,    0,  162,
	0,    0,  168,    0,  170,  170,  169,  170,    0,    0,
	171,  171,  165,  171,  167,  169,  170,    0,  172,  172,

	0,  172,  171,  164,    0,  173,  173,    0,  173,  168,
	172,  171,  175,  175,    0,  175,  170,  173,  174,  174,
	0,  174,  169,    0,  175,  176,  176,    0,  176,    0,
	174,  173,  177,  177,    0,  177,  175,  176,  171,    0,
	0,    0,  176,  170,  177,  178,  178,    0,  178,  174,
	179,  179,    0,  179,    0,    0,    0,  178,  173,    0,
	0,    0,  179,  175,    0,  180,  180,    0,  180,  176,
	0,  181,  181,    0,  181,    0,  174,  180,  180,    0,
	0,    0,  179,  181,    0,  181,  182,  182,    0,  182,
	183,  183,    0,  183,    0,    0,  184,  184,  182,  184,

	0,    0,  183,    0,    0,  180,  182,    0,  184,  179,
	185,  185,  181,  185,  186,  186,    0,  186,    0,    0,
	0,  183,  185,  184,  187,  187,  186,  187,  187,  185,
	0,  188,  188,  182,  188,    0,  187,    0,  186,    0,
	0,  189,  189,  188,  189,    0,    0,    0,  183,    0,
	184,  190,  190,  189,  190,    0,  185,    0,  189,  191,
	191,    0,  191,  190,    0,  186,  192,  192,  190,  192,
	0,  191,  193,  193,    0,  193,  194,  194,  192,  194,
	195,  195,  192,  195,  193,  189,  196,  196,  194,  196,
	197,  197,  195,  197,    0,  190,    0,  195,  196,    0,

	0,    0,  197,  193,  198,  198,    0,  198,    0,  192,
	0,    0,  196,    0,    0,    0,  198,    0,    0,    0,
	0,    0,  199,  199,  195,  199,  198,  197,  200,  200,
	193,  200,  198,    0,  199,  199,  199,    0,    0,  196,
	200,    0,    0,  201,  201,  200,  201,    0,    0,  202,
	202,    0,  202,  198,  197,  201,    0,    0,    0,  198,
	201,  202,  199,  199,  203,  203,    0,  203,  204,  204,
	0,  204,  200,    0,  205,  205,  203,  205,    0,  202,
	204,  206,  206,    0,  206,    0,  205,  201,    0,  207,
	207,  205,  207,  206,    0,    0,  208,  208,  206,  208,

	204,  207,  209,  209,    0,  209,  202,    0,  208,    0,
	207,    0,    0,  208,  209,  209,  210,  210,  205,  210,
	211,  211,    0,  211,    0,  206,    0,  204,  210,    0,
	0,    0,  211,  214,  214,    0,  214,  207,  246,  246,
	208,  246,  209,    0,    0,  214,    0,    0,  210,    0,
	246,  211,    0,    0,    0,  213,  213,    0,  213,  216,
	216,  216,  216,  216,  216,  216,  216,  213,    0,    0,
	0,    0,    0,    0,    0,  210,    0,    0,  211,  212,
	212,  212,  212,  212,  212,  212,  212,  213,  212,  212,
	212,  212,  212,  212,  212,  212,  212,  212,  212,  212,

	212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
	212,  212,  212,  212,  213,  212,  212,  212,  212,  212,
	212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
	212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
	212,  215,  215,  215,  215,  215,  215,  215,  215,  217,
	217,  217,  217,  217,  217,  217,  217,  228,  228,    0,
	228,  228,  215,    0,    0,    0,    0,    0,    0,  228,
	217,  218,  218,  218,  218,  218,  218,  218,  218,  219,
	219,  219,  219,  219,  219,  219,  219,    0,    0,  215,
	0,    0,    0,    0,    0,    0,    0,  217,  220,  220,

	220,  220,  220,  220,  220,  220,  220,  221,  221,  221,
	221,  221,  221,  221,  221,  221,  222,  222,  222,  222,
	222,  222,  222,  222,  222,  223,  223,    0,  223,  224,
	224,    0,  224,  225,  225,    0,  225,  223,    0,  226,
	226,  224,  226,    0,    0,  225,  223,  227,  227,    0,
	227,  226,    0,  224,  225,    0,  226,  229,  229,  227,
	229,    0,  230,  230,    0,  230,    0,  235,  235,  229,
	235,    0,    0,  223,  230,    0,  229,    0,    0,  235,
	224,  225,  227,  226,  231,  231,    0,  231,  230,    0,
	232,  232,    0,  232,    0,    0,  231,  235,  233,  233,

	0,  233,  232,  229,    0,  231,  232,    0,    0,  227,
	233,    0,  233,  234,  234,  230,  234,  236,  236,    0,
	236,    0,    0,    0,  235,  234,    0,    0,    0,  236,
	236,    0,  231,  232,    0,  237,  237,  234,  237,  233,
	0,    0,  238,  238,  236,  238,    0,  237,    0,  240,
	240,  237,  240,    0,  238,  239,  239,  236,  239,    0,
	0,  240,  242,  242,  234,  242,    0,  239,  240,  241,
	241,  236,  241,  238,  242,    0,    0,    0,  237,  239,
	0,  241,    0,    0,  243,  243,  241,  243,    0,  244,
	244,    0,  244,    0,  242,  240,  243,    0,    0,  243,

	238,  244,  245,  245,    0,  245,  239,  247,  247,    0,
	247,    0,    0,  241,  245,    0,  244,  248,  248,  247,
	248,  242,  249,  249,    0,  249,  243,    0,    0,  248,
	245,    0,    0,  248,  249,  247,    0,  250,  250,  249,
	250,    0,    0,  244,    0,    0,    0,  251,  251,  250,
	251,    0,    0,  250,    0,  252,  252,  245,  252,  251,
	248,    0,  247,  251,    0,    0,  249,  252,    0,  253,
	253,    0,  253,  254,  254,    0,  254,    0,    0,    0,
	250,  253,    0,    0,  253,  254,  254,    0,  255,  255,
	251,  255,  256,  256,    0,  256,  257,  257,    0,  257,

	255,    0,  258,  258,  256,  258,    0,    0,  257,    0,
	0,  253,  255,  254,  258,  259,  259,    0,  259,  258,
	260,  260,    0,  260,  260,    0,  257,  259,  261,  261,
	0,  261,  260,  262,  262,    0,  262,    0,    0,  255,
	261,  261,    0,    0,    0,  262,  258,    0,  259,  263,
	263,    0,  263,  257,    0,  264,  264,    0,  264,    0,
	0,  263,  263,    0,    0,    0,    0,  264,  261,  265,
	265,    0,  265,    0,    0,  259,  264,    0,    0,  266,
	266,  265,  266,  267,  267,    0,  267,  268,  268,  263,
	268,  266,    0,  265,    0,  267,    0,  269,  269,  268,

	269,    0,  267,  264,  268,  270,  270,    0,  270,  269,
	0,  266,  271,  271,  269,  271,    0,  270,  272,  272,
	265,  272,  276,  276,  271,  276,    0,    0,    0,  267,
	272,  268,  273,  273,  276,  273,    0,  270,  266,  271,
	0,  269,  274,  274,  273,  274,    0,  273,  272,  275,
	275,    0,  275,    0,  274,  277,  277,  274,  277,    0,
	0,  275,  275,    0,  270,    0,  271,  277,  278,  278,
	0,  278,    0,    0,  273,  272,    0,    0,    0,  275,
	278,    0,    0,    0,  274,  279,  279,  278,  279,  275,
	280,  280,    0,  280,    0,    0,    0,  279,  281,  281,

	0,  281,  280,    0,  283,  283,  275,  283,    0,  279,
	281,    0,  282,  282,  278,  282,  283,  284,  284,    0,
	284,    0,  280,    0,  282,  281,    0,  285,  285,  284,
	285,  286,  286,  282,  286,    0,  279,    0,    0,  285,
	0,  287,  287,  286,  287,  288,  288,    0,  288,  280,
	0,    0,  281,  287,    0,  289,  289,  288,  289,    0,
	282,  290,  290,    0,  290,  291,  291,  289,  291,  292,
	292,    0,  292,  290,    0,  293,  293,  291,  293,  294,
	294,  292,  294,  295,  295,    0,  295,  293,    0,  296,
	296,  294,  296,  297,  297,  295,  297,  298,  298,    0,

	298,  296,    0,  299,  299,  297,  299,  300,  300,  298,
	300,  301,  301,    0,  301,  299,    0,  302,  302,  300,
	302,  303,  303,  301,  303,  304,  304,    0,  304,  302,
	0,  305,  305,  303,  305,  306,  306,  304,  306,  307,
	307,    0,  307,  305,    0,  308,  308,  306,  308,  309,
	309,  307,  309,  310,  310,    0,  310,  308,    0,  323,
	323,  309,  323,    0,    0,  310,    0,    0,    0,    0,
	0,  323,    0,  310,  311,  311,  311,  311,  311,  311,
	311,  311,  311,  312,  312,  312,  312,  312,  312,  312,
	312,  312,  313,  313,  313,  313,  313,  313,  313,  313,

	310,  314,  314,  314,  314,  314,  314,  314,  314,  314,
	315,  315,  315,  315,  315,  315,  315,  315,  316,  316,
	316,  316,  316,  316,  316,  316,  316,  317,  317,  317,
	317,  317,  317,  317,  317,    0,    0,    0,  319,  319,
	0,  319,    0,    0,    0,    0,  316,    0,    0,    0,
	319,  320,  320,    0,  320,    0,  319,    0,    0,  321,
	321,    0,  321,  320,    0,    0,    0,    0,    0,    0,
	0,  321,    0,  316,  318,  318,  318,  318,  318,  318,
	318,  318,  318,  319,  320,  321,  322,  322,    0,  322,
	0,  324,  324,    0,  324,    0,  325,  325,  322,  325,

	0,  322,  318,  324,  326,  326,    0,  326,  325,    0,
	0,  320,  321,    0,    0,    0,  326,    0,  327,  327,
	0,  327,  328,  328,    0,  328,  325,    0,  322,  318,
	327,    0,    0,    0,  328,  328,    0,  329,  329,    0,
	329,    0,  330,  330,    0,  330,    0,    0,  327,  329,
	329,    0,    0,  325,  330,  331,  331,    0,  331,  330,
	332,  332,  328,  332,    0,    0,    0,  331,  333,  333,
	0,  333,  332,  335,  335,  327,  335,  329,    0,    0,
	333,  334,  334,    0,  334,  335,  330,    0,    0,  336,
	336,  332,  336,  334,  334,  337,  337,    0,  337,  333,

	0,  336,  338,  338,    0,  338,    0,  337,  339,  339,
	336,  339,  340,  340,  338,  340,    0,    0,  332,  338,
	339,  334,    0,    0,  340,  339,  333,  341,  341,    0,
	341,  342,  342,    0,  342,  343,  343,  336,  343,  341,
	0,    0,    0,  342,  340,    0,  338,  343,  344,  344,
	0,  344,  339,  341,    0,  345,  345,    0,  345,    0,
	344,  344,    0,  342,    0,    0,  343,  345,    0,  346,
	346,  340,  346,  347,  347,    0,  347,    0,    0,    0,
	341,  346,    0,  348,  348,  347,  348,    0,  344,    0,
	342,  350,  350,  343,  350,  348,  349,  349,    0,  349,

	0,  351,  351,  350,  351,    0,    0,    0,  349,    0,
	0,    0,  350,  351,    0,  348,  352,  352,  351,  352,
	349,  353,  353,    0,  353,    0,  354,  354,  352,  354,
	0,  355,  355,  353,  355,    0,    0,  353,  354,  350,
	0,    0,  348,  355,    0,  351,    0,  349,  356,  356,
	0,  356,    0,  357,  357,    0,  357,    0,    0,    0,
	356,  355,    0,    0,  353,  357,  358,  358,  357,  358,
	359,  359,    0,  359,  360,  360,    0,  360,  358,    0,
	362,  362,  359,  362,  361,  361,  360,  361,  355,    0,
	363,  363,  362,  363,    0,  357,  361,  358,    0,  361,

	0,  360,  363,  364,  364,    0,  364,  363,  365,  365,
	362,  365,    0,  366,  366,  364,  366,    0,  367,  367,
	365,  367,    0,    0,  358,  366,  361,    0,  360,    0,
	367,    0,    0,    0,  363,  367,    0,  362,    0,  364,
	0,  368,  368,    0,  368,  366,  369,  369,    0,  369,
	0,  370,  370,  368,  370,    0,  374,  374,  369,  374,
	0,    0,  367,  370,    0,    0,  364,  368,  374,    0,
	0,  370,  366,  369,  371,  371,    0,  371,  372,  372,
	0,  372,    0,  374,  373,  373,  371,  373,    0,    0,
	372,  371,    0,    0,  368,  372,  373,    0,  370,    0,

	369,  375,  375,    0,  375,  382,  382,    0,  382,    0,
	374,    0,    0,  375,  373,    0,    0,  382,  371,    0,
	0,    0,  372,  378,  378,  378,  378,  378,  378,  378,
	378,  379,  379,  379,  379,  379,  379,  379,  379,    0,
	0,  373,  380,  380,  380,  380,  380,  380,  380,  380,
	381,  381,  381,  381,  381,  381,  381,  381,  383,  383,
	383,  383,  383,  383,  383,  383,    0,  385,  385,  380,
	385,  387,  387,    0,  387,    0,    0,  381,    0,  385,
	0,    0,    0,  387,    0,  383,  384,  384,  384,  384,
	384,  384,  384,  384,  386,  386,  380,  386,  388,  388,

	0,  388,  387,    0,  381,    0,  386,    0,  389,  389,
	388,  389,  383,  384,    0,  386,  390,  390,    0,  390,
	389,  391,  391,    0,  391,    0,    0,    0,  390,  387,
	0,    0,    0,  391,  392,  392,  391,  392,  393,  393,
	384,  393,  386,  390,  394,  394,  392,  394,    0,    0,
	393,  394,    0,  393,  395,  395,  394,  395,    0,    0,
	0,  396,  396,  391,  396,    0,  395,    0,    0,    0,
	390,  397,  397,  396,  397,  398,  398,    0,  398,    0,
	393,    0,  396,  397,    0,  395,    0,  398,  399,  399,
	0,  399,  400,  400,    0,  400,  401,  401,    0,  401,

	399,    0,  402,  402,  400,  402,  398,    0,  401,  396,
	403,  403,  395,  403,  402,    0,    0,    0,  402,  399,
	0,    0,  403,  401,  404,  404,    0,  404,    0,    0,
	0,  403,    0,  398,    0,    0,  404,  405,  405,    0,
	405,  404,    0,    0,    0,  402,  399,    0,    0,  405,
	401,  406,  406,    0,  406,    0,    0,    0,  403,  407,
	407,    0,  407,  406,  408,  408,    0,  408,  404,    0,
	0,  407,  406,    0,  409,  409,  408,  409,  410,  410,
	0,  410,  411,  411,    0,  411,  409,    0,  412,  412,
	410,  412,    0,    0,  411,  410,  408,    0,    0,  406,

	412,  412,  413,  413,    0,  413,  414,  414,    0,  414,
	0,    0,  415,  415,  413,  415,    0,    0,  414,    0,
	0,    0,  410,  408,  415,    0,  416,  416,  412,  416,
	417,  417,  414,  417,  418,  418,    0,  418,  416,    0,
	419,  419,  417,  419,  415,    0,  418,    0,  420,  420,
	0,  420,  419,  421,  421,    0,  421,    0,  416,  414,
	420,  422,  422,    0,  422,  421,  423,  423,    0,  423,
	0,  415,  421,  422,  424,  424,    0,  424,  423,  425,
	425,    0,  425,    0,    0,  416,  424,    0,    0,  424,
	423,  425,    0,  422,  426,  426,    0,  426,    0,  421,

	427,  427,    0,  427,    0,    0,  426,  432,  432,    0,
	432,    0,  427,    0,    0,    0,  424,  423,    0,  432,
	422,    0,  433,  433,  432,  433,  427,  434,  434,    0,
	434,    0,  435,  435,  433,  435,    0,    0,    0,  434,
	436,  436,    0,  436,  435,  437,  437,    0,  437,    0,
	0,  432,  436,  427,    0,    0,  435,  437,    0,    0,
	434,  437,    0,  436,  438,  438,    0,  438,  439,  439,
	0,  439,  440,  440,    0,  440,  438,    0,    0,    0,
	439,    0,    0,  435,  440,    0,    0,  434,  437,    0,
	436,  441,  441,    0,  441,  442,  442,    0,  442,    0,

	439,    0,    0,  441,  440,  443,  443,  442,  443,  444,
	444,    0,  444,    0,    0,    0,    0,  443,    0,    0,
	0,  444,    0,    0,  444,  442,    0,  439,    0,  445,
	445,  440,  445,  446,  446,    0,  446,  447,  447,    0,
	447,  445,    0,  448,  448,  446,  448,    0,  446,  447,
	0,  444,  442,    0,  447,  448,  449,  449,    0,  449,
	450,  450,    0,  450,  451,  451,    0,  451,  449,    0,
	453,  453,  450,  453,    0,  446,  451,    0,    0,    0,
	449,  447,  453,  452,  452,  451,  452,  454,  454,    0,
	454,    0,    0,    0,  453,  452,    0,    0,    0,  454,

	454,  455,  455,    0,  455,  456,  456,  449,  456,    0,
	0,    0,  451,  455,    0,    0,    0,  456,    0,    0,
	452,  453,  455,  457,  457,    0,  457,  454,  458,  458,
	0,  458,    0,  459,  459,  457,  459,  456,  460,  460,
	458,  460,    0,    0,    0,  459,    0,  452,    0,  455,
	460,  461,  461,    0,  461,  460,    0,    0,  458,  459,
	0,    0,    0,  461,  456,  462,  462,    0,  462,    0,
	0,  463,  463,    0,  463,  464,  464,  462,  464,    0,
	0,    0,  460,  463,    0,  458,  459,  464,  463,  465,
	465,    0,  465,  466,  466,    0,  466,  467,  467,    0,

	467,  465,    0,    0,    0,  466,    0,  468,  468,  467,
	468,  469,  469,    0,  469,  463,    0,  470,  470,  468,
	470,  471,  471,  469,  471,  472,  472,    0,  472,  470,
	0,  473,  473,  471,  473,  474,  474,  472,  474,    0,
	0,    0,  472,  473,  470,  475,  475,  474,  475,  476,
	476,    0,  476,    0,    0,    0,    0,  475,    0,    0,
	0,  476,    0,  473,    0,  477,  477,  474,  477,  472,
	0,  470,  478,  478,    0,  478,    0,  477,    0,  479,
	479,  477,  479,    0,  478,  480,  480,    0,  480,    0,
	473,  479,  481,  481,  474,  481,    0,  480,  482,  482,

	0,  482,  483,  483,  481,  483,  484,  484,  477,  484,
	482,  480,    0,    0,  483,  482,    0,    0,  484,  483,
	485,  485,    0,  485,  486,  486,    0,  486,  487,  487,
	0,  487,  485,    0,    0,    0,  486,    0,  480,    0,
	487,    0,  482,    0,    0,    0,  483,  489,  489,  489,
	489,  490,    0,  490,  490,  491,    0,  491,  491,  492,
	492,  493,    0,  493,  493,  494,    0,  494,  494,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
	488,  488
} ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ds9/ds9lex.ll"
// Copyright (C) 1999-2010
// Smithsonian Astrophysical Observatory, Cambridge, MA, USA
// Copyright (C) 2011
// Associated Universities, Inc. Washington DC, USA.
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Library General Public License as published by
// the Free Software Foundation; either version 2 of the License, or (at your
// option) any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
// License for more details.
//
// You should have received a copy of the GNU Library General Public License
// along with this library; if not, write to the Free Software Foundation,
// Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
//
// Correspondence concerning AIPS++ should be addressed as follows:
//        Internet email: aips2-request@nrao.edu.
//        Postal address: AIPS++ Project Office
//                        National Radio Astronomy Observatory
//                        520 Edgemont Road
//                        Charlottesville, VA 22903-2475 USA
#line 34 "ds9/ds9lex.ll"
#include <display/ds9/ds9lex.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//#include "util.h"
#include <display/ds9/ds9parse.hh>

// import the parser's token type into a local typedef
typedef casa::viewer::ds9parse::token token;
typedef casa::viewer::ds9parse::token_type token_type;

casa::viewer::ds9lex *mklexx;

/* rules */
#line 1522 "/Users/drs/develop/casa/code/build/display/ds9lex.cc"

#define INITIAL 0
#define DISCARD 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL {
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 57 "ds9/ds9lex.ll"


#line 1626 "/Users/drs/develop/casa/code/build/display/ds9lex.cc"

	if ( !(yy_init) ) {
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
			yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
	}

	while ( 1 ) {	/* loops until end-of-file is reached */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do {
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] ) {
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
			}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state ) {
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 489 )
					yy_c = yy_meta[(unsigned int) yy_c];
			}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
		} while ( yy_current_state != 488 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act ) {
			/* beginning of action switch */
		case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

		case 1:
			/* rule 1 can match eol */
			YY_RULE_SETUP
#line 59 "ds9/ds9lex.ll"
			{
				// special case-- #\n
				BEGIN INITIAL;
				yyless(0);             // put back the terminator
				strcpy(yylval->str,""); // feed a blank string
				return token::STRING;
			}
			YY_BREAK
		case 2:
			YY_RULE_SETUP
#line 66 "ds9/ds9lex.ll"
			{
				// Discard reset of line
				BEGIN INITIAL;
				int ll = yyleng <(MKBUFSIZE-1) ? yyleng:(MKBUFSIZE-1);
				strncpy(yylval->str,yytext,ll);
				yylval->str[ll] = '\0';
				return token::STRING;
			}
			YY_BREAK
		case 3:
			YY_RULE_SETUP
#line 74 "ds9/ds9lex.ll"
			{return token::AMPLIFIER_;}
			YY_BREAK
		case 4:
			YY_RULE_SETUP
#line 75 "ds9/ds9lex.ll"
			{return token::ANNULUS_;}
			YY_BREAK
		case 5:
			YY_RULE_SETUP
#line 76 "ds9/ds9lex.ll"
			{return token::ARCMIN_;}
			YY_BREAK
		case 6:
			YY_RULE_SETUP
#line 77 "ds9/ds9lex.ll"
			{return token::ARCSEC_;}
			YY_BREAK
		case 7:
			YY_RULE_SETUP
#line 78 "ds9/ds9lex.ll"
			{return token::ARROW_;}
			YY_BREAK
		case 8:
			YY_RULE_SETUP
#line 79 "ds9/ds9lex.ll"
			{return token::B1950_;}
			YY_BREAK
		case 9:
			YY_RULE_SETUP
#line 80 "ds9/ds9lex.ll"
			{return token::BACKGROUND_;}
			YY_BREAK
		case 10:
			YY_RULE_SETUP
#line 81 "ds9/ds9lex.ll"
			{return token::BEGIN_;}
			YY_BREAK
		case 11:
			YY_RULE_SETUP
#line 82 "ds9/ds9lex.ll"
			{return token::BOX_;}
			YY_BREAK
		case 12:
			YY_RULE_SETUP
#line 83 "ds9/ds9lex.ll"
			{return token::BOXCIRCLE_;}
			YY_BREAK
		case 13:
			YY_RULE_SETUP
#line 84 "ds9/ds9lex.ll"
			{return token::BPANDA_;}
			YY_BREAK
		case 14:
			YY_RULE_SETUP
#line 85 "ds9/ds9lex.ll"
			{return token::CALLBACK_;}
			YY_BREAK
		case 15:
			YY_RULE_SETUP
#line 86 "ds9/ds9lex.ll"
			{return token::CIRCLE_;}
			YY_BREAK
		case 16:
			YY_RULE_SETUP
#line 87 "ds9/ds9lex.ll"
			{return token::CIRCLE3D_;}
			YY_BREAK
		case 17:
			YY_RULE_SETUP
#line 88 "ds9/ds9lex.ll"
			{return token::COLOR_;}
			YY_BREAK
		case 18:
			YY_RULE_SETUP
#line 89 "ds9/ds9lex.ll"
			{return token::COMPASS_;}
			YY_BREAK
		case 19:
			YY_RULE_SETUP
#line 90 "ds9/ds9lex.ll"
			{return token::COMPOSITE_;}
			YY_BREAK
		case 20:
			YY_RULE_SETUP
#line 91 "ds9/ds9lex.ll"
			{return token::CPANDA_;}
			YY_BREAK
		case 21:
			YY_RULE_SETUP
#line 92 "ds9/ds9lex.ll"
			{return token::CROSS_;}
			YY_BREAK
		case 22:
			YY_RULE_SETUP
#line 93 "ds9/ds9lex.ll"
			{return token::DASH_;}
			YY_BREAK
		case 23:
			YY_RULE_SETUP
#line 94 "ds9/ds9lex.ll"
			{return token::DASHLIST_;}
			YY_BREAK
		case 24:
			YY_RULE_SETUP
#line 95 "ds9/ds9lex.ll"
			{return token::DEBUG_;}
			YY_BREAK
		case 25:
			YY_RULE_SETUP
#line 96 "ds9/ds9lex.ll"
			{return token::DEGREES_;}
			YY_BREAK
		case 26:
			YY_RULE_SETUP
#line 97 "ds9/ds9lex.ll"
			{return token::DELETE_;}
			YY_BREAK
		case 27:
			YY_RULE_SETUP
#line 98 "ds9/ds9lex.ll"
			{return token::DETECTOR_;}
			YY_BREAK
		case 28:
			YY_RULE_SETUP
#line 99 "ds9/ds9lex.ll"
			{return token::DIAMOND_;}
			YY_BREAK
		case 29:
			YY_RULE_SETUP
#line 100 "ds9/ds9lex.ll"
			{return token::EDIT_;}
			YY_BREAK
		case 30:
			YY_RULE_SETUP
#line 101 "ds9/ds9lex.ll"
			{return token::ELLIPSE_;}
			YY_BREAK
		case 31:
			YY_RULE_SETUP
#line 102 "ds9/ds9lex.ll"
			{return token::ECLIPTIC_;}
			YY_BREAK
		case 32:
			YY_RULE_SETUP
#line 103 "ds9/ds9lex.ll"
			{return token::EPANDA_;}
			YY_BREAK
		case 33:
			YY_RULE_SETUP
#line 104 "ds9/ds9lex.ll"
			{return token::END_;}
			YY_BREAK
		case 34:
			YY_RULE_SETUP
#line 105 "ds9/ds9lex.ll"
			{return token::FALSE_;}
			YY_BREAK
		case 35:
			YY_RULE_SETUP
#line 106 "ds9/ds9lex.ll"
			{return token::FIELD_;}
			YY_BREAK
		case 36:
			YY_RULE_SETUP
#line 107 "ds9/ds9lex.ll"
			{return token::FIXED_;}
			YY_BREAK
		case 37:
			YY_RULE_SETUP
#line 108 "ds9/ds9lex.ll"
			{return token::FK4_;}
			YY_BREAK
		case 38:
			YY_RULE_SETUP
#line 109 "ds9/ds9lex.ll"
			{return token::FK5_;}
			YY_BREAK
		case 39:
			YY_RULE_SETUP
#line 110 "ds9/ds9lex.ll"
			{return token::FONT_;}
			YY_BREAK
		case 40:
			YY_RULE_SETUP
#line 111 "ds9/ds9lex.ll"
			{return token::GALACTIC_;}
			YY_BREAK
		case 41:
			YY_RULE_SETUP
#line 112 "ds9/ds9lex.ll"
			{return token::GLOBAL_;}
			YY_BREAK
		case 42:
			YY_RULE_SETUP
#line 113 "ds9/ds9lex.ll"
			{return token::HIGHLITE_;}
			YY_BREAK
		case 43:
			YY_RULE_SETUP
#line 114 "ds9/ds9lex.ll"
			{return token::ICRS_;}
			YY_BREAK
		case 44:
			YY_RULE_SETUP
#line 115 "ds9/ds9lex.ll"
			{return token::IGNORE_;}
			YY_BREAK
		case 45:
			YY_RULE_SETUP
#line 116 "ds9/ds9lex.ll"
			{return token::INCLUDE_;}
			YY_BREAK
		case 46:
			YY_RULE_SETUP
#line 117 "ds9/ds9lex.ll"
			{return token::IMAGE_;}
			YY_BREAK
		case 47:
			YY_RULE_SETUP
#line 118 "ds9/ds9lex.ll"
			{return token::KEY_;}
			YY_BREAK
		case 48:
			YY_RULE_SETUP
#line 119 "ds9/ds9lex.ll"
			{return token::J2000_;}
			YY_BREAK
		case 49:
			YY_RULE_SETUP
#line 120 "ds9/ds9lex.ll"
			{return token::LINE_;}
			YY_BREAK
		case 50:
			YY_RULE_SETUP
#line 121 "ds9/ds9lex.ll"
			{return token::LINEAR_;}
			YY_BREAK
		case 51:
			YY_RULE_SETUP
#line 122 "ds9/ds9lex.ll"
			{return token::MOVE_;}
			YY_BREAK
		case 52:
			YY_RULE_SETUP
#line 123 "ds9/ds9lex.ll"
			{return token::N_;}
			YY_BREAK
		case 53:
			YY_RULE_SETUP
#line 124 "ds9/ds9lex.ll"
			{return token::NO_;}
			YY_BREAK
		case 54:
			YY_RULE_SETUP
#line 125 "ds9/ds9lex.ll"
			{return token::OFF_;}
			YY_BREAK
		case 55:
			YY_RULE_SETUP
#line 126 "ds9/ds9lex.ll"
			{return token::ON_;}
			YY_BREAK
		case 56:
			YY_RULE_SETUP
#line 127 "ds9/ds9lex.ll"
			{return token::CPANDA_;}
			YY_BREAK
		case 57:
			YY_RULE_SETUP
#line 128 "ds9/ds9lex.ll"
			{return token::PHYSICAL_;}
			YY_BREAK
		case 58:
			YY_RULE_SETUP
#line 129 "ds9/ds9lex.ll"
			{return token::PIE_;}
			YY_BREAK
		case 59:
			YY_RULE_SETUP
#line 130 "ds9/ds9lex.ll"
			{return token::PIXELS_;}
			YY_BREAK
		case 60:
			YY_RULE_SETUP
#line 131 "ds9/ds9lex.ll"
			{return token::POINT_;}
			YY_BREAK
		case 61:
			YY_RULE_SETUP
#line 132 "ds9/ds9lex.ll"
			{return token::POLYGON_;}
			YY_BREAK
		case 62:
			YY_RULE_SETUP
#line 133 "ds9/ds9lex.ll"
			{return token::PROJECTION_;}
			YY_BREAK
		case 63:
			YY_RULE_SETUP
#line 134 "ds9/ds9lex.ll"
			{return token::PROPERTY_;}
			YY_BREAK
		case 64:
			YY_RULE_SETUP
#line 135 "ds9/ds9lex.ll"
			{return token::ROTATE_;}
			YY_BREAK
		case 65:
			YY_RULE_SETUP
#line 136 "ds9/ds9lex.ll"
			{return token::ROTBOX_;}
			YY_BREAK
		case 66:
			YY_RULE_SETUP
#line 137 "ds9/ds9lex.ll"
			{return token::RULER_;}
			YY_BREAK
		case 67:
			YY_RULE_SETUP
#line 138 "ds9/ds9lex.ll"
			{return token::SELECT_;}
			YY_BREAK
		case 68:
			YY_RULE_SETUP
#line 139 "ds9/ds9lex.ll"
			{return token::SOURCE_;}
			YY_BREAK
		case 69:
			YY_RULE_SETUP
#line 140 "ds9/ds9lex.ll"
			{return token::TAG_;}
			YY_BREAK
		case 70:
			YY_RULE_SETUP
#line 141 "ds9/ds9lex.ll"
			{return token::TEXT_;}
			YY_BREAK
		case 71:
			YY_RULE_SETUP
#line 142 "ds9/ds9lex.ll"
			{return token::TEXTANGLE_;}
			YY_BREAK
		case 72:
			YY_RULE_SETUP
#line 143 "ds9/ds9lex.ll"
			{return token::TEXTROTATE_;}
			YY_BREAK
		case 73:
			YY_RULE_SETUP
#line 144 "ds9/ds9lex.ll"
			{return token::TILE_;}
			YY_BREAK
		case 74:
			YY_RULE_SETUP
#line 145 "ds9/ds9lex.ll"
			{return token::TRUE_;}
			YY_BREAK
		case 75:
			YY_RULE_SETUP
#line 146 "ds9/ds9lex.ll"
			{return token::VECTOR_;}
			YY_BREAK
		case 76:
			YY_RULE_SETUP
#line 147 "ds9/ds9lex.ll"
			{return token::VERSION_;}
			YY_BREAK
		case 77:
			YY_RULE_SETUP
#line 148 "ds9/ds9lex.ll"
			{return token::UPDATE_;}
			YY_BREAK
		case 78:
			YY_RULE_SETUP
#line 149 "ds9/ds9lex.ll"
			{return token::UNHIGHLITE_;}
			YY_BREAK
		case 79:
			YY_RULE_SETUP
#line 150 "ds9/ds9lex.ll"
			{return token::UNSELECT_;}
			YY_BREAK
		case 80:
			YY_RULE_SETUP
#line 151 "ds9/ds9lex.ll"
			{return token::WCS_;}
			YY_BREAK
		case 81:
			YY_RULE_SETUP
#line 152 "ds9/ds9lex.ll"
			{return token::WCSA_;}
			YY_BREAK
		case 82:
			YY_RULE_SETUP
#line 153 "ds9/ds9lex.ll"
			{return token::WCSB_;}
			YY_BREAK
		case 83:
			YY_RULE_SETUP
#line 154 "ds9/ds9lex.ll"
			{return token::WCSC_;}
			YY_BREAK
		case 84:
			YY_RULE_SETUP
#line 155 "ds9/ds9lex.ll"
			{return token::WCSD_;}
			YY_BREAK
		case 85:
			YY_RULE_SETUP
#line 156 "ds9/ds9lex.ll"
			{return token::WCSE_;}
			YY_BREAK
		case 86:
			YY_RULE_SETUP
#line 157 "ds9/ds9lex.ll"
			{return token::WCSF_;}
			YY_BREAK
		case 87:
			YY_RULE_SETUP
#line 158 "ds9/ds9lex.ll"
			{return token::WCSG_;}
			YY_BREAK
		case 88:
			YY_RULE_SETUP
#line 159 "ds9/ds9lex.ll"
			{return token::WCSH_;}
			YY_BREAK
		case 89:
			YY_RULE_SETUP
#line 160 "ds9/ds9lex.ll"
			{return token::WCSI_;}
			YY_BREAK
		case 90:
			YY_RULE_SETUP
#line 161 "ds9/ds9lex.ll"
			{return token::WCSJ_;}
			YY_BREAK
		case 91:
			YY_RULE_SETUP
#line 162 "ds9/ds9lex.ll"
			{return token::WCSK_;}
			YY_BREAK
		case 92:
			YY_RULE_SETUP
#line 163 "ds9/ds9lex.ll"
			{return token::WCSL_;}
			YY_BREAK
		case 93:
			YY_RULE_SETUP
#line 164 "ds9/ds9lex.ll"
			{return token::WCSM_;}
			YY_BREAK
		case 94:
			YY_RULE_SETUP
#line 165 "ds9/ds9lex.ll"
			{return token::WCSN_;}
			YY_BREAK
		case 95:
			YY_RULE_SETUP
#line 166 "ds9/ds9lex.ll"
			{return token::WCSO_;}
			YY_BREAK
		case 96:
			YY_RULE_SETUP
#line 167 "ds9/ds9lex.ll"
			{return token::WCSP_;}
			YY_BREAK
		case 97:
			YY_RULE_SETUP
#line 168 "ds9/ds9lex.ll"
			{return token::WCSQ_;}
			YY_BREAK
		case 98:
			YY_RULE_SETUP
#line 169 "ds9/ds9lex.ll"
			{return token::WCSR_;}
			YY_BREAK
		case 99:
			YY_RULE_SETUP
#line 170 "ds9/ds9lex.ll"
			{return token::WCSS_;}
			YY_BREAK
		case 100:
			YY_RULE_SETUP
#line 171 "ds9/ds9lex.ll"
			{return token::WCST_;}
			YY_BREAK
		case 101:
			YY_RULE_SETUP
#line 172 "ds9/ds9lex.ll"
			{return token::WCSU_;}
			YY_BREAK
		case 102:
			YY_RULE_SETUP
#line 173 "ds9/ds9lex.ll"
			{return token::WCSV_;}
			YY_BREAK
		case 103:
			YY_RULE_SETUP
#line 174 "ds9/ds9lex.ll"
			{return token::WCSW_;}
			YY_BREAK
		case 104:
			YY_RULE_SETUP
#line 175 "ds9/ds9lex.ll"
			{return token::WCSX_;}
			YY_BREAK
		case 105:
			YY_RULE_SETUP
#line 176 "ds9/ds9lex.ll"
			{return token::WCSY_;}
			YY_BREAK
		case 106:
			YY_RULE_SETUP
#line 177 "ds9/ds9lex.ll"
			{return token::WCSZ_;}
			YY_BREAK
		case 107:
			YY_RULE_SETUP
#line 178 "ds9/ds9lex.ll"
			{return token::WCS0_;}
			YY_BREAK
		case 108:
			YY_RULE_SETUP
#line 179 "ds9/ds9lex.ll"
			{return token::WIDTH_;}
			YY_BREAK
		case 109:
			YY_RULE_SETUP
#line 180 "ds9/ds9lex.ll"
			{return token::X_;}
			YY_BREAK
		case 110:
			YY_RULE_SETUP
#line 181 "ds9/ds9lex.ll"
			{return token::Y_;}
			YY_BREAK
		case 111:
			YY_RULE_SETUP
#line 182 "ds9/ds9lex.ll"
			{return token::YES_;}
			YY_BREAK
		case 112:
			YY_RULE_SETUP
#line 185 "ds9/ds9lex.ll"
			{
				// Integer
				yylval->integer = atoi(yytext);
				return token::INT;
			}
			YY_BREAK
		case 113:
#line 191 "ds9/ds9lex.ll"
		case 114:
			YY_RULE_SETUP
#line 191 "ds9/ds9lex.ll"
			{
				// Real Number
				yylval->real = atof(yytext);
				return token::REAL;
			}
			YY_BREAK
		case 115:
#line 197 "ds9/ds9lex.ll"
		case 116:
			YY_RULE_SETUP
#line 197 "ds9/ds9lex.ll"
			{
				// degrees
				yytext[yyleng-1] = '\0';
				yylval->real = atof(yytext);
				return token::ANGDEGREE;
			}
			YY_BREAK
		case 117:
#line 204 "ds9/ds9lex.ll"
		case 118:
			YY_RULE_SETUP
#line 204 "ds9/ds9lex.ll"
			{
				// radians
				yytext[yyleng-1] = '\0';
				yylval->real = atof(yytext);
				return token::ANGRADIAN;
			}
			YY_BREAK
		case 119:
#line 211 "ds9/ds9lex.ll"
		case 120:
			YY_RULE_SETUP
#line 211 "ds9/ds9lex.ll"
			{
				// physical coords
				yytext[yyleng-1] = '\0';
				yylval->real = atof(yytext);
				return token::PHYCOORD;
			}
			YY_BREAK
		case 121:
#line 218 "ds9/ds9lex.ll"
		case 122:
			YY_RULE_SETUP
#line 218 "ds9/ds9lex.ll"
			{
				// image coords
				yytext[yyleng-1] = '\0';
				yylval->real = atof(yytext);
				return token::IMGCOORD;
			}
			YY_BREAK
		case 123:
#line 225 "ds9/ds9lex.ll"
		case 124:
			YY_RULE_SETUP
#line 225 "ds9/ds9lex.ll"
			{
				// minutes of arc
				yytext[yyleng-1] = '\0';
				yylval->real = atof(yytext);
				return token::ARCMINUTE;
			}
			YY_BREAK
		case 125:
#line 232 "ds9/ds9lex.ll"
		case 126:
			YY_RULE_SETUP
#line 232 "ds9/ds9lex.ll"
			{
				// seconds of arc
				yytext[yyleng-1] = '\0';
				yylval->real = atof(yytext);
				return token::ARCSECOND;
			}
			YY_BREAK
		case 127:
#line 239 "ds9/ds9lex.ll"
		case 128:
			YY_RULE_SETUP
#line 239 "ds9/ds9lex.ll"
			{
				// Sexagesimal
				int ll = yyleng <(MKBUFSIZE-1) ? yyleng:(MKBUFSIZE-1);
				strncpy(yylval->str,yytext,ll);
				yylval->str[ll] = '\0';
				return token::SEXSTR;
			}
			YY_BREAK
		case 129:
#line 247 "ds9/ds9lex.ll"
		case 130:
			YY_RULE_SETUP
#line 247 "ds9/ds9lex.ll"
			{
				// HMS
				int ll = yyleng <(MKBUFSIZE-1) ? yyleng:(MKBUFSIZE-1);
				strncpy(yylval->str,yytext,ll);
				yylval->str[ll] = '\0';
				return token::HMSSTR;
			}
			YY_BREAK
		case 131:
#line 255 "ds9/ds9lex.ll"
		case 132:
			YY_RULE_SETUP
#line 255 "ds9/ds9lex.ll"
			{
				// DMS
				int ll = yyleng <(MKBUFSIZE-1) ? yyleng:(MKBUFSIZE-1);
				strncpy(yylval->str,yytext,ll);
				yylval->str[ll] = '\0';
				return token::DMSSTR;
			}
			YY_BREAK
		case 133:
#line 263 "ds9/ds9lex.ll"
		case 134:
			YY_RULE_SETUP
#line 263 "ds9/ds9lex.ll"
			{
				// Quoted String
				int ll = (yyleng-2)<(MKBUFSIZE-1) ? (yyleng-2):(MKBUFSIZE-1);
				strncpy(yylval->str,yytext+1,ll); // skip the " "
				yylval->str[ll] = '\0'; // Remove the '"'
				return token::STRING;
			}
			YY_BREAK
		case 135:
			YY_RULE_SETUP
#line 270 "ds9/ds9lex.ll"
			{
				// Quoted String
				int ll = (yyleng-2)<(MKBUFSIZE-1) ? (yyleng-2):(MKBUFSIZE-1);
				strncpy(yylval->str,yytext+1,ll); // skip the '{'
				yylval->str[ll] = '\0'; // Remove the '}'
				return token::STRING;
			}
			YY_BREAK
		case 136:
			YY_RULE_SETUP
#line 277 "ds9/ds9lex.ll"
			{
				// General String
				int ll = yyleng <(MKBUFSIZE-1) ? yyleng:(MKBUFSIZE-1);
				strncpy(yylval->str,yytext,ll);
				yylval->str[ll] = '\0';
				return token::STRING;
			}
			YY_BREAK
		case 137:
			YY_RULE_SETUP
#line 284 "ds9/ds9lex.ll"
			{
				// White Spaces
			}
			YY_BREAK
		case 138:
			/* rule 138 can match eol */
			YY_RULE_SETUP
#line 287 "ds9/ds9lex.ll"
			{
				// windows line feed
				return token::EOL_;
			}
			YY_BREAK
		case 139:
			YY_RULE_SETUP
#line 291 "ds9/ds9lex.ll"
			{
				// fake line feed
				return token::EOL_;
			}
			YY_BREAK
		case 140:
			/* rule 140 can match eol */
			YY_RULE_SETUP
#line 295 "ds9/ds9lex.ll"
			{
				// linefeed
				return token::EOL_;
			}
			YY_BREAK
		case YY_STATE_EOF(INITIAL):
		case YY_STATE_EOF(DISCARD):
#line 299 "ds9/ds9lex.ll"
		{
			// eof
			return token::EOF_;
		}
		YY_BREAK
		case 141:
			YY_RULE_SETUP
#line 303 "ds9/ds9lex.ll"
			{
				// Else, return the char
				return static_cast<token_type>(*yytext);
			}
			YY_BREAK
		case 142:
			YY_RULE_SETUP
#line 307 "ds9/ds9lex.ll"
			ECHO;
			YY_BREAK
#line 2472 "/Users/drs/develop/casa/code/build/display/ds9lex.cc"

		case YY_END_OF_BUFFER: {
			/* Amount of text matched not including the EOB char. */
			int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

			/* Undo the effects of YY_DO_BEFORE_ACTION. */
			*yy_cp = (yy_hold_char);
			YY_RESTORE_YY_MORE_OFFSET

			if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW ) {
				/* We're scanning a new file or input source.  It's
				 * possible that this happened because the user
				 * just pointed yyin at a new source and called
				 * yylex().  If so, then we have to assure
				 * consistency between YY_CURRENT_BUFFER and our
				 * globals.  Here is the right place to do so, because
				 * this is the first action (other than possibly a
				 * back-up) that will match for the new input source.
				 */
				(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
				YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
				YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

			/* Note that here we test for yy_c_buf_p "<=" to the position
			 * of the first EOB in the buffer, since yy_c_buf_p will
			 * already have been incremented past the NUL character
			 * (since all states make transitions on EOB to the
			 * end-of-buffer state).  Contrast this with the test
			 * in input().
			 */
			if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] ) {
				/* This was really a NUL. */
				yy_state_type yy_next_state;

				(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				/* Okay, we're now positioned to make the NUL
				 * transition.  We couldn't have
				 * yy_get_previous_state() go ahead and do it
				 * for us because it doesn't know how to deal
				 * with the possibility of jamming (and we don't
				 * want to build jamming into it because then it
				 * will run more slowly).
				 */

				yy_next_state = yy_try_NUL_trans( yy_current_state );

				yy_bp = (yytext_ptr) + YY_MORE_ADJ;

				if ( yy_next_state ) {
					/* Consume the NUL. */
					yy_cp = ++(yy_c_buf_p);
					yy_current_state = yy_next_state;
					goto yy_match;
				}

				else {
					yy_cp = (yy_last_accepting_cpos);
					yy_current_state = (yy_last_accepting_state);
					goto yy_find_action;
				}
			}

			else switch ( yy_get_next_buffer(  ) ) {
				case EOB_ACT_END_OF_FILE: {
					(yy_did_buffer_switch_on_eof) = 0;

					if ( yywrap(  ) ) {
						/* Note: because we've taken care in
						 * yy_get_next_buffer() to have set up
						 * yytext, we can now set up
						 * yy_c_buf_p so that if some total
						 * hoser (like flex itself) wants to
						 * call the scanner after we return the
						 * YY_NULL, it'll still work - another
						 * YY_NULL will get returned.
						 */
						(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

						yy_act = YY_STATE_EOF(YY_START);
						goto do_action;
					}

					else {
						if ( ! (yy_did_buffer_switch_on_eof) )
							YY_NEW_FILE;
					}
					break;
				}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) =
					    (yytext_ptr) + yy_amount_of_matched_text;

					yy_current_state = yy_get_previous_state(  );

					yy_cp = (yy_c_buf_p);
					yy_bp = (yytext_ptr) + YY_MORE_ADJ;
					goto yy_match;

				case EOB_ACT_LAST_MATCH:
					(yy_c_buf_p) =
					    &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

					yy_current_state = yy_get_previous_state(  );

					yy_cp = (yy_c_buf_p);
					yy_bp = (yytext_ptr) + YY_MORE_ADJ;
					goto yy_find_action;
				}
			break;
		}

		default:
			YY_FATAL_ERROR(
			    "fatal flex scanner internal error--no action found" );
		} /* end of action switch */
	} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ) {
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer() {
	delete [] yy_state_buf;
	ds9lex_free(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	ds9lex_free(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out ) {
	if ( new_in ) {
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
	}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size ) {
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer() {
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		    "fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 ) {
		/* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 ) {
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
		}

		else {
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
		}
	}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else {
		int num_to_read =
		    YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 ) {
			/* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
			    (int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer ) {
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
				               /* Include room in for 2 EOB chars. */
				               ds9lex_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
			} else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				    "fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
			              number_to_move - 1;

		}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
		          (yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
	}

	if ( (yy_n_chars) == 0 ) {
		if ( number_to_move == YY_MORE_ADJ ) {
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
		}

		else {
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
			    YY_BUFFER_EOF_PENDING;
		}
	}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) ds9lex_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state() {
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp ) {
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] ) {
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
		}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state ) {
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 489 )
				yy_c = yy_meta[(unsigned int) yy_c];
		}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state ) {
	register int yy_is_jam;
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] ) {
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
	}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state ) {
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 489 )
			yy_c = yy_meta[(unsigned int) yy_c];
	}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 488);

	return yy_is_jam ? 0 : yy_current_state;
}

void yyFlexLexer::yyunput( int c, register char* yy_bp) {
	register char *yy_cp;

	yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 ) {
		/* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
		                          YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
		    &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
		    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

int yyFlexLexer::yyinput() {
	int c;

	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR ) {
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else {
			/* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) ) {
			case EOB_ACT_LAST_MATCH:
				/* This happens because yy_g_n_b()
				 * sees that we've accumulated a
				 * token and flags that we need to
				 * try matching the token before
				 * proceeding.  But for input(),
				 * there's no matching to consider.
				 * So convert the EOB_ACT_LAST_MATCH
				 * to EOB_ACT_END_OF_FILE.
				 */

				/* Reset buffer status. */
				yyrestart( yyin );

				/*FALLTHROUGH*/

			case EOB_ACT_END_OF_FILE: {
				if ( yywrap(  ) )
					return EOF;

				if ( ! (yy_did_buffer_switch_on_eof) )
					YY_NEW_FILE;
#ifdef __cplusplus
				return yyinput();
#else
				return input();
#endif
			}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) = (yytext_ptr) + offset;
				break;
			}
		}
	}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file ) {

	if ( ! YY_CURRENT_BUFFER ) {
		yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
		    yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer ) {

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
	 */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER ) {
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
	}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

void yyFlexLexer::yy_load_buffer_state() {
	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size ) {
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) ds9lex_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) ds9lex_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b ) {

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ds9lex_free((void *) b->yy_ch_buf  );

	ds9lex_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;

	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	/* If b is the current buffer, then yy_init_buffer was _probably_
	 * called from yyrestart() or through yy_get_next_buffer.
	 * In that case, we don't want to reset the lineno or column.
	 */
	if (b != YY_CURRENT_BUFFER) {
		b->yy_bs_lineno = 1;
		b->yy_bs_column = 0;
	}

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b ) {
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer) {
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER ) {
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
	}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yyFlexLexer::yypop_buffer_state (void) {
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void) {
	int num_to_alloc;

	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
		 */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)ds9lex_alloc
		                    (num_to_alloc * sizeof(struct yy_buffer_state*)
		                    );
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1) {

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)ds9lex_realloc
		                    ((yy_buffer_stack),
		                     num_to_alloc * sizeof(struct yy_buffer_state*)
		                    );
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

void yyFlexLexer::yy_push_state( int new_state ) {
	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) ) {
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) ds9lex_alloc(new_size  );

		else
			(yy_start_stack) = (int *) ds9lex_realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
	}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

void yyFlexLexer::yy_pop_state() {
	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

int yyFlexLexer::yy_top_state() {
	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] ) {
	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n ) {
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s ) {
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *ds9lex_alloc (yy_size_t  size ) {
	return (void *) malloc( size );
}

void *ds9lex_realloc  (void * ptr, yy_size_t  size ) {
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void ds9lex_free (void * ptr ) {
	free( (char *) ptr );	/* see ds9lex_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 307 "ds9/ds9lex.ll"



void casa::viewer::ds9lex::discard( int doit ) {
	begin(DISCARD, doit);
}


void casa::viewer::ds9lex::begin(int which, int doit) {
	BEGIN which;
	if (doit)
		yyless(0);
}

void casa::viewer::ds9lex::set_debug(bool b) {
	yy_flex_debug = b;
}

//------------------------------------------------------------------------------------------
#ifdef yylex
#undef yylex
#endif
// This implementation of ExampleFlexLexer::yylex() is required to fill the
// vtable of the class ExampleFlexLexer. We define the scanner's main yylex
// function via YY_DECL to reside in the Scanner class instead.
int ds9lex_FlexLexer::yylex() {
	std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
	return 0;
}
//------------------------------------------------------------------------------------------
// When the scanner receives an end-of-file indication from YY_INPUT, it then
// checks the yywrap() function. If yywrap() returns false (zero), then it is
// assumed that the function has gone ahead and set up `yyin' to point to
// another input file, and scanning continues. If it returns true (non-zero),
// then the scanner terminates, returning 0 to its caller.
int ds9lex_FlexLexer::yywrap() {
	return 1;
}
//------------------------------------------------------------------------------------------

