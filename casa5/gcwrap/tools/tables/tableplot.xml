<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/tools/xml/casa.xsd">


        <tool name="tableplot" module="table">
        <shortdescription>Plot data from tables via plotter</shortdescription>
<code>
	<include>tools/tables/tableplot_forward.h</include>
<private>
	<include>tools/tables/tableplot_private.h</include>
</private>
</code>
       
<description>
{\tt tableplot} is a plotting tool for general \casa\ tables. Table
columns can be plotted against each other, and can be combined using
TaQL to create expressions for derived quantities, the result of which
can then be plotted. Data from more than one table can be accessed and
plotted at the same time.  Expressions producing arrays result in
overlay plots.  The default plot style is single-panel, but if an
iteration axis is specified, multi-panel plots are supported.  Zooming
and region-based flagging is possible on single and multi panel
plots. A GUI, adapted to a particular kind of table (measurement set)
can call the tableplot functions and customize the generated plots.
</description>


   <method type="constructor" name="tableplot">
     <shortdescription></shortdescription>
     <description></description>
     <input></input>
     <example></example>
   </method>

    <method type="function" name="open">
   <shortdescription>Specify list of tables to operate on.</shortdescription>
   
<description>
Specify a list of table names to open for plotting.  All plots will
operate on these tables until open is called again to change the list
of tables. Returns true if tables are valid, false otherwise.
</description>

<input>
     <param type="stringArray" name="tabnames">
     <description>List of strings identifying Table names</description>
     <value></value>
     </param>
</input>
<returns type="bool" />

This is just a test line.
<example>

 # set the list of tables to plot from.
 tp.open(tabnames=['3c273.ms','3c48.ms'])

</example>

</method>


    <method type="function" name="setgui">
   <shortdescription>
  Set the GUI on or off. Can be done only once !!
</shortdescription>
   
<description> 
  Set the GUI on or off. Can be done only once !!
</description>

<input>

     <param type="bool" name="gui">
     <description>gui=False to turn off gui</description>
     <value>false</value>
     </param>
</input>
<returns type="bool"/>

</method>

<method type="function" name="savefig">
   <shortdescription>
     Save the currently plotted image.
   </shortdescription> 

   <keyword>open</keyword>

   <description>
    Store the contents of the plot window in a file.  The file format (type)
    is based on the file name, ie. the file extension given determines the
    format the file is saved as. The accepted formats are <I>eps</I>,
    <I>ps</I>, <I>png</I>, <I>pdf</I>, and <I>svg</I>.

    Internally, this function uses the matplotlib pl.savefig function.

    Note that if a full path is not given that the files will be saved in
    the current working directory.
   </description>

   <input>
     <param type="string" name="filename">
     <description>Name the plot image is to be saved to. </description>
     <value></value>
     </param>

     <param type="int" name="dpi">
     <description>Number of dots per inch (resolution) to save the image at. 
     </description>
     <value>-1</value>
     </param>

     <param type="string" name="orientation">
     <description>Either <I>landscape</I> or <I>portrait</I>. Supported
     by the postscript format only.</description>
     <value></value>
     </param>

     <param type="string" name="papertype">
     <description>Valid values are: <I>letter</I>, <I>legal</I>, <I>exective</I>,
          <I>ledger</I>, <I>a0</I>-<I>a10</I> and <I>b0</I>-<I>b10</I>.  This 
           option is supported byt the postscript format only.
     </description>
     <value></value>
     </param>

     <param type="string" name="facecolor">
     <description>Color of space between the plot and the edge of the
        square. Valid values are the same as those
         accepted by the plotcolour option of tp.plotdata().</description>
     <value></value>
     </param>

     <param type="string" name="edgecolor">
     <description>Color of the outer edge. Valid values are the same as those
         accepted by the plotcolour option of tp.plotdata().</description>
     <value></value>
     </param>

   </input>

   <returns type="bool">
      <description>True upon success, False otherwise</description>
   </returns>

</method>



   <method type="function" name="selectdata">
   <shortdescription> 
    Perform a TaQL based subtable selection for subsequent plots. 
   </shortdescription>
   
<description> 
Specify a TaQL select string. A subtable will be generated, and passed to the plotter.
</description>

<input>

     <param type="string" name="taqlstring">
     <description>TaQL string for selection</description>
     <value></value>
     </param>
</input>

<returns type="bool"/>

<example>

# set the list of tables to plot from.
  tp.open(tabnames=['3c273.ms','3c48.ms'])
  tp.selectdata(taqlstring='ANTENNA1==5') 

</example>

</method>

 
   <method type="function" name="plotdata">
   <shortdescription>
    Plot the result of a general TaQL expression.
   </shortdescription>

<description>
This function evaluates the specified TaQL expressions for the X and Y
axes of a two-dimensional plot,extracts the resulting columns, and
plots them.
\begin{enumerate}
\item TaQL expressions resulting in scalars are plotted as a single
       X-Y plot.  Expressions involving Array-Columns can result in
       arrays which are then plotted as overlays.
\item The default mode of operation is to plot one expression against
       another.  In the case of Array-Columns (ex. DATA column of a
       measurement set with each row containing an array of shape
       NColumns x NPolarzations), a Cross-plot mode allows plots with
       the x-axis representing one axes of the
       Array-Column. (ex. X-axis is channel number or polarization
       number).
\item If multiple tables are specified in tp.open(), then the TaQL
       expressions are applied to all tables and overlay plots are
       generated.
\item Plots can be made to separate panels whose locations on the plot
       window are user specified as a 3-tuple [nrows, ncolumns,
       panelnumber].
\item Multiple plots can be stacked upon each other on a panel
       (overplot mode).
\item Plotter options can be specifed to control appearance,
       plot-style, labels, etc.
\end{enumerate}

Valid TaQL strings must satisfy the following conditions.
\begin{enumerate}
\item Each TaQL string must result in a Double scalar or array.\\
{\tt 'AMPLITUDE(DATA[1,1])'} results in a Double scalar (valid). \\
{\tt 'AMPLITUDE(DATA[1:2,1])'} results in a Double array (valid).\\
{\tt 'MEAN(AMPLITUDE(DATA[1:2,1]))'} results in a Double scalar (valid).\\
{\tt 'DATA[1,1]'} results in a Complex scalar (NOT valid).\\
{\tt 'AMPLITUDE(DATA[1,1])\&lt;10'} results in a Bool scalar (NOT valid).
\item All TaQL functions resulting in Double Scalars/Arrays are allowed,
except for those involving an explicit collapse axis (means,sums,etc..).
Note that these functions are different from mean,sum,etc.. which
are supported.
\item TaQL strings must be provided as pairs of strings, with the
X-TaQL first, followed by the Y-TaQL. There are 3 cases.\\
X-TaQL $-$ Scalar, Y-TaQL $-$ Scalar (one-to-one single plot)\\
X-TaQL $-$ Scalar, Y-TaQL $-$ Array (one-to-many overlay plot)\\
X-TaQL $-$ Array, Y-TaQL $-$ Array (if the shapes are
the same, then a one-to-one mapping is done, otherwise only the first
X-TaQL result is used for a one-to-many mapping with the Y-TaQL Array.)
\item For cross plots (for example amplitude vs channel plots in an MS),
the X-TaQL must be a string containing 'CROSS'. The Y-TaQL is used to
read out the data from the table, and the x-values are the column indices
(channel numbers) chosen by the Y-TaQL.
\end{enumerate}

Plotting options ('poption' entries) are listed below.

    Default values are indicated within [ ] when present.
    nrows [ 1 ] :            Number of rows of panels
    ncols [ 1 ] :            Number of columns of panels
    panel [ 1 ] :            Panel index. Must be in [1,nrows x ncols]
    plotcolour [ 1 ] :       Plot colour. Codes for matplotlib are 
                             [0:black, 1:red, 2:green, 3:blue, 4:cyan, 5:yellow]
                             [magenta is reserved for plotting flagged 
                                 values if showflags = 1 , and cannot be set
   	                           by the user as a plot colour]
                             If the plotcolour field is left out from 'poption',
                             colours are chosen automatically.
    multicolour [ False ] :  True -\&gt; Each channel,pol appears in a different colour.
                             False -\&gt; Data from all pols and channels appear  
                             in the same colour. Different colours
                             appear for different layers (overplot). 
                             or data from different tables.
    timeplot [ False ] :     True -\&gt; Turn on date/time formatting for the x-axis.
    overplot [ False ] :     True -\&gt; Overlay on an existing plot. All layers will
                             remain active for data editing via flagging. Labels 
                             will be those of the top-most layer.
                             False -\&gt; Replace an existing plot with a new one.
                             In the case of an existing stack of plots, the
                             top-most layer is replaced. For example, this can be
                             used to modify the colour of the top-most layer
                             without creating an additional layer.
    py\_plotsymbol [ , ] :    Plot markers. Options for matplotlib are
                             [[,]:pixel, [.]:point, [o]:circle, [x]:cross, 
                             [+]:plus, [\^]:triangle up, [v]:triangle down,
                             [\&lt;]:triangle left, [\&gt;]:triangle right,
                             [-]:solid line, [--]:dashed line, [-.]:dash-dot line,
                             [:]:dotted line, [s]:square, [D]:diamond, 
                             [d]:thin diamond, [1]:tripod down, [2]:tripod up,
                             [3]:tripod left, [4]:tripod right, [h]:hexagon,
                             [H]:rotated hexagon, [p]:pentagon, 
                             [|]:vertical line symbol, [\_]:horizontal line symbol.
    markersize [ 10.0 ] :    The size (in pixels) of the markers being plotted.  
                             Markers are specified by the py\_plotsymbol option.
                             For example, '+', 'o', and 'd'
    linewidth [ 2.0 ]        The width of the lines that are drawn, lines are
                             if the py\_plotsymbol chosen is a line.  For example,
                             '-', '--', and ':'.
    plotrange [ ]  :         Only data within this specific range of values 
                             [xmin,xmax,ymin,ymax] will be plotted. 
                             Default is the data range.
    showflags [ 0 ] :        True -\&gt; Plot only unflagged data.
                             False -\&gt; Plot only flagged data.
    crossdirection [ False ] : Applies only with CROSS-plots on table ArrayColumns.
                             False -\&gt; use column number as the x-axis (ex. channel no.).
                             True -\&gt; use row number as the x-axis (ex. polarization no.).
    pointlabels [ ] :        Data points can be annotated by supplying a
                             list of labels. If N labels are supplied, the
                             first N data points plotted will be annotated.
                             (Note that if data is edited via flagging,the  
                             points are relabeled to label the first N points.)
    windowsize [ 8.0 ] :     horizontal size of plot window (inches)
    aspectratio [ 0.8 ] :    aspect-ratio of the plot window (dx/dy)
    fontsize [ 12.0 ] :      Font size of title text.
                             Font size of x,y labels are 80% of this.
    


Returns true if plotting is successful, false otherwise.

   </description>
   
<input>

     <param type="record" name="poption">
     <description>Record of plot options</description>
     <value type="record">
     <value name="nxpanels" type="int">1</value>
     <value name="nypanels" type="int">1</value>
     <value name="windowsize" type="int">6</value>
     <value name="aspectratio" type="double">0.8</value>
     <value name="fontsize" type="double">1.0</value>
     </value>
     </param>

     <param type="stringArray" name="labels">
     <description>List of strings : Title,Xlabel,Ylabel</description>
     <value></value>
     </param>

     <param type="stringArray" name="datastr">
     <description>List of TaQL strings : X,Y</description>
     <value></value>
     </param>
     
</input>
<returns type="bool"/>

<example>
Plot data amplitude vs uv-distance for two Measurement set tables as a
single panel plot.  Operate on channel 1 for Stokes 1 and 2 using the
DATA column.
   

 tp.open(tabnames=['3c273.ms','3c48.ms'])
 pop = { 'nrows':1, 'ncols':1,'panel':1}
 labels = ['Amplitude vs UVdist','uvdist','amplitude']
 xystr = ['SQRT(SUMSQUARE(UVW[1:2]))','AMPLITUDE(DATA[1,1:2])']
 tp.plotdata(poption=pop,labels=labels,datastr=xystr)


TaQL strings for the above example can also be written as follows.

  xystr = ['SQRT(UVW[1]*UVW[1]+UVW[2]*UVW[2])','AMPLITUDE(DATA[1,1:2])']


</example>

<example>       
Multi-panel plotting
   

 # uvdist for pol 1 and chan 1,2 on panel 211
 pop = { 'nrows':2, 'ncols':1,'panel':1}
 labels = ['Amplitude vs UVdist','uvdist','amplitude']
 xystr = ['SQRT(SUMSQUARE(UVW[1:2]))','AMPLITUDE(DATA[1,1:2])']
 tp.plotdata(poption=pop,labels=labels,datastr=xystr)
      
 # uvdist for pol 2 and chan 1,2 (overplot=1) on panel 211
 pop = { 'nrows':2, 'ncols':1,'panel':1, 'overplot':True}
 labels = ['Amplitude vs UVdist','uvdist','amplitude']
 xystr = ['SQRT(SUMSQUARE(UVW[1:2]))','AMPLITUDE(DATA[2,1:2])']
 tp.plotdata(poption=pop,labels=labels,datastr=xystr)
      
 # uv coverage on panel 223
 pop = { 'nrows':2, 'ncols':2,'panel':3, 'plotcolour':4}
 labels = ['UV Coverage','u','v']
 xystr = ['UVW[1]','UVW[2]','-UVW[1]','-UVW[2]']
 tp.plotdata(poption=pop,labels=labels,datastr=xystr)
      
 # amp(data[1:2,1:10]) vs channel number on panel 224
 pop = { 'nrows':2, 'ncols':2,'panel':4, 'plotcolour':1}
 labels = ['Amplitude vs Baseline number','baseline number','amplitude']
 xystr = ['28*ANTENNA1+ANTENNA2-(ANTENNA1-1)*(ANTENNA1+2)/2',
           'AMPLITUDE(DATA[1:2,1:10])']
 tp.plotdata(poption=pop,labels=labels,datastr=xystr)

</example>

<example>
Plotting with time formatting

 # vistime for 10 chans (timeplot=1)   
 pop = { 'nrows':1, 'ncols':1,'panel':1,'timeplot':True}
 labels = ['Timeplot','time','amplitude']
 xystr = ['TIME','AMPLITUDE(DATA[1:2,1:10])']
 tp.plotdata(poption=pop,labels=labels,datastr=xystr)

</example>
      
<example>
Cross-plots - take in a single TaQL expression involving an ArrayColumn,
and use the column numbers of each Array per row of the table as the x-axis.
In a measurement set, the DATA ArrayColumn contains 2D Arrays, each with 
NCHAN columns and NPOL rows. Plotting with 'CROSS' as the X-TaQL, uses 
channel numbers as the x-axis. The option 'crossdirection=True' can be used 
to plot with polarization on the x-axis.


   
 pop = { 'nrows':2, 'ncols':1,'panel':1, 'plotcolour':2}
 labels = ['Amplitude vs Channel number','chan','amplitude']
 xystr = ['CROSS','AMPLITUDE(DATA[1:2,1:10])']
 tp.plotdata(poption=pop,labels=labels,datastr=xystr)
 pop = { 'nrows':2, 'ncols':1,'panel':1, 'plotcolour':2, 'crossdirection':True}
 labels = ['Amplitude vs Polarization number','pol','amplitude']
 xystr = ['CROSS','AMPLITUDE(DATA[1:2,1:10])']
 tp.plotdata(poption=pop,labels=labels,datastr=xystr)

</example>
      
<example>
Individual points can be annotated by specifying the 'pointlabels' parameter. 
If N labels are specified, the first N data points to be plotted, are annotated.

   
 pop = {'nrows':1,'ncols':1, 'panel':1, 'plotcolour':1,'py_plotsymbol':'o',
        'pointlabels':[' A1',' A2',' A3',' A4',' A5',' A6',' A7',' A8',
                       ' A9',' B1',' B2',' B3',' B4',' B5',' B6',' B7',
                       ' B8',' B9',' C1',' C2',' C3',' C4',' C5',' C6',
                       ' C7',' C8',' C9',' D1',' D2',' D3',' D4']}
 xystr = ['POSITION[1]','POSITION[2]']
 labels = ['Antenna positions','x','y']
 tp.plotdata(poption=pop,labels=labels,datastr=xystr)

</example>
      
<example>
To plot with multiple colours for each channel and polarization of an MS.


 #(multicolour=1, plotcolour > 5)
 pop = { 'nrows':1, 'ncols':1,'panel':1, 'plotcolour':6,
         'showflags':0, 'multicolour':True}
 labels = ['Amplitude vs UVdist','uvdist','amplitude']
 xystr = ['SQRT(SUMSQUARE(UVW[1:2]))','AMPLITUDE(DATA[1:2,1:2])']
 tp.plotdata(poption=pop,labels=labels,datastr=xystr)

</example>   

</method>

 
   <method type="function" name="iterplotstart">
   <shortdescription> Initialize plotting with an iteration axis
</shortdescription>
   
<description> 
Begin a series of plots using subtables constructed via an iteration axes.
In addition to plotdata parameters, set a list of iteration axes
(Table column names) and use iterplotnext() to step through.
Only forward step through is allowed.
</description>
<input>

     <param type="record" name="poption">
     <description>Record of plot options
      default is nxpanels=1, nypanels=1, windowsize=6,
      aspectratio=0.8, fontsize=1.0
     </description>
     <value type="record">
     <value name="nxpanels" type="int">1</value>
     <value name="nypanels" type="int">1</value>
     <value name="windowsize" type="int">6</value>
     <value name="aspectratio" type="double">0.8</value>
     <value name="fontsize" type="double">1.0</value>
     </value>
     </param>

     <param type="stringArray" name="labels">
     <description>List of strings : Title,Xlabel,Ylabel</description>
     <value></value>
     </param>

     <param type="stringArray" name="datastr">
     <description>List of TaQL strings : X,Y</description>
     <value></value>
     </param>

     <param type="stringArray" name="iteraxes">
     <description>List of strings : Iteration axes</description>
     <value></value>
     </param>
</input>
<returns type="bool"/>

<example>

 # Open a list of MS tables to plot from, 
 # and initialize a plot of Amplitude vs UV distance for 
 # channel 1 and stokes 1, iterating over Antenna1
 tp.open(tabnames=['3c273.ms','3c48.ms'])
 pop = { 'nrows':3, 'ncols':1,'panel':1, 'plotcolour':1,
         'aspectratio':1.6}
 iteraxes = ['ANTENNA1']
 labels = ['Amplitude vs UVdist','uvdist','amplitude']
 xystr = ['SQRT(SUMSQUARE(UVW[1:2]))','AMPLITUDE(DATA[1,1:2])']
 tp.iterplotstart(poption=pop, labels=labels, datastr=xystr,
                  iteraxes=iteraxes)
 tp.iterplotnext()

</example>

<example>
To iterate over baseline and plot Amplitude vs time, for stokes 1, channel 1.

 pop = { 'nrows':4, 'ncols':1 }
 labels = ['Amplitude vs UVdist (iterating over Baseline)',
            'uvdist','amplitude']
 xystr = ['SQRT(SUMSQUARE(UVW[1:2]))','AMPLITUDE(DATA[1,1])']
 iteraxes = ['ANTENNA1','ANTENNA2']
 tp.iterplotstart(poption=plotopts,labels=labels,
                  datastr=xystr,iteraxes=iteraxes)


</example>
</method>

   <method type="function" name="replot">
   <shortdescription>
    Replot all existing panels and layers.
   </shortdescription>
   
<description> 
    Replot all existing panels and layers.
    To be used after a change of flag version, to get all
      visible plots to reflect the changed flags.
</description>
<input>

</input>
<returns type="bool"/>

</method>

 
   <method type="function" name="iterplotnext">
   <shortdescription>
Start/Continue plotting
    </shortdescription>
   
<description> 
Start/Continue plotting by stepping through the iteration axes. 
Call after tp.iterplotstart(). 
Returns 1 if additional iteration steps remain ,
0 if last iteration has completed.
</description>

<returns type="int"/>

<example>

 # iterate through the data
  
 tp.open(tabnames=['3c273.ms','3c48.ms'])
 plotopts = {'aspectratio': 1.2, 'ncols': 2, 'nrows': 1}
 labels = ['Amplitude vs UVdist (iterating over Antenna1)',
           'uvdist','amplitude']
 xystr = ['SQRT(SUMSQUARE(UVW[1:2]))','AMPLITUDE(DATA[1,1])']
 iteraxes = ['ANTENNA1']
 tp.iterplotstart(poption=plotopts,labels=labels,
                  datastr=xystr,iteraxes=iteraxes)
 ret = tp.iterplotnext()
 ret = tp.iterplotnext()
 ret = tp.iterplotnext()
...

</example>
</method>

 
   <method type="function" name="iterplotstop">
   <shortdescription> Stop plot iterations.
   </shortdescription>
   
<description> 
To be called at the end of the plot iterations, or in between if desired.
Okay if ignored.
</description>

<input>
   <param type="bool" name="rmplotter">
   <description>Indicates whether the plot window should be removed (true) from the
      display or left (false) </description>
    <value>false</value>
   </param>
</input>

<returns type="bool"/>
<example>

 # iterate through and stop after 5 iterations of 2 plots per page
  
 tp.open(tabnames=['3c273.ms','3c48.ms'])
 plotopts = {'ncols': 2, 'nrows':1 }
 labels = ['Amplitude vs UVdist (iterating over Antenna1)',
           'uvdist','amplitude']
 xystr = ['SQRT(SUMSQUARE(UVW[1:2]))','AMPLITUDE(DATA[1,1])']
 iteraxes = ['ANTENNA1']
 tp.iterplotstart(poption=plotopts,labels=labels,
                  datastr=xystr,iteraxes=iteraxes)
 ret = tp.iterplotnext()
 ret = tp.iterplotnext()
 ret = tp.iterplotnext()
 ret = tp.iterplotnext()
 ret = tp.iterplotnext()
 tp.iterplotstop()

</example>
</method>

 
   <method type="function" name="markregions">
   <shortdescription> Mark a rectangular region to flag
   </shortdescription>

<description> 

Mark or specify a rectangular region to flag.  Call without arguments
to enable mouse based interactive region marking.  Marked regions can
be discarded via the 'Alt' key.  Command-line region marking can be
done by setting panel and region parameters.  After marking flag
regions, call tp.flagdata() or tp.unflagdata().

<!--
Mark a rectangular region to be flagged. Each call to {\tt markregions} allows
one region to be drawn. Any number of successive calls can be made. In the case
of multi-panel plots, a panel number must be specified with each call. This
function marks and stores a list of marked regions. To apply flags, the 
{\tt flagdata} function must be used. The panel number corresponds to a
row-major ordering of panels. -->

</description>
<input>

     <param type="int" name="nrows">
     <description>Number of rows of panels</description>
     <value>0</value>
     </param>
     
     <param type="int" name="ncols">
     <description>Number of columns of panels</description>
     <value>0</value>
     </param>
     
     <param type="int" name="panel">
     <description>Panel number</description>
     <value>1</value>
     </param>
     
     <param type="doubleArray" direction="in" name="region">
     <description>[xmin,ymin,xmax,ymax] bounding box</description>
     <value>0.0</value>
     </param>
    
</input>
<returns type="bool"/>

<example>

  tp.markregions(nrows=2,ncols=1,panel=1,region=[300.0,400.0,0.090,0.095])

</example>

<!--

<example>

# mark 2 flag regions on a multi-panel plot, one in panel 1 and one
# in panel 2.
  tp.markregions(panel=1)
  tp.markregions(panel=2)

</example>

-->

</method>

 
   <method type="function" name="flagdata">
   <shortdescription>
Flag Data for selected flag regions
   </shortdescription>

<description> 
Set flags for all regions marked using {\tt tp.markregions()}.  The
plot is automatically redrawn after applying flags.

<!--
    Options : 
       diskwrite = [False : flag in memory],[True : write flags to disk]
       rowflags = [False : use FLAG column],[True : use FLAG,FLAG_ROW ]
-->

If reduction TaQL functions such as {\tt sum,mean} are used, flags
corresponding to all accessed values will be modified. For example, with
a measurement set table, flagging on the mean amplitude of stokes 1 and
channels 1 to 5, given by 'MEAN(AMPLITUDE(DATA[1,1:5]))' results in flags
being set for all 5 accessed channels.

For a measurement set, by default, flags are set only for accessed channels
and stokes when the DATA column is used. However all channels/stokes can be
flagged for the marked flag regions by setting the corresponding row flag.

</description>
<input>
</input>
<returns type="bool"/>

<!--
<example>

# mark 2 flag regions on a multi-panel plot, one in panel 1 and one
# in panel 2. Then apply the flags and write to disk.
  tp.markregions(panel=1)
  tp.markregions(panel=2)
  tp.flagdata()

</example>
-->

</method>
  
   <method type="function" name="unflagdata">
   <shortdescription> 
    Unset flags for all regions marked using {\tt tp.markregions()}. 
   </shortdescription>

<description> 
    Unset flags for all regions marked using {\tt tp.markregions()}. 
    This is similar to the tp.flagdata() function in all other respects.

<!--
    Options : 
      diskwrite = [False : unflag in memory], [True : write flags to disk]
      rowflags = [False : use FLAG column]. [True : use FLAG,FLAG_ROW ]
-->
   
</description>
<input>
</input>
<returns type="bool"/>
<example>

# mark 2 flag regions on a multi-panel plot, one in panel 1 and one
# in panel 2. Then apply the flags and write to disk.
  tp.markregions(panel=1)
  tp.markregions(panel=2)
  tp.unflagdata()

</example>
</method>

   <method type="function" name="locatedata">
   <shortdescription>
    Print info about data selected using tp.markregions(). 
   </shortdescription>
   
<description> 
    Print info about data selected using tp.markregions(). 
</description>

<input>

     <param type="stringArray" name="columnlist">
     <description>List of strings : Column names (or TaQL expressions !) </description>
     <value></value>
     </param>
</input>

<returns type="bool"/>

</method>
 

   <method type="function" name="clearflags">
   <shortdescription>  Clear all flags in the table.
    </shortdescription>

<description> 
   
Clear all flags from the table. This may eventually be modified
to allow for selective un-flagging of previously flagged regions (specified by
indexing into a stored history of marked flag-regions). 
</description>

<input>
     <param type="bool" name="roottable">
     <description>false : clear flags for the current sub-selection;
                  true : clear flags for root table </description>
     <value>false</value>
     </param>

</input>

<returns type="bool"/>
<example>

# clear all flags from two measurement set tables
  
  tp.open(tabnames=['3c273.ms','3c48.ms'])
  tp.clearflags()
  tp.done()

</example>
</method>


   <method type="function" name="saveflagversion">
   <shortdescription>  Save current flags with a version name. 
   			 </shortdescription>
<description> 
  Save current flags with a version name. This applies to the last opened Tables 
</description>
<input>
     <param type="string" name="versionname">
     <description>Version name </description>
     <value></value>
     </param>
     <param type="string" name="comment">
     <description>Comment for this flag table </description>
     <value></value>
     </param>
     <param type="string" name="merge">
     <description>merge type </description>
     <value></value>
     </param>
</input>
<returns type="bool"/>

</method>

    <method type="function" name="restoreflagversion">
<shortdescription>Restore flags from a saved flag\_version. 
 			   </shortdescription>
   <description>  Restore flags from a saved flag\_version. 
 This applies to the last opened Tables


 versionname : name of flag version to restore to main table
 merge : Type of operation to perform during restoration.
        merge = replace  : replaces the main table flags.
        merge = and   : logical AND with main table flags
        merge = or    : logical OR with main table flags
        Default : replace.

</description>
<input>
     <param type="stringArray" name="versionname">
     <description>Version name </description>
     <value></value>
     </param>
     <param type="string" name="merge">
     <description>merge type </description>
     <value></value>
     </param>
</input>
<returns type="bool"/>

</method>


    <method type="function" name="deleteflagversion">
   <shortdescription>  Delete a saved flag\_version. 
 			   </shortdescription>
<description>   Delete a saved flag\_version. 
   			 This applies to the last opened Tables
</description>
<input>
     <param type="stringArray" name="versionname">
     <description>Version name </description>
     <value></value>
     </param>
</input>
<returns type="bool"/>

</method>
    <method type="function" name="getflagversionlist">
   <shortdescription>  Print out a list of saved flag\_versions. 
 			   </shortdescription>
<description> 
  Print out a list of saved flag\_versions. 
   			 This applies to the last opened Tables
</description>
<input>
</input>
<returns type="bool"/>

</method>


   <method type="function" name="clearplot">
   <shortdescription>  Clear a plot.
</shortdescription>
   
<description> 
Clear a plot.  An empty argument list (i.e., clearplot()) or
clearplot(0) clears all plots currently visible whereas
clearplot(nrows,ncols,panel) clears a plot on a specified panel.
</description>
<input>

     <param type="int" name="nrows">
     <description>Number of rows of panels</description>
     <value>0</value>
     </param>

     <param type="int" name="ncols">
     <description>Number of columns of panels</description>
     <value>0</value>
     </param>

     <param type="int" name="panel">
     <description>Panel number (index)</description>
     <value>0</value>
     </param>

</input>
<returns type="bool"/>
<example>

# clear all flags from two measurement set tables
  
  tp.open(tabnames=['3c273.ms','3c48.ms'])
  tp.clearflags()
  tp.done()

</example>
</method>


 
   <method type="function" name="done">
   <shortdescription>  Clean up the tableplot tool
   </shortdescription>
   
<description>   Clean up the tableplot tool, and make it ready for tp.open() again.
</description>
<returns type="bool"/>
</method>

</tool>
</casaxml>

